//Windows95Desktop.java 
//Author:Alan Zhou
import java.awt.AWTException;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
//import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.awt.image.BufferedImage;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
//import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Robot;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.ZonedDateTime;
import java.time.ZoneId;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Random;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.border.BevelBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DateEditor;
import javax.swing.JSpinner.NumberEditor;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.metal.DefaultMetalTheme;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.text.JTextComponent;
import javax.swing.text.NumberFormatter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;

public class Windows95Desktop extends MouseAdapter implements ActionListener, KeyListener, MouseListener, MouseMotionListener {
  public static void main(String[] args) {
    new Windows95Desktop();
  }
  // Declaring Variables
  boolean[] paintToolkitBoolean, paintPaletteBoolean;
  char calculatorStandardOperator, calculatorScientificOperator;
  double calculatorNumberA, calculatorNumberB, calculatorStandardResult, calculatorNumberC, calculatorNumberD,
  calculatorScientificResult;
  int currentDayOfWeekNumber, responseInsertDisk;
  // Declaring AWT and Swing Objects
  AudioInputStream startupAudioStream, shutdownAudioStream;
  AudioInputStream[] BSOD_AudioStream;
  BasicSliderUI sliderUI;
  BufferedImage blank;
  BufferedReader notepadReader;
  ButtonGroup locationInformationButtonGroup, howToConnectButtonGroup, internetMailButtonGroup, MSN_ButtonGroup,
  heartsButtonGroup, findSetupWizardButtonGroup, shutDownWindowsButtonGroup, addNewHardwareWizardButtonGroup,
  keyboardPropertiesButtonGroup, mousePropertiesButtonGroup, mousePropertiesDialogButtonGroup,
  passwordsPropertiesButtonGroup, addPrinterWizardButtonGroup;
  ButtonGroup[] displayPropertiesButtonGroup, calculatorButtonGroup, scanDiskButtonGroup, findAllFilesButtonGroup,
    customJoystickButtonGroup, multimediaPropertiesButtonGroup, controlPanelSystemPropertiesButtonGroup;
  Calendar dateTimePropertiesCalendar;
  Clip startupClip, shutdownClip;
  Clip[] BSOD_Clip;
  Color tealBlue, white, gray, grayAboutWindows95, win95Blue, nodeBorderYellow, freeCellBackgroundGreen,
  heartsBackgroundGreen, solitaireBackgroundGreen, paintSelectedColor, BSOD_ScreenColor, aProblemHasBeenDetectedScreenColor,
  safeModeScreenColor;
  Color[] calculatorColor, paintPaletteColor;
  Cursor blankCursor, normalCursor, workingInBackgroundCursorGray, workingInBackgroundCursorTeal,
  workingInBackgroundCursorWhite;
  DateEditor dateTimePropertiesTimeEditor;
  DateTimeFormatter formatDate, formatTime, timeSampleFormat, shortDateSampleFormat, longDateSampleFormat;
  DecimalFormat calculatorDecimalFormat;
  DefaultListModel < ? > manufacturersListModel, modelsListModel, addRemoveProgramsPropertiesAddRemoveSoftwareListModel;
  DefaultMutableTreeNode taskPropertiesAdvancedNodeSelected, helpTopicsNodeSelected;
  DefaultMutableTreeNode[]
  // Taskbar Properties Nodes
  taskbarPropertiesRemoveShortcutsFoldersNode, taskbarPropertiesAdvancedNode,
  // Exploring Nodes
  exploringMyComputerAllFoldersNode, exploringMyComputerContentsNode, exploringRecycleBinAllFoldersNode,
  exploringRecycleBinContentsNode, exploringStartMenuAllFoldersNode, exploringStartMenuContentsNode,
  windowsExplorerAllFoldersNode, windowsExplorerContentsNode,
  // Find All File Browse For Folder
  findAllFilesBrowseForFolderNode, findAllFilesBrowseForFolderContentsNode,
  // Help Nodes
  helpTopicsNode, introducingWindowsNode,
  // Subnodes of Introducing Windows
  welcomeNode, usingWindowsAccessoriesNode,
  /// Subnodes of Welcome
  aListOfWhatsNewNode,
  // Subnodes of Using Windows Accessories
  forGeneralUseNode, forWritingAndDrawingNode, forCommunicatingWithOthersNode, forSoundAndVideoNode,
  forUsingWithTwoComputersNode, forMaintainingYourComputerNodeA, howToNode,
  // Subnodes of How To...
  runProgramsNode, workWithFilesAndFoldersNode, printNode, useANetworkNode, communicateWithOthersNode,
  safeguardYourWorkNode, changeWindowsSettingsNode, setUpHardwareNode, maintainYourComputerNode,
  useAPortableComputerWithWindowsNode, setUpWindowsAccessibilityFeaturesNode, useHelpNode,
  // Subnodes of Change Windows Settings
  changeHowWindowsLooksNodeA, customizeMyComputerOrWindowsExplorerNode, changeTaskbarSettingsNode,
  addOrRemoveFontsNode, changeKeyboardSettingsNodeA, changeMouseSettingsNodeA, changeMultimediaSettingsNode,
  setUpWindowsForMultipleUsersNodeA,
  // Subnodes of Set Up Windows Accessibility Features
  changeKeyboardSettingsNodeB, changeMouseSettingsNodeB, changeHowWindowsLooksNodeB, useSoundNode,
  setUpWindowsForMultipleUsersNodeB,
  // Tips and Tricks
  tipsAndTricksNode,
  // Subnodes of Tips and Tricks
  forSettingUpTheDesktopEfficientlyNode, forMaintainingYourComputerNodeB, forRunningProgramsNode,
  forWorkingWithFilesAndFoldersNode, forPrintingNode, forNetworkingNode, tipsOfTheDayNode,
  // Troubleshooting
  troubleshootingNode,
  // Multimedia devices
  multimediaPropertiesNode,
  // Control Panel -> System Properties -> Device Manager
  controlPanelSystemPropertiesNode;
  DefaultTreeCellRenderer helpRenderer;
  File documentsReadmeFileOpenFile, documentsReadmeFileSaveFile, documentsReadmeFileSaveAsFile, runBrowseFile;
  FileNameExtensionFilter programs, txt;
  Font MSSansSerif8, MSSansSerif11, MSSansSerif12, MSSansSerif14, MSSansSerif15, MSSansSerif16, MSSansSerif16Bold,
  MSSansSerif18, MSSansSerif20, courierNew20, MSJhenghei20;
  Font[] calculatorFont;
  NumberFormatter calculatorFormatter;
  GridBagConstraints[] paintGridBagConstraints;
  Graphics minesweeperGraphics;
  Icon confirmDelete, confirmFileDelete, crossSign, exclamationMark, onlineRegistrationIcon, questionMark,
  informationSign, helpBookClosedIcon, helpBookOpenIcon, helpQuestionMarkIcon;
  Icon[] soundsPropertiesIcon;
  ImageIcon 
  //Clickable Icons
  myComputerSelectedImage,
  //Window Top-Left Icons
  Windows95Icon, freeCellIcon, heartsIcon, minesweeperIcon, solitaireIcon, internetExplorerIcon,
  mediaPlayerIcon, soundRecorderIcon, volumeControlIcon, scanDiskIcon, calculatorIcon, paintIcon,
  MSDOSPromptIcon, notepadIcon, myComputerIcon, C_DriveIcon, controlPanelIcon, folderIcon, printersIcon, recycleBinIcon;
  JButton aboutWindows95OK, inboxOK, inboxCancel, theInternetHelp, theInternetBack, theInternetNext,
  theInternetCancel, installNewModemHaveDisk, theInternetCancelAfterSuccess, MSN_OK, MSN_Cancel,
  heartsScoreSheetOK, heartsQuoteOK, heartsAboutOK, aboutNotepadOK;
  JButton[] button, displayPropertiesButton, displayPropertiesDialogButton, taskbarPropertiesButton,
    taskbarPropertiesDialogButton, dateTimePropertiesButton, systemPropertiesButton, inboxPropertiesButton,
    recycleBinPropertiesButton, internetPropertiesButton, MSN_PropertiesButton, welcomeButton,
    shutDownWindowsButton, annotateButton, copyingFilesButton, theInternetCopyingFilesButton,
    internetExplorerToolbarButton, freeCellStatisticsButton, freeCellOptionsButton, heartsWelcomeButton,
    heartsOptionsButton, mediaPlayerButton, soundRecorderButton, calculatorStandardButton, calculatorScientificButton, paintColorButton, scanDiskButton,
    MSDOSPromptButton, findAllFilesButton, findAllFilesBrowseForFolderButton, helpButton, findSetupWizardButton,
    runButton, shutDownWindowsHelpButton, addNewHardwareWizardButton, addRemoveProgramsPropertiesButton,
    addRemoveProgramsPropertiesDialogButton, controlPanelInternetPropertiesButton, joystickPropertiesButton,
    customJoystickButton, keyboardPropertiesButton, keyboardPropertiesDialogButton, modemsInstallNewModemButton,
    modemsPropertiesButton, mousePropertiesButton, mousePropertiesDialogButton, multimediaPropertiesButton,
    multimediaPropertiesDialogButton, controlPanelNetworkButton, controlPanelNetworkDialogButton,
    passwordsPropertiesButton, addPrinterWizardButton, regionalSettingsPropertiesButton, soundsPropertiesButton,
    controlPanelSystemPropertiesButton, controlPanelSystemPropertiesDialogButton;
  JCheckBox welcomeCheckBox, dateTimePropertiesCheckBox, theMicrosoftNetwork, MicrosoftMail, MicrosoftFax,
  dontDetectMyModem, findAllFilesIncludeSubfolders, controlPanelInternetPropertiesCheckBox,
  joystickPropertiesCheckBox, keyboardPropertiesCheckBox, modemsInstallNewModemCheckBox,
  mousePropertiesCheckBox;
  JCheckBox[] displayPropertiesCheckBox, taskbarOption, volumeMute, freeCellOptionsCheckBox, heartsOptionsCheckBox,
    scanDiskCheckBox, calculatorCheckBox, customJoystickCheckBox, multimediaPropertiesCheckBox,
    passwordsPropertiesCheckBox;
  JCheckBoxMenuItem heartsCheckBoxMenuItem;
  JCheckBoxMenuItem[] shutDownWindowsHelpOptionsCheckBoxMenuItem, taskbarPropertiesAdvancedCheckBoxMenuItem,
    myComputerCheckBoxMenuItem, playDosGameC_CheckBoxMenuItem, programFilesCheckBoxMenuItem,
    controlPanelCheckBoxMenuItem, printersCheckBoxMenuItem, recycleBinCheckBoxMenuItem,
    minesweeperCheckBoxMenuItem, internetExplorerCheckBoxMenuItem, calculatorCheckBoxMenuItem,
    paintCheckBoxMenuItem, findAllFilesCheckBoxMenuItem, controlPanelFontsCheckBoxMenuItem;
  JComboBox < String > dateTimePropertiesMonth, dateTimePropertiesTimeZone, copyFilesFrom, theInternetCopyFilesFrom,
    locationInformationCountrySelect, internetExplorerAddress, MSDOSPromptFontSize, runOpen,
    addRemoveProgramsPropertiesComboBox, mousePropertiesComboBox, controlPanelNetworkComboBox;
  JComboBox < String > [] displayPropertiesComboBox, findAllFilesComboBox, joystickPropertiesComboBox,
    keyboardPropertiesDialogComboBox, multimediaPropertiesComboBox, regionalSettingsPropertiesComboBox,
    soundsPropertiesComboBox;
  JDesktopPane desktop;
  JDialog welcome, dateTimeProperties, aboutWindows95Dialog, shutDownWindowsDialog, annotateDialog, displayProperties,
  displayPropertiesChangeConfiguration, taskbarProperties, taskbarPropertiesCreateShortcut,
  taskbarPropertiesRemoveShortcutsFolders, myComputerProperties, inboxOpen, inboxProperties,
  recycleBinProperties, theInternetOpen, internetProperties, MSN_Open, MSN_Properties, copyingFiles,
  copyingFiles2, theInternetCopyingFiles, theInternetCopyingFiles2,
  // Control Panel JDialogs
  addNewHardwareWizard, addRemoveProgramsProperties, addRemoveProgramsPropertiesInstall,
  addRemoveProgramsPropertiesDetails, addRemoveProgramsPropertiesHaveDisk, controlPanelInternetProperties,
  joystickProperties, customJoystick, joystickCalibration, joystickTest, keyboardProperties,
  keyboardPropertiesAdd, keyboardPropertiesProperties, keyboardPropertiesChange, modemsInstallNewModem,
  modemsProperties, mouseProperties, mousePropertiesSaveScheme, mousePropertiesChange, multimediaProperties,
  controlPanelNetwork, networkSelectNetworkComponentType, networkSelectNetworkService, passwordsProperties,
  addPrinterWizard, regionalSettingsProperties, soundsProperties, controlPanelSystemProperties,
  // Start Menu JDialog
  freeCellStatistics, freeCellOptions, heartsWelcome, heartsOptions, heartsScoreSheet, heartsQuote,
  heartsAbout, surfaceScanOptions, scanDiskAdvancedOptions, aboutNotepadDialog, findAllFilesBrowseForFolder,
  helpTopicsWindowsHelp, findSetupWizard, startMenuRunOpen;
  // JFileChooser
  JFileChooser documentsReadmeFileOpen, documentsReadmeFileSave, documentsReadmeFileSaveAs, runBrowse,
  taskbarPropertiesCreateShortcutBrowse, addRemoveProgramsPropertiesRunInstallationProgramBrowse;
  // JFormattedTextField
  JFormattedTextField calculatorStandardTextField, calculatorScientificTextField;
  // JFrames
  JFrame mainFrame, startMenuPopupOpen, startMenuPopupFind, taskbarPropertiesAdvanced, volumeControl, audioProperties,
  myComputerOpen, removableDiskA_Explore, removableDiskA_Properties, playDosGameC_Open,
  playDosGameC_Properties, programFilesOpen, programFilesExplore, programFilesProperties, windowsOpen,
  windowsExplore, windowsProperties, commandOpen, commandProperties, controlPanelOpen,
  // Start Menu JFrames
  freeCellOpen, heartsOpen, minesweeperOpen, solitaireOpen, internetExplorerOpen, mediaPlayerOpen,
  soundRecorderOpen, scanDiskOpen, calculatorOpen, paintOpen, MSDOSPromptOpen, windowsExplorerOpen,
  documentsReadme_txt, findAllFiles, shutDownWindowsHelp,
  // Control Panel JFrames
  controlPanelFontsOpen, printersOpen, recycleBinOpen, taskManager,
  // Exploring JFrames
  exploringMyComputer, exploringRecycleBin, exploringStartMenu;
  JLabel
  // Booting JLabels
  bootingScreen, startupLoadingScreen, blackScreen, tealScreen, welcomeToWindows95,
  // Display Properties JLabels
  displayPropertiesScreenSaverMonitor, displayPropertiesAppearanceImage, flyingWindowsLabel,
  // Taskbar JLabels
  taskbarPropertiesRemoveShortcutsFoldersText,
  // About Windows 95
  aboutWindows95,
  // My Computer JLabels
  myComputer, myComputerSelected, myComputerUnselected, removableDiskA, playDosGameC, playDosGameC_StatusText,
  programFiles, windows, command, commandMSDOS, removableDiskASelected, playDosGameCSelected,
  programFilesSelected, windowsSelected, commandSelected, printersSelected,
  // Program Files Labels
  accessories, accessoriesSelected, microsoftExchange, microsoftExchangeSelected, plus, plusSelected,
  programFilesTheMicrosoftNetwork, programFilesTheMicrosoftNetworkSelected, programFilesStatusText,
  // Control Panel JLabels
  controlPanel, addNewHardware, addRemovePrograms, dateTime, display, fonts, internet, joystick,
  joystickCalibrationLabel, joystickTestLabel, keyboard, keyboardBlinkingCursor, modems, mouse, multimedia,
  network, passwords, passwordsPropertiesLabel, controlPanelPrinters, regionalSettings, sounds, system,
  controlPanelStatusText,
  // Control Panel JLabels When Selected
  controlPanelSelected, addNewHardwareSelected, addRemoveProgramsSelected, dateTimeSelected, displaySelected,
  fontsSelected, internetSelected, joystickSelected, keyboardSelected, modemsSelected, mouseSelected,
  multimediaSelected, networkSelected, passwordsSelected, controlPanelPrintersSelected,
  regionalSettingsSelected, soundsSelected, systemSelected,
  // Control Panel JLabels When Not Selected
  controlPanelUnselected, addNewHardwareUnselected, addRemoveProgramsUnselected, dateTimeUnselected,
  displayUnselected, fontsUnselected, internetUnselected, joystickUnselected, keyboardUnselected,
  modemsUnselected, mouseUnselected, multimediaUnselected, networkUnselected, passwordsUnselected,
  controlPanelPrintersUnselected, regionalSettingsUnselected, soundsUnselected, systemUnselected, printers,
  empty, myComputerStatusText, networkNeighborhood,
  // Printers JLabel
  printersStatusText,
  // Inbox JLabels
  inbox, inboxSelected, inboxUnselected, getConnected, getConnected2, MSN_CheckboxIcon, MicrosoftMailIcon,
  MicrosoftFaxIcon, inboxSeparator, copyingFilesProgress, CMC_dll, theInternetCopyingFilesProgress,
  // The Internet JLabels
  theInternet, theInternetSelected, theInternetUnselected, welcomeToInternetSetup, internetSetupImage,
  theInternetSeparator, detectYourModem, youNeedAModem, installNewModemImage, installNewModemSeparator,
  lookingForAModem, clickTheManufacturer, standard300bpsModem, pleaseWaitInstallYourModem,
  locationInformationImage, locationInformationCountry, locationInformationAreaCode,
  locationInformationAccessNumber, locationInformationPhoneSystem, locationInformationSeparator,
  yourModemSuccess, howToConnect, installingFiles, installingFiles_, internetMail, internetMailNote,
  internetMailInstallingFiles1, internetMailInstallingFiles2, internetMailInstallingFiles_1,
  internetMailInstallingFiles_2, welcomeToInternetSetupAfterSuccess,
  // Recycle Bin JLabels
  recycleBin, recycleBinSelected, recycleBinUnselected, recycleBinStatusText,
  // MSN JLabels
  MSN, MSN_Selected, MSN_Unselected, MSN_Image, MSN_Text, MSN_Need, MSN_Separator,
  // Start Menu JLabels
  startMenuButton, startMenuButtonClicked, startMenuButtonClickedTwice, startMenuPrograms,
  programsAccessories, programsStartUp, programsMS_DOS_Prompt, programsWindowsExplorer,
  internetExplorerMessage, startMenuDocuments, documentsReadme, startMenuSettings, settingsControlPanel,
  settingsPrinters, settingsTaskbar, startMenuFind, findFilesOrFolders, startMenuHelp, startMenuRun,
  startMenuShutDown, startMenuProgramsSelected, startMenuProgramsDisplayed, programsAccessoriesSelected,
  programsStartUpSelected, programsMS_DOS_PromptSelected, programsWindowsExplorerSelected,
  startMenuDocumentsSelected, startMenuDocumentsDisplayed, documentsReadmeSelected, startMenuSettingsSelected,
  startMenuSettingsDisplayed, settingsControlPanelSelected, settingsPrintersSelected, settingsTaskbarSelected,
  startMenuFindSelected, startMenuFindDisplayed, findFilesOrFoldersSelected, startMenuHelpSelected,
  startMenuRunSelected, startMenuShutDownSelected, startMenuDocumentsCovered, startMenuSettingsCovered,
  startMenuFindCovered, programsAccessoriesDisplayed, programsStartUpDisplayed, programsStartUpCovered,
  programsMS_DOS_PromptCovered, programsWindowsExplorerCovered,
  /// Accessories JLabels
  games, gamesFreeCell, gamesHearts, gamesMinesweeper, gamesSolitaire, internetTools,
  internetToolsInternetExplorer, internetToolsInternetSetupWizard, accessoriesMultimedia,
  multimediaMediaPlayer, multimediaSoundRecorder, multimediaVolumeControl, systemTools, systemToolsScanDisk,
  accessoriesCalculator, accessoriesNotepad, accessoriesOnlineRegistration, accessoriesPaint,
  accessoriesWordPad, gamesSelected, gamesFreeCellSelected, gamesHeartsSelected, gamesMinesweeperSelected,
  gamesSolitaireSelected, internetToolsSelected, internetToolsInternetExplorerSelected,
  internetToolsInternetSetupWizardSelected, accessoriesMultimediaSelected, multimediaMediaPlayerSelected,
  multimediaSoundRecorderSelected, multimediaVolumeControlSelected, systemToolsSelected,
  systemToolsScanDiskSelected, accessoriesCalculatorSelected, accessoriesNotepadSelected,
  accessoriesOnlineRegistrationSelected, accessoriesPaintSelected, accessoriesWordPadSelected, gamesDisplayed,
  internetToolsDisplayed, accessoriesMultimediaDisplayed, systemToolsDisplayed, internetToolsCovered,
  accessoriesMultimediaCovered, systemToolsCovered, accessoriesCalculatorCovered,
  /// Free Cell JLabels
  freeCellLeftRow, freeCellRightRow, freeCellPokerFaceLeft, freeCellPokerFaceRight, freeCellStatisticsData,
  /// StartUp JLabels
  startUpEmpty, startUpEmptySelected,
  // Others
  welcomeSeparator, annotateText, scanDiskLabel, scanDiskProgressBar, wordPadWarning, MSDOSPromptCommandLine,
  MSDOSPromptNormalLabel, MSDOSPromptMaximizedLabel, aboutNotepad, findAllFilesBrowseForFolderText, runIcon,
  runText, shutDownWindowsIcon, shutDownWindowsText, shutDownScreen, shutDownDesktop, safeTurnOff, taskbar,
  taskbarOpen, volume, volumeControlStatusText, date, time, timeHorizontalBorder, timeVerticalBorder,
  newFolderCreated, titleBarLabel,
  // Various Screens
  BSOD_Screen, aProblemHasBeenDetectedScreen, safeModeScreen, commandPromptOnlyEnteredScreen,
  safeModeShutDownDesktop, safeModeCommandPromptOnlyEnteredLabel, previousVersionOfMSDOSEntered,
  rebootRequest,
  // Control Panel JLabels
  addNewHardwareWizardSeparator, controlPanelFontsStatusText;
  JLabel[] didYouKnow, displayPropertiesBackgroundMonitor, displayPropertiesSettingsMonitor, displayPropertiesText,
    S3RefreshResolutionsLabel, displayPropertiesColorPaletteBar, taskbarPropertiesImage,
    taskbarPropertiesAdvancedText, dateTimePropertiesImage, dateTimePropertiesText, dateTimePropertiesWorldMap,
    volumeControlText, volumeLeftIcon, volumeRightIcon, heartsWelcomeText, heartsOptionsText,
    minesweeperCounter, minesweeperFace, minesweeperMine, mediaPlayerLabel, soundRecorderLabel, scanDiskText, findAllFilesText,
    shutDownWindowsHelpText, enterAChoiceLabel, F8EnterAChoiceLabel, safeModeLabel, F8StartupMenuXShiftF5Label,
    confirmationStepXEnterLabel, previousVersionOfMSDOSEnteredLabel, helpText, findSetupWizardLabel,
    addNewHardwareWizardText, addNewHardwareWizardImage, addRemoveProgramsPropertiesLabel,
    addRemoveProgramsPropertiesDialogLabel, controlPanelInternetPropertiesLabel, joystickPropertiesLabel,
    customJoystickLabel, keyboardPropertiesLabel, keyboardPropertiesDialogLabel, modemsInstallNewModemLabel,
    modemsPropertiesLabel, mousePropertiesLabel, mousePropertiesDialogLabel, multimediaPropertiesLabel,
    multimediaPropertiesDialogLabel, controlPanelNetworkLabel, controlPanelNetworkDialogLabel, addPrinter,
    addPrinterWizardLabel, regionalSettingsPropertiesLabel, soundsPropertiesLabel,
    controlPanelSystemPropertiesLabel;
  JList < Object > modemManufacturersList, modemModelsList, modemPortsList, patternsList, wallpapersList, scanDiskList,
    helpIndexList, hardwareTypesList, mousePropertiesDialogList, multimediaPropertiesList,
    controlPanelNetworkList, controlPanelNetworkDialogList, soundsPropertiesEventsList;
  JList < Object > [] addRemoveProgramsPropertiesList, keyboardPropertiesList, modemsInstallNewModemList,
    addPrinterWizardList, controlPanelSystemPropertiesList;
  JMenu[] taskbarPropertiesAdvancedMenu, shutDownWindowsHelpOptionsMenu, menu, myComputerMenu,
    myComputerOpenPopupMenu, removableDiskA_Menu, playDosGameC_Menu, programFilesMenu, windowsMenu,
    controlPanelMenu, controlPanelOpenPopupMenu, addNewHardwareMenu, addRemoveProgramsMenu, dateTimeMenu,
    displayMenu, fontsMenu, internetMenu, joystickMenu, keyboardMenu, modemsMenu, mouseMenu, multimediaMenu,
    networkMenu, passwordsMenu, controlPanelPrintersMenu, printersOpenPopupMenu, addPrinterWizardMenu,
    regionalSettingsMenu, soundsMenu, systemMenu, printersMenu, recycleBinMenu, documentsReadmeMenu,
    findAllFilesMenu, volumeControlMenu, freeCellMenu, heartsMenu, minesweeperMenu, solitaireMenu,
    internetExplorerMenu, mediaPlayerMenu, soundRecorderMenu, calculatorMenu, paintMenu, controlPanelFontsMenu;
  JMenuBar taskbarPropertiesAdvancedMenuBar, myComputerMenuBar, playDosGameC_MenuBar, programFilesMenuBar,
  windowsMenuBar, controlPanelMenuBar, printersMenuBar, recycleBinMenuBar, volumeControlMenuBar,
  freeCellMenuBar, heartsMenuBar, minesweeperMenuBar, solitaireMenuBar, internetExplorerMenuBar,
  mediaPlayerMenuBar, soundRecorderMenuBar, calculatorMenuBar, paintMenuBar, documentsReadmeMenuBar,
  findAllFilesMenuBar, controlPanelFontsMenuBar;
  JMenuItem[] taskbarPropertiesAdvancedMenuItem, menuItem, myComputerMenuItem, myComputerOpenPopupMenuItem,
    removableDiskA_PopupMenuItem, playDosGameC_MenuItem, playDosGameC_PopupMenuItem, programFilesMenuItem,
    windowsMenuItem, commandMenuItem, controlPanelMenuItem, controlPanelPopupMenuItem,
    controlPanelOpenPopupMenuItem, addNewHardwarePopupMenuItem, addRemoveProgramsPopupMenuItem,
    dateTimePopupMenuItem, displayPopupMenuItem, controlPanelFontsPopupMenuItem, internetPopupMenuItem,
    joystickPopupMenuItem, keyboardPopupMenuItem, modemsPopupMenuItem, mousePopupMenuItem,
    multimediaPopupMenuItem, networkPopupMenuItem, passwordsPopupMenuItem, controlPanelPrintersPopupMenuItem,
    regionalSettingsPopupMenuItem, soundsPopupMenuItem, systemPopupMenuItem, printersMenuItem,
    printersPopupMenuItem, printersOpenPopupMenuItem, addPrinterPopupMenuItem, recycleBinMenuItem,
    freeCellMenuItem, heartsMenuItem, minesweeperMenuItem, solitaireMenuItem, internetExplorerMenuItem,
    mediaPlayerMenuItem, soundRecorderMenuItem, volumeControlMenuItem, calculatorMenuItem, paintMenuItem,
    documentsReadmeMenuItem, findAllFilesMenuItem, shutDownWindowsHelpOptionsMenuItem,
    controlPanelFontsMenuItem;
  JPanel volumeControlPanel, volumeControlStatusBar, myComputerPanel, playDosGameC_Panel, programFilesPanel,
  controlPanelPanel, printersPanel, myComputerStatusBar, playDosGameC_StatusBar, programFilesStatusBar,
  windowsStatusBar, controlPanelStatusBar, printersStatusBar, recycleBinStatusBar, theInternetPanel,
  findAllFilesBrowseForFolderPanel, titleBarPanel, freeCellPanel, heartsPanel, minesweeperPanel,
  solitairePanel, internetExplorerMessagePanel, internetExplorerPageUp, internetExplorerPageDown,
  internetExplorerToolbar, internetExplorerStatusBar, mediaPlayerPanel, soundRecorderPanel, calculatorStandardPanel, calculatorScientificPanel,
  paintPanel, paintCanvasPanel, paintStatusBar, MSDOSPromptPanel,
  MSDOSPromptToolbar,
  // Display Properties Panels
  displayPropertiesPanel, backgroundPanel, screenSaverPanel, appearancePanel, S3_refreshPanel, settingsPanel,
  // Taskbar Properties Panels
  taskbarPropertiesPanel, taskbarOptionsPanel, startMenuProgramsPanel,
  taskbarPropertiesRemoveShortcutsFoldersPanel,
  // System Properties Panels
  systemPropertiesPanel, systemGeneralPanel, deviceManagerPanel, hardwareProfilesPanel, performancePanel,
  // Inbox Properties Panels
  inboxPropertiesPanel, inboxGeneralPanel,
  // Recycle Bin Properties Panels
  recycleBinPropertiesPanel, globalPanel, playDosGameC_TabPanel,
  // Internet Properties Panel
  internetPropertiesPanel, autoDialPanel, internetAdvancedPanel,
  // Set Up The Microsoft Network Properties
  MSN_PropertiesPanel, MSN_GeneralPanel, MSN_ShortcutPanel,
  // Help Panels
  helpTopicsPanel, helpContents, helpIndex, helpFind,
  // Control Panel Panels
  controlPanelFontsPanel, controlPanelFontsStatusBar, printersOpenPanel,
  // Special Panels
  safeModeShutDownPanel;
  JPanel[] paintPalettePanel, paintToolkitPanel, taskbarPropertiesAdvancedPanel, dateTimePropertiesPanel, findAllFilesPanel, shutDownWindowsHelpPanel,
    addRemoveProgramsPropertiesPanel, controlPanelInternetPropertiesPanel, joystickPropertiesPanel,
    keyboardPropertiesPanel, mousePropertiesPanel, multimediaPropertiesPanel, controlPanelNetworkPanel,
    passwordsPropertiesPanel, regionalSettingsPropertiesPanel, soundsPropertiesPanel,
    controlPanelSystemPropertiesPanel;
  JPopupMenu
  // Shut Down Windows Popup Menu
  shutDownWindowsHelpOptionsPopup,
  // Desktop Popup Menus
  desktopPopup, startMenuPopup, taskbarPopup, volumePopup, timePopup,
  // Desktop Objects Popup Menus
  myComputerPopup, inboxPopup, recycleBinPopup, theInternetPopup, MSN_Popup,
  // My Computer Objects Popup Menus
  myComputerOpenPopup, removableDiskA_Popup, playDosGameC_Popup, programFilesPopup, windowsPopup,
  commandPopup, controlPanelPopup, printersPopup,
  // Control Panel Popup Menus
  controlPanelOpenPopup, addNewHardwarePopup, addRemoveProgramsPopup, dateTimePopup, displayPopup, fontsPopup,
  internetPopup, joystickPopup, keyboardPopup, modemsPopup, mousePopup, multimediaPopup, networkPopup,
  passwordsPopup, controlPanelPrintersPopup, printersOpenPopup, addPrinterPopup, regionalSettingsPopup,
  soundsPopup, systemPopup;
  JRadioButton toneDialing, pulseDialing, howToConnect1, howToConnect2, internetMail1, internetMail2, MSN_Yes, MSN_No;
  JRadioButton[] displayPropertiesRadioButton, heartsWelcomeRadioButton, heartsOptionsRadioButton,
    scanDiskRadioButton, calculatorRadioButton, findAllFilesRadioButton, findSetupWizardRadioButton,
    shutDownWindowsRadioButton, addNewHardwareWizardRadioButton, customJoystickRadioButton,
    keyboardPropertiesRadioButton, keyboardPropertiesDialogRadioButton, mousePropertiesRadioButton,
    mousePropertiesDialogRadioButton, multimediaPropertiesRadioButton, passwordsPropertiesRadioButton,
    addPrinterWizardRadioButton, controlPanelSystemPropertiesRadioButton,
    controlPanelSystemPropertiesDialogRadioButton;
  JScrollPane taskbarPropertiesRemoveShortcutsFoldersScrollPane, recycleBinScrollPane, internetExplorerScrollPane,
  paintScrollPane, documentsReadmeScrollPane, controlPanelScrollPane, modemManufacturersScrollPane,
  modemModelsScrollPane, modemPortsScrollPane, patternsScrollPane, wallpapersScrollPane,
  shutDownWindowsHelpScrollPane, annotateScrollPane, hardwareTypesScrollPane,
  controlPanelInternetPropertiesScrollPane, mousePropertiesScrollPane, soundsPropertiesScrollPane;
  JScrollPane[] helpScrollPane, addRemoveProgramsPropertiesScrollPane, modemsInstallNewModemsScrollPane,
    addPrinterWizardScrollPane, controlPanelSystemPropertiesScrollPane;
  JSeparator calculatorSeparator;
  JSeparator[] separator, taskbarPropertiesAdvancedSeparator, myComputerSeparator, myComputerOpenPopupSeparator,
    playDosGameC_Separator, programFilesSeparator, controlPanelSeparator, controlPanelOpenPopupSeparator,
    controlPanelObjectPopupSeparator, printersSeparator, recycleBinSeparator, freeCellSeparator,
    heartsSeparator, minesweeperSeparator, solitaireSeparator, internetExplorerSeparator, mediaPlayerSeparator,
    soundRecorderSeparator, paintSeparator, documentsReadmeSeparator, findAllFilesSeparator,
    controlPanelFontsSeparator, printersOpenPopupSeparator, addPrinterPopupSeparator;
  JSlider displayPropertiesDesktopArea;
  JSlider[] volumeSlider, keyboardPropertiesSlider, mousePropertiesSlider, multimediaPropertiesSlider;
  JSpinner dateTimePropertiesYear, dateTimePropertiesTime;
  JSpinner[] displayPropertiesSpinner, findAllFilesSpinner;
  JSplitPane taskbarPropertiesAdvancedSplitPane, exploringMyComputerSplitPane, exploringRecycleBinSplitPane,
  exploringStartMenuSplitPane, windowsExplorerSplitPane, helpSplitPane;
  JTabbedPane displayPropertiesTabbedPane, taskbarPropertiesTabbedPane, audioPropertiesTabbedPane,
  dateTimePropertiesTabbedPane, findAllFilesTabbedPane, helpTabbedPane, systemPropertiesTabbedPane,
  inboxPropertiesTabbedPane, recycleBinPropertiesTabbedPane, internetPropertiesTabbedPane,
  MSN_PropertiesTabbedPane, addRemoveProgramsPropertiesTabbedPane, controlPanelInternetPropertiesTabbedPane,
  joystickPropertiesTabbedPane, keyboardPropertiesTabbedPane, mousePropertiesTabbedPane,
  multimediaPropertiesTabbedPane, controlPanelNetworkTabbedPane, passwordsPropertiesTabbedPane,
  regionalSettingsPropertiesTabbedPane, soundsPropertiesTabbedPane, controlPanelSystemPropertiesTabbedPane;
  JTextArea documentsReadmeTextArea, annotateTextArea, controlPanelInternetPropertiesTextArea;
  JTextArea[] MSDOSPromptTextArea;
  JTextComponent runTextComponent;
  JTextField taskbarPropertiesCreateShortcutTextField, locationInformationAreaCodeTextField,
  locationInformationAccessNumberTextField, heartsWelcomeTextField, helpIndexTextField,
  addRemoveProgramsPropertiesTextField, controlPanelInternetPropertiesTextField, mousePropertiesTextField,
  mousePropertiesSaveSchemeTextField, multimediaPropertiesTextField, addPrinterWizardTextField;
  JTextField[] heartsOptionsTextField, findAllFilesTextField, keyboardPropertiesTextField,
    regionalSettingsPropertiesTextField;
  JTextPane shutDownWindowsHelpTextPane;
  JToggleButton[] paintToolkitButton;
  JTree taskbarPropertiesRemoveShortcutsFoldersTree, helpTopicsTree, multimediaPropertiesTree;
  JTree[] taskbarPropertiesAdvancedTree, exploringMyComputerTree, exploringRecycleBinTree, exploringStartMenuTree,
    windowsExplorerTree, findAllFilesBrowseForFolderTree, controlPanelSystemPropertiesTree;
  KeyStroke AltF4, backspace, ctrlA, ctrlC, ctrlE, ctrlF, ctrlG, ctrlI, ctrlL, ctrlN, ctrlO, ctrlP, ctrlR, ctrlS,
  ctrlT, ctrlV, ctrlW, ctrlX, ctrlZ, ctrlPgUp, ctrlPgDn, ctrlShiftN, del, F2, F3, F4, F5, F7, F8, F9, F10;
  Locale locale;
  MouseEvent pME;
  NumberEditor dateTimePropertiesYearEditor;
  Object[] OK = {
    "OK"
  };
  Point paintPoint;
  Point[] myComputerPoint;
  Robot minesweeperRobot, normalRobot, runRobot;
  ScheduledExecutorService SES1, SES2, SES3;
  SimpleDateFormat[] dateTimePropertiesFormat, regionalSettingsPropertiesFOrmat;
  SpinnerModel[] displayPropertiesSpinnerModel, dateTimePropertiesSpinnerModel, findAllFilesSpinnerModel;
  String formattedDateToday, formattedTimeNow, currentMonth, currentYear, currentDayOfDate, currentDayOfWeek,
  formattedTimeSample, formattedShortDateSample, formattedLongDateSample;
  String[] appearanceScheme, appearanceItem, appearanceFont, appearanceSize, configuration640x480,
    configuration800x600, configuration1024x768, configuration1280x1024, displayPropertiesColorPalette, month,
    timeZone, modemManufacturer, modemModel, modemPort, country, pattern, wallpaper, scanDiskDrive,
    findAllFilesOfType, helpIndexEntry, hardwareType, addRemoveSoftware, windowsSetupComponent,
    accessibilityOptionsComponent, currentJoystick, joystickSelection, addLanguage, keyboardLayout,
    languageLayout, keyboardModel, MIDIoutput, networkComponent, printerManufacturer, printerModel,
    regionalSettingsString, soundsPropertiesEvent, hardwareProfile, performanceItem;
  Timer[] installNewModemPortSelectTimer, shutDownWindowsTimer, normalTimer, loggedBootlogtxtTimer, safeModeTimer,
    stepByStepConfirmationTimer, previousVersionOfMSDOSTimer, changeRegionalSettingsTimer; // Swing Timer Array
  TreePath taskbarPropertiesRemoveShortcutsFoldersPath, exploringMyComputerPath, exploringRecycleBinPath,
  exploringStartMenuPath, windowsExplorerPath;
  TreePath[] helpPath;
  URL bootingScreenURL, startupLoadingScreenURL, startupURL, shutdownURL, flyingWindowsURL, minesweeperChangeFaceURL,
  MSDOSPromptNormalURL, MSDOSPromptMaximizedURL, BSOD_Screen_URL, commandPromptOnlyEnteredURL,
  safeModeCommandPromptOnlyEnteredURL, keyboardBlinkingCursorURL, mousePropertiesTestAreaURL,
  rebootRequestURL;
  URL[] BSOD_Sound_URL, enterAChoiceURL, F8EnterAChoiceURL, F8StartupMenuXShiftF5URL, confirmationStepXEnterURL,
    previousVersionOfMSDOSEnteredURL;
  ZonedDateTime dateToday, timeNow, timeSample, shortDateSample, longDateSample;
  ZoneId zoneId;

  // Constructor
  Windows95Desktop() throws IllegalArgumentException {
    System.out.println(MouseInfo.getPointerInfo().getLocation());
    systemConfigurationMethod();
    welcomeObjectsMethod();
    aboutWindows95Method();
    myComputerObjectsMethod();
    inboxObjectsMethod();
    recycleBinObjectsMethod();
    theInternetObjectsMethod();
    MSN_objectsMethod();
    startMenuObjectsMethod();
    freeCellMethod();
    heartsMethod();
    minesweeperMethod();
    solitaireMethod();
    internetExplorerMethod();
    mediaPlayerMethod();
    soundRecorderMethod();
    scanDiskMethod();
    calculatorMethod();
    paintMethod();
    wordPadMethod();
    MSDOSPromptMethod();
    windowsExplorerMethod();
    documentsReadmeMethod();
    findAllFilesMethod();
    startMenuHelpMethod();
    startMenuRunMethod();
    startMenuObjectsSelectAndDeselectMethod();
    shutDownWindowsMethod();
    taskbarMethod();
    desktopAddComponentsMethod();
    desktopPopupMethod();
    desktopPopupMenuFunctionalityMethod();
    displayPropertiesMethod();
    startMenuPopupMethod();
    taskManagerMethod();
    taskbarPropertiesMethod();
    volumeControlObjectsMethod();
    audioPropertiesMethod();
    copyingFilesMethod();
    bootingMethodThread.start();
    //Quick start debugging method
    debuggingMethod();
    musicMethod();
    //douweiMethod();
  }

  Thread bootingMethodThread = new Thread(new Runnable() {
    @Override
    public void run() {
      {
        mainFrame.add(bootingScreen);
        setTitleBarColorMethod(); // Setting the Color of the Title Bar to Windows 95 Style
        mainFrame.getContentPane().setCursor(blankCursor);
        mainFrame.setBackground(Color.BLACK);
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        mainFrame.setForeground(gray);
        mainFrame.setIconImage(Windows95Icon.getImage());
        mainFrame.setResizable(false);
        mainFrame.setSize(1500, 1500);
        mainFrame.setTitle("Windows 95");
        mainFrame.setVisible(true);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.addKeyListener(new KeyAdapter() {
          @SuppressWarnings("deprecation")
          public void keyPressed(KeyEvent e) {
            // Pressing F8 when booting starts
            if (e.getKeyCode() == 119) {
              F8EnterAChoiceMethod();
              bootingMethodThread.stop(); // Thread.interrupt(); does not work
            }
          }
        });
        try {
          Thread.sleep(1500);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.remove(bootingScreen);
        mainFrame.add(startupLoadingScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
        try {
          Thread.sleep(3000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.remove(startupLoadingScreen);
        mainFrame.add(blackScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.remove(blackScreen);
        mainFrame.add(tealScreen, BorderLayout.CENTER);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getDefaultCursor());
        try {
          Thread.sleep(50);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(workingInBackgroundCursorTeal);
        try {
          Thread.sleep(50);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(Cursor.getDefaultCursor());
        try {
          Thread.sleep(50);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(workingInBackgroundCursorTeal);
        try {
          Thread.sleep(50);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(Cursor.getDefaultCursor());
        try {
          Thread.sleep(50);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.remove(tealScreen);
        mainFrame.add(desktop, BorderLayout.CENTER);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.setResizable(true);
        startupClip.start();
        mainFrame.getContentPane().setCursor(workingInBackgroundCursorTeal);
        try {
          Thread.sleep(500);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(Cursor.getDefaultCursor());
        welcome.setVisible(true);
      }

    }
  });
  @SuppressWarnings("deprecation")
  public void debuggingMethod() {
    mainFrame.addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        if (desktop.getParent() == null && e.getKeyChar() == 'd' || e.getKeyChar() == 'D') {
          bootingMethodThread.stop();
          mainFrame.remove(bootingScreen);
          mainFrame.remove(startupLoadingScreen);
          mainFrame.remove(tealScreen);
          mainFrame.add(desktop);
          mainFrame.revalidate();
          mainFrame.repaint();
          mainFrame.getContentPane().setCursor(Cursor.getDefaultCursor());
          mainFrame.setResizable(true);
        }
      }
    });
  }
  @SuppressWarnings({ "deprecation", "serial" })
  public void systemConfigurationMethod() {
    // Startup Sound File
    startupURL = getClass().getResource("Startup.wav");
    startupAudioStream = null;
    try {
      startupAudioStream = AudioSystem.getAudioInputStream(startupURL);
    } catch (UnsupportedAudioFileException | IOException e) {
      e.printStackTrace();
    }

    try {
      startupClip = AudioSystem.getClip();
    } catch (LineUnavailableException e) {
      e.printStackTrace();
    }

    try {
      startupClip.open(startupAudioStream);
    } catch (LineUnavailableException | IOException e) {
      e.printStackTrace();
    }
    // Shutdown Sound File
    shutdownURL = getClass().getResource("Shutdown.wav");
    shutdownAudioStream = null;
    try {
      shutdownAudioStream = AudioSystem.getAudioInputStream(shutdownURL);
    } catch (UnsupportedAudioFileException | IOException e) {
      e.printStackTrace();
    }

    try {
      shutdownClip = AudioSystem.getClip();
    } catch (LineUnavailableException e) {
      e.printStackTrace();
    }

    try {
      shutdownClip.open(shutdownAudioStream);
    } catch (LineUnavailableException | IOException e) {
      e.printStackTrace();
    }
    // Windows95 Icon
    Windows95Icon = new ImageIcon(getClass().getClassLoader().getResource("Windows95.jpg"));
    // Folder Icon
    folderIcon = new ImageIcon(getClass().getClassLoader().getResource("FolderIcon.png"));
    // Defining Colors
    tealBlue = new Color(0, 130, 130);
    white = new Color(255, 255, 255);
    gray = new Color(195, 195, 195);
    grayAboutWindows95 = new Color(192, 192, 192);
    win95Blue = new Color(0, 0, 130);
    nodeBorderYellow = new Color(255, 255, 0);
    // Defining Fonts
    MSSansSerif8 = new Font("MS Sans Serif", Font.PLAIN, 8);
    MSSansSerif11 = new Font("MS Sans Serif", Font.PLAIN, 11);
    MSSansSerif12 = new Font("MS Sans Serif", Font.PLAIN, 12);
    MSSansSerif14 = new Font("MS Sans Serif", Font.PLAIN, 14);
    MSSansSerif15 = new Font("MS Sans Serif", Font.PLAIN, 15);
    MSSansSerif16 = new Font("MS Sans Serif", Font.PLAIN, 16);
    MSSansSerif16Bold = new Font("MS Sans Serif", Font.BOLD, 16);
    MSSansSerif18 = new Font("MS Sans Serif", Font.PLAIN, 18);
    MSSansSerif20 = new Font("MS Sans Serif", Font.PLAIN, 20);
    courierNew20 = new Font("Courier New", Font.BOLD, 20);
    MSJhenghei20 = new Font("Microsoft Jhenghei", Font.BOLD, 20);
    // UIManager for Setting Colors and Fonts
    /// UIManager.getLookAndFeelDefaults().put("TabbedPane:TabbedPaneTab.contentMargins",
    // new Insets(50,100,0,0));
    UIManager.put("Button.background", gray);
    UIManager.put("Button.Font", MSSansSerif14);
    UIManager.put("CheckBox.background", gray);
    UIManager.put("ComboBox.background", white);
    UIManager.put("ComboBox.disabledForeground", gray);
    UIManager.put("ComboBox.selectionBackground", win95Blue);
    UIManager.put("ComboBox.selectionForeground", white);
    UIManager.put("List.background", white);
    UIManager.put("List.selectionForeground", white);
    UIManager.put("List.selectionBackground", win95Blue);
    UIManager.put("OptionPane.background", gray);
    UIManager.put("OptionPane.errorDialog.titlePane.background", win95Blue);
    UIManager.put("OptionPane.errorDialog.titlePane.foreground", win95Blue);
    UIManager.put("OptionPane.questionDialog.titlePane.background", win95Blue);
    UIManager.put("OptionPane.questionDialog.titlePane.foreground", win95Blue);
    UIManager.put("OptionPane.warningDialog.titlePane.background", win95Blue);
    UIManager.put("OptionPane.warningDialog.titlePane.foreground", win95Blue);
    UIManager.put("OptionPane.buttonFont", MSSansSerif14);
    UIManager.put("OptionPane.messageFont", MSSansSerif14);
    UIManager.put("Panel.background", gray);
    UIManager.put("RadioButton.background", gray);
    UIManager.put("ScrollBar.background", white);
    UIManager.put("ScrollBar.thumb", gray);
    UIManager.put("ToolTip.background", white);
    UIManager.put("TextField.background", white);
    UIManager.put("RadioButton.Font", MSSansSerif14);
    UIManager.put("Slider.background", gray);
    UIManager.put("Slider.tickColor", gray);
    UIManager.put("TabbedPane.background", grayAboutWindows95);
    UIManager.put("TabbedPane.selected", grayAboutWindows95);
    // Setting Hotkeys
    AltF4 = KeyStroke.getKeyStroke(KeyEvent.VK_F4, KeyEvent.ALT_DOWN_MASK);
    backspace = KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, 0);
    ctrlA = KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_DOWN_MASK);
    ctrlC = KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK);
    ctrlE = KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
    ctrlF = KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);
    ctrlG = KeyStroke.getKeyStroke(KeyEvent.VK_G, KeyEvent.CTRL_DOWN_MASK);
    ctrlI = KeyStroke.getKeyStroke(KeyEvent.VK_I, KeyEvent.CTRL_DOWN_MASK);
    ctrlL = KeyStroke.getKeyStroke(KeyEvent.VK_L, KeyEvent.CTRL_DOWN_MASK);
    ctrlN = KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK);
    ctrlO = KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK);
    ctrlP = KeyStroke.getKeyStroke(KeyEvent.VK_P, KeyEvent.CTRL_DOWN_MASK);
    ctrlR = KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
    ctrlS = KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK);
    ctrlT = KeyStroke.getKeyStroke(KeyEvent.VK_T, KeyEvent.CTRL_DOWN_MASK);
    ctrlV = KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_DOWN_MASK);
    ctrlW = KeyStroke.getKeyStroke(KeyEvent.VK_W, KeyEvent.CTRL_DOWN_MASK);
    ctrlX = KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_DOWN_MASK);
    ctrlZ = KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_DOWN_MASK);
    ctrlPgUp = KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, KeyEvent.CTRL_DOWN_MASK);
    ctrlPgDn = KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, KeyEvent.CTRL_DOWN_MASK);
    ctrlShiftN = KeyStroke.getKeyStroke(KeyEvent.VK_N, java.awt.Event.CTRL_MASK | java.awt.Event.SHIFT_MASK);
    del = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0);
    F2 = KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0);
    F3 = KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0);
    F4 = KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0);
    F5 = KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0);
    F7 = KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0);
    F8 = KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0);
    F9 = KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0);
    F10 = KeyStroke.getKeyStroke(KeyEvent.VK_F10, 0);
    // Setting up JOptionPane Icons
    confirmDelete = new ImageIcon(getClass().getClassLoader().getResource("ConfirmDelete.png"));
    confirmFileDelete = new ImageIcon(getClass().getClassLoader().getResource("ConfirmFileDelete.png"));
    crossSign = new ImageIcon(getClass().getClassLoader().getResource("CrossSign.png"));
    exclamationMark = new ImageIcon(getClass().getClassLoader().getResource("ExclamationMark.png"));
    onlineRegistrationIcon = new ImageIcon(getClass().getClassLoader().getResource("OnlineRegistrationIcon.png"));
    questionMark = new ImageIcon(getClass().getClassLoader().getResource("QuestionMark.png"));
    informationSign = new ImageIcon(getClass().getClassLoader().getResource("InformationSign.png"));
    // Instantiating Booting Screen
    bootingScreenURL = this.getClass().getClassLoader().getResource("BootingScreen.gif");
    bootingScreen = new JLabel(new ImageIcon(bootingScreenURL));
    bootingScreen.setBounds(0, 0, 1290, 690);
    // Instantiating Startup Loading Screen
    startupLoadingScreenURL = this.getClass().getClassLoader().getResource("StartupLoadingScreen.gif");
    startupLoadingScreen = new JLabel(new ImageIcon(startupLoadingScreenURL));
    // Instantiating Black Screen
    blackScreen = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("BlackScreen.png")));
    // Instantiating Teal Screen
    tealScreen = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("TealScreen.png")));
    // Instantiating Cursor Images and Cursors
    blank = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
    blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(blank, new Point(0, 0), "Blank Cursor");
    //Instantiating Points for Desktop Objects
    myComputerPoint = new Point[3];
    myComputerPoint[0]=new Point(0,0);
    // Instantiating Desktop
    desktop = new JDesktopPane() {
    	public void paintComponent(Graphics g) {
    		super.paintComponent(g);
    		myComputerSelectedImage.paintIcon(this, g, (int) myComputerPoint[0].getX(), (int) myComputerPoint[0].getY());
    	}
    };
    desktop.setBackground(tealBlue);
    desktop.setLayout(null);
    // Instantiating Main Frame
    mainFrame = new JFrame();
    // Separators
    separator = new JSeparator[100];
    for (int i = 0; i < 100; i++) {
      separator[i] = new JSeparator();
      separator[i].setBackground(white);
      separator[i].setForeground(gray);
    }
  }
  public void welcomeObjectsMethod() {
    // Welcome
    welcome = new JDialog();
    welcome.setAlwaysOnTop(true);
    welcome.setBounds(200, 200, 690, 390);
    welcome.setLayout(null);
    welcome.setTitle("Welcome");
    /// Welcome Objects
    welcomeButton = new JButton[6];
    welcomeButton[0] = new JButton("Windows Tour");
    welcomeButton[1] = new JButton("What's New");
    welcomeButton[2] = new JButton("Online Registration");
    welcomeButton[3] = new JButton("Product Catalog");
    welcomeButton[4] = new JButton("Next Tip");
    welcomeButton[5] = new JButton("Close");
    welcomeButton[0].setBounds(500, 75, 160, 30);
    welcomeButton[1].setBounds(500, 115, 160, 30);
    welcomeButton[2].setBounds(500, 155, 160, 30);
    welcomeButton[3].setBounds(500, 195, 160, 30);
    welcomeButton[4].setBounds(500, 235, 160, 30);
    welcomeButton[5].setBounds(500, 305, 160, 30);
    for (int i = 0; i < 6; i++) {
      welcome.add(welcomeButton[i]);
      welcomeButton[i].addActionListener(this);
      welcomeButton[i].setFont(MSSansSerif15);
    }
    welcomeButton[2].setFont(MSSansSerif12);
    welcomeSeparator = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("WelcomeSeparator.png")));
    welcomeSeparator.setBounds(495, 277, 164, 10);
    welcome.add(welcomeSeparator);
    welcomeCheckBox = new JCheckBox("Show this Welcome Screen next time you start Windows");
    welcomeCheckBox.addActionListener(this);
    welcomeCheckBox.setBounds(10, 310, 490, 20);
    welcomeCheckBox.setFont(MSSansSerif16);
    welcomeCheckBox.setSelected(true);
    welcome.add(welcomeCheckBox);
    welcomeToWindows95 = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("WelcomeToWindows95.png")));
    welcomeToWindows95.setBounds(20, 20, 447, 43);
    welcome.add(welcomeToWindows95);
    didYouKnow = new JLabel[50];
    didYouKnow[0] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanSolvePrinterProblems.png")));
    didYouKnow[1] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanMoveTheTaskbar.png")));
    didYouKnow[2] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanMinimizeAllOpenWindowsAtOnce.png")));
    didYouKnow[3] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToSetYourComputersClock.png")));
    didYouKnow[4] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanMinimizeNeckStrain.png")));
    didYouKnow[5] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToChangeTheWindowsColorScheme.png")));
    didYouKnow[6] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanSolveMemoryProblems.png")));
    didYouKnow[7] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToSelectMoreThanOneFileOrFolder.png")));
    didYouKnow[8] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToChangeYourScreenSaver.png")));
    didYouKnow[9] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_DeletedFilesAndFoldersAreSaved.png")));
    didYouKnow[10] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUsePaintInTheAccessories.png")));
    didYouKnow[11] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanSwitchMouseButtons.png")));
    didYouKnow[12] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToOpenADocumentQuickly.png")));
    didYouKnow[13] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_WhenYouTypeYouShouldKeepYourWristsElevated.png")));
    didYouKnow[14] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanFindManyInterestingPrograms.png")));
    didYouKnow[15] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanStartAWindowsBasedProgram.png")));
    didYouKnow[16] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanCopyAndPasteTextBetween.png")));
    didYouKnow[17] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToSeeHowMuchDiskSpaceIsFree.png")));
    didYouKnow[18] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_EvenIfYouDontShutDownYourComputer.png")));
    didYouKnow[19] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_TheMousePointerIsEasierToSeeOnLaptoppng.png")));
    didYouKnow[20] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_WhenAFolderIsOpenYouCanPressBACKSPACE.png")));
    didYouKnow[21] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_WhenYouDisplayFilesInDetailsView.png")));
    didYouKnow[22] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToDrawASelectionBoxAroundAGroupOfFiles.png")));
    didYouKnow[23] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_TheUnderlinedLettersInMenusAreShortcuts.png")));
    didYouKnow[24] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseDefragmenter.png")));
    didYouKnow[25] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanPutShortcutsToYourPrinters.png")));
    didYouKnow[26] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanFindFunGamesToPlay.png")));
    didYouKnow[27] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToFreeUpDiskSpace.png")));
    didYouKnow[28] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanDragAFilesIconIntoADocument.png")));
    didYouKnow[29] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanSolveHardwareProblems.png")));
    didYouKnow[30] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanHaveProgramsStartWhen.png")));
    didYouKnow[31] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseBackup.png")));
    didYouKnow[32] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanSetWindowsExplorer.png")));
    didYouKnow[33] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseScanDisk.png")));
    didYouKnow[34] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_WhenYouPrintADocument.png")));
    didYouKnow[35] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToLearnWhatAnyToolbarButton.png")));
    didYouKnow[36] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanCustomizeWindows95.png")));
    didYouKnow[37] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_IfYouDontKnowHowToDoSomething.png")));
    didYouKnow[38] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_TheShutDownCommand.png")));
    didYouKnow[39] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToAddAProgramToYourStartMenu.png")));
    didYouKnow[40] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseYourRightMouseButtonToDrag.png")));
    didYouKnow[41] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseLongFilenames.png")));
    didYouKnow[42] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseYourRightMouseButtonToClick.png")));
    didYouKnow[43] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToPrintADocumentQuickly.png")));
    didYouKnow[44] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_ToChangeYourDesktopBackground.png")));
    didYouKnow[45] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanGetHelpOnEachItem.png")));
    didYouKnow[46] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DidYouKnow_YouCanUseWindowsExplorer.png")));
    for (int i = 0; i < 47; i++) {
      didYouKnow[i].setBounds(20, 70, 462, 215);
    }
    welcome.add(didYouKnow[0]);
  }
  public void aboutWindows95Method() {
    /// About Windows 95 Dialog and Contents
    aboutWindows95Dialog = new JDialog();
    aboutWindows95Dialog.setAlwaysOnTop(true);
    aboutWindows95Dialog.setBounds(100, 150, 530, 425);
    aboutWindows95Dialog.setTitle("About Windows");
    aboutWindows95OK = new JButton("OK");
    aboutWindows95OK.addActionListener(this);
    aboutWindows95OK.setBackground(grayAboutWindows95);
    aboutWindows95OK.setBounds(410, 340, 100, 33);
    aboutWindows95OK.setFont(MSSansSerif12);
    aboutWindows95 = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AboutWindows.png")));
    aboutWindows95.setBounds(0, 10, 500, 305);
    aboutWindows95Dialog.add(aboutWindows95);
    aboutWindows95Dialog.add(aboutWindows95OK);
    aboutWindows95Dialog.getContentPane().setBackground(gray);
    aboutWindows95Dialog.setLayout(null);
  }

  public void myComputerObjectsMethod() {
    // My Computer
    myComputer = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MyComputer.png")));
    myComputer.addMouseListener(this);
    myComputer.setBounds(2, 0, 102, 77);
    myComputer.setToolTipText("My Computer");
    /// My Computer Selected
    myComputerSelectedImage = new ImageIcon(getClass().getClassLoader().getResource("MyComputerSelected.png"));
    myComputerSelected = new JLabel(myComputerSelectedImage);
    MyComputerClickListener myComputerClickListener=new MyComputerClickListener();
    MyComputerDragListener myComputerDragListener=new MyComputerDragListener();
    myComputerSelected.addMouseListener(myComputerClickListener);
    myComputerSelected.addMouseMotionListener(myComputerDragListener);
    myComputerSelected.setBounds(2, 0, 102, 77);
    myComputerSelected.setToolTipText("My Computer");
    // Setting up "Open" in My Computer Popup Menu
    myComputerIcon = new ImageIcon(getClass().getClassLoader().getResource("MyComputerIcon.png"));
    myComputerOpen = new JFrame();
    myComputerOpen.getContentPane().setBackground(white);
    myComputerOpen.setAlwaysOnTop(true);
    myComputerOpen.setBounds(50, 0, 375, 330);
    myComputerOpen.setIconImage(myComputerIcon.getImage());
    myComputerOpen.setTitle("My Computer");
    /// My Computer Objects
    removableDiskA = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("RemovableDiskA.png")));
    playDosGameC = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("PlaydosgameC.png")));
    controlPanel = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ControlPanel.png")));
    printers = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Printers.png")));
    removableDiskA.setBounds(10, 20, 91, 78);
    playDosGameC.setBounds(120, 22, 104, 78);
    controlPanel.setBounds(240, 5, 103, 78);
    printers.setBounds(20, 120, 60, 74);
    /// My Computer Objects Selected
    removableDiskASelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("RemovableDiskASelected.png")));
    playDosGameCSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("PlaydosgameCSelected.png")));
    controlPanelSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ControlPanelSelected.png")));
    printersSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("PrintersSelected.png")));
    removableDiskASelected.setBounds(10, 20, 91, 78);
    playDosGameCSelected.setBounds(120, 22, 104, 78);
    controlPanelSelected.setBounds(240, 5, 103, 78);
    printersSelected.setBounds(20, 120, 60, 74);
    //// Playdosgame (C:) Objects
    programFiles = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ProgramFiles.png")));
    windows = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Windows.png")));
    command = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Command.png")));
    programFiles.setBounds(10, 10, 107, 82);
    windows.setBounds(125, 10, 82, 80);
    command.setBounds(10, 120, 86, 81);
    //// Playdosgame (C:) Objects Selected
    programFilesSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramFilesSelected.png")));
    windowsSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("WindowsSelected.png")));
    commandSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("CommandSelected.png")));
    programFilesSelected.setBounds(10, 10, 107, 82);
    windowsSelected.setBounds(125, 10, 82, 80);
    commandSelected.setBounds(10, 125, 86, 81);
    /// My Computer Menubar Menus
    myComputerMenu = new JMenu[5];
    myComputerMenu[0] = new JMenu("File");
    myComputerMenu[1] = new JMenu("Edit");
    myComputerMenu[2] = new JMenu("View");
    myComputerMenu[3] = new JMenu("Help");
    myComputerMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      myComputerMenu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == myComputerMenu[0]) {
            myComputerStatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == myComputerMenu[1]) {
            myComputerStatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == myComputerMenu[2]) {
            myComputerStatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == myComputerMenu[3]) {
            myComputerStatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {}
      });
      myComputerMenuBar.add(myComputerMenu[i]);
    }
    myComputerMenuItem = new JMenuItem[50];
    /// My Computer Menubar File Menu
    myComputerMenuItem[0] = new JMenuItem("Create Shortcut");
    myComputerMenuItem[1] = new JMenuItem("Delete");
    myComputerMenuItem[2] = new JMenuItem("Rename");
    myComputerMenuItem[3] = new JMenuItem("Properties");
    for (int i = 0; i < 4; i++) {
      myComputerMenu[0].add(myComputerMenuItem[i]);
      myComputerMenuItem[i].setEnabled(false);
    }
    myComputerSeparator = new JSeparator[7];
    for (int i = 0; i < 7; i++) {
      myComputerSeparator[i] = new JSeparator();
    }
    myComputerMenu[0].add(myComputerSeparator[0]);
    myComputerMenuItem[4] = new JMenuItem("Close");
    myComputerMenu[0].add(myComputerMenuItem[4]);
    /// My Computer Menubar Edit Menu
    myComputerMenuItem[5] = new JMenuItem("Undo");
    myComputerMenuItem[5].setAccelerator(ctrlZ);
    myComputerMenuItem[5].setEnabled(false);
    myComputerMenu[1].add(myComputerMenuItem[5]);
    myComputerMenu[1].add(myComputerSeparator[1]);
    myComputerMenuItem[6] = new JMenuItem("Cut");
    myComputerMenuItem[6].setAccelerator(ctrlX);
    myComputerMenuItem[7] = new JMenuItem("Copy");
    myComputerMenuItem[7].setAccelerator(ctrlC);
    myComputerMenuItem[8] = new JMenuItem("Paste");
    myComputerMenuItem[8].setAccelerator(ctrlV);
    myComputerMenuItem[9] = new JMenuItem("Paste Shortcut");
    for (int i = 6; i < 10; i++) {
      myComputerMenu[1].add(myComputerMenuItem[i]);
      myComputerMenuItem[i].setEnabled(false);
    }
    myComputerMenu[1].add(myComputerSeparator[2]);
    myComputerMenuItem[10] = new JMenuItem("Select All");
    myComputerMenuItem[10].setAccelerator(ctrlA);
    myComputerMenuItem[11] = new JMenuItem("Invert Selection");
    for (int i = 10; i < 12; i++) {
      myComputerMenu[1].add(myComputerMenuItem[i]);
    }
    /// My Computer Menubar View Menu
    myComputerCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    myComputerCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    myComputerCheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == myComputerCheckBoxMenuItem[0]) {
          myComputerStatusText.setText("Shows or hides the toolbar.");
        }
      }
    });
    myComputerCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    myComputerCheckBoxMenuItem[1].setSelected(true);
    myComputerCheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == myComputerCheckBoxMenuItem[1]) {
          myComputerStatusText.setText("Shows or hides the status bar.");
        }
      }
    });
    for (int i = 0; i < 2; i++) {
      myComputerCheckBoxMenuItem[i].addActionListener(this);
      myComputerCheckBoxMenuItem[i].setFont(MSSansSerif16);
      myComputerMenu[2].add(myComputerCheckBoxMenuItem[i]);
    }
    myComputerMenu[2].add(myComputerSeparator[3]);
    myComputerMenuItem[12] = new JMenuItem("Large Icons");
    myComputerMenuItem[13] = new JMenuItem("Small Icons");
    myComputerMenuItem[14] = new JMenuItem("List");
    myComputerMenuItem[15] = new JMenuItem("Details");
    for (int i = 12; i < 16; i++) {
      myComputerMenu[2].add(myComputerMenuItem[i]);
    }
    myComputerMenu[2].add(myComputerSeparator[4]);
    myComputerMenu[4] = new JMenu("Arrange Icons");
    myComputerMenuItem[16] = new JMenuItem("by Drive Letter");
    myComputerMenuItem[17] = new JMenuItem("by Type");
    myComputerMenuItem[18] = new JMenuItem("by Size");
    myComputerMenuItem[19] = new JMenuItem("by Free Space");
    myComputerMenuItem[20] = new JMenuItem("Auto Arrange");
    for (int i = 16; i < 20; i++) {
      myComputerMenu[4].add(myComputerMenuItem[i]);
    }
    myComputerMenu[4].add(myComputerSeparator[5]);
    myComputerMenu[4].add(myComputerMenuItem[20]);
    myComputerMenu[2].add(myComputerMenu[4]);
    myComputerMenuItem[21] = new JMenuItem("Line up Icons");
    myComputerMenu[2].add(myComputerMenuItem[20]);
    myComputerMenu[2].add(myComputerSeparator[6]);
    myComputerMenuItem[22] = new JMenuItem("Refresh");
    myComputerMenuItem[23] = new JMenuItem("Options...");
    for (int i = 22; i < 24; i++) {
      myComputerMenu[2].add(myComputerMenuItem[i]);
    }
    /// My Computer Menubar Help Menu
    myComputerMenuItem[24] = new JMenuItem("Help Topics");
    myComputerMenu[3].add(myComputerMenuItem[24]);
    myComputerMenu[3].add(myComputerSeparator[6]);
    myComputerMenuItem[25] = new JMenuItem("About Windows 95");
    myComputerMenu[3].add(myComputerMenuItem[25]);
    /// My Computer Status Bar and My Computer Status Text
    myComputerStatusBar = new JPanel();
    myComputerStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    myComputerOpen.add(myComputerStatusBar, BorderLayout.SOUTH);
    myComputerStatusBar.setBackground(gray);
    myComputerStatusBar.setPreferredSize(new Dimension(myComputerOpen.getWidth(), 24));
    myComputerStatusBar.setLayout(new BoxLayout(myComputerStatusBar, BoxLayout.X_AXIS));
    myComputerStatusText = new JLabel("4 object(s)");
    myComputerStatusText.setFont(MSSansSerif16);
    myComputerStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    myComputerStatusBar.add(myComputerStatusText);
    for (int i = 0; i < 5; i++) {
      myComputerMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 26; i++) {
      myComputerMenuItem[i].addActionListener(this);
      myComputerMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == myComputerMenuItem[0]) {
            myComputerStatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == myComputerMenuItem[1]) {
            myComputerStatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == myComputerMenuItem[2]) {
            myComputerStatusText.setText("Renames the selected item.");
          } else if (e.getSource() == myComputerMenuItem[3]) {
            myComputerStatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == myComputerMenuItem[4]) {
            myComputerStatusText.setText("Closes the window.");
          } else if (e.getSource() == myComputerMenuItem[5]) {
            myComputerStatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == myComputerMenuItem[6]) {
            myComputerStatusText.setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == myComputerMenuItem[7]) {
            myComputerStatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == myComputerMenuItem[8]) {
            myComputerStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == myComputerMenuItem[9]) {
            myComputerStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == myComputerMenuItem[10]) {
            myComputerStatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == myComputerMenuItem[11]) {
            myComputerStatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == myComputerMenuItem[12]) {
            myComputerStatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == myComputerMenuItem[13]) {
            myComputerStatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == myComputerMenuItem[14]) {
            myComputerStatusText.setText("Displays items in a list.");
          } else if (e.getSource() == myComputerMenuItem[15]) {
            myComputerStatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == myComputerMenuItem[16]) {
            myComputerStatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == myComputerMenuItem[17]) {
            myComputerStatusText.setText("Sorts items by type.");
          } else if (e.getSource() == myComputerMenuItem[18]) {
            myComputerStatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == myComputerMenuItem[19]) {
            myComputerStatusText.setText("Sorts items by available free space.");
          } else if (e.getSource() == myComputerMenuItem[20]) {
            myComputerStatusText.setText("Arranges the icons automatically.");
          } else if (e.getSource() == myComputerMenuItem[21]) {
            myComputerStatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == myComputerMenuItem[22]) {
            myComputerStatusText.setText("Refresh item information.");
          } else if (e.getSource() == myComputerMenuItem[23]) {
            myComputerStatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == myComputerMenuItem[24]) {
            myComputerStatusText.setText("Opens help.");
          } else if (e.getSource() == myComputerMenuItem[25]) {
            myComputerStatusText.setText("Displays program information, version number, and copyright.");
          }
        }
      });
      myComputerMenuItem[i].setFont(MSSansSerif16);
    }
    /// Adding MouseListener to My Computer Separators
    for (int i = 0; i < 7; i++) {
      myComputerSeparator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 7; i++) {
            if (e.getSource() == myComputerSeparator[i]) {
              myComputerStatusText.setText("");
            }
          }
        }
      });
    }
    /// My Computer Contents
    myComputerOpen.add(myComputerMenuBar, BorderLayout.NORTH);
    myComputerPanel = new JPanel();
    myComputerPanel.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        myComputerPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }

      public void mousePressed(MouseEvent e) {
        myComputerUnselectMethod();
        myComputerStatusText.setText("4 object(s)");
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          myComputerOpenPopup.show(e.getComponent(), e.getX(), e.getY());
          myComputerUnselectMethod();
          myComputerStatusText.setText("4 object(s)");
        }
      }
    });
    myComputerPanel.setBackground(white);
    myComputerPanel.setLayout(null);
    myComputerPanel.add(removableDiskA);
    myComputerPanel.add(playDosGameC);
    myComputerPanel.add(controlPanel);
    myComputerPanel.add(printers);
    myComputerOpen.add(myComputerPanel);
    // My Computer Open Popup Menu
    myComputerOpenPopup = new JPopupMenu();
    myComputerOpenPopupSeparator = new JSeparator[4];
    for (int i = 0; i < 4; i++) {
      myComputerOpenPopupSeparator[i] = new JSeparator();
    }
    myComputerOpenPopupMenu = new JMenu[2];
    myComputerOpenPopupMenu[0] = new JMenu("View");
    myComputerOpenPopupMenuItem = new JMenuItem[13];
    myComputerOpenPopupMenuItem[0] = new JMenuItem("Large Icons");
    myComputerOpenPopupMenuItem[1] = new JMenuItem("Small Icons");
    myComputerOpenPopupMenuItem[2] = new JMenuItem("List");
    myComputerOpenPopupMenuItem[3] = new JMenuItem("Details");
    for (int i = 0; i < 4; i++) {
      myComputerOpenPopupMenu[0].add(myComputerOpenPopupMenuItem[i]);
    }
    myComputerOpenPopup.add(myComputerOpenPopupMenu[0]);
    myComputerOpenPopup.add(myComputerOpenPopupSeparator[0]);
    myComputerOpenPopupMenu[1] = new JMenu("Arrange Icons");
    myComputerOpenPopup.add(myComputerOpenPopupMenu[1]);
    myComputerOpenPopupMenuItem[4] = new JMenuItem("by Drive Letter");
    myComputerOpenPopupMenuItem[5] = new JMenuItem("by Type");
    myComputerOpenPopupMenuItem[6] = new JMenuItem("by Size");
    myComputerOpenPopupMenuItem[7] = new JMenuItem("by Free Space");
    for (int i = 4; i < 8; i++) {
      myComputerOpenPopupMenu[1].add(myComputerOpenPopupMenuItem[i]);
    }
    myComputerOpenPopupMenu[1].add(myComputerOpenPopupSeparator[1]);
    myComputerOpenPopupMenuItem[8] = new JMenuItem("Auto Arrange");
    myComputerOpenPopupMenu[1].add(myComputerOpenPopupMenuItem[8]);
    myComputerOpenPopupMenuItem[9] = new JMenuItem("Line up Icons");
    myComputerOpenPopup.add(myComputerOpenPopupMenuItem[9]);
    myComputerOpenPopup.add(myComputerOpenPopupSeparator[2]);
    myComputerOpenPopupMenuItem[10] = new JMenuItem("Paste");
    myComputerOpenPopupMenuItem[11] = new JMenuItem("Paste Shortcut");
    for (int i = 10; i < 12; i++) {
      myComputerOpenPopupMenuItem[i].setEnabled(false);
      myComputerOpenPopup.add(myComputerOpenPopupMenuItem[i]);
    }
    myComputerOpenPopup.add(myComputerOpenPopupSeparator[3]);
    myComputerOpenPopupMenuItem[12] = new JMenuItem("Properties");
    myComputerOpenPopup.add(myComputerOpenPopupMenuItem[12]);
    for (int i = 0; i < 2; i++) {
      myComputerOpenPopupMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 13; i++) {
      myComputerOpenPopupMenuItem[i].addActionListener(this);
      myComputerOpenPopupMenuItem[i].setFont(MSSansSerif16);
    }
    // When My Computer is Closed, My Computer Objects Become Unselected
    myComputerOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        myComputerUnselectMethod();
      }
    });
    /// Setting up Removable Disk (A:) Explore
    removableDiskA_Explore = new JFrame();
    removableDiskA_Explore.setSize(500, 500);
    removableDiskA_Explore.setTitle("Exploring - Removable Disk (A:)");
    /// Setting up Removable Disk (A:) Properties
    removableDiskA_Properties = new JFrame();
    removableDiskA_Properties.setSize(500, 500);
    removableDiskA_Properties.setTitle("Removable Disk (A:) Properties");
    myComputerObjectsPopupMenuMethod();
    playDosGameC_method();
    myComputerControlPanelMethod();
    myComputerPrintersMethod();
    exploringMyComputerMethod();
  }
  public class MyComputerClickListener extends MouseAdapter{
	  public void mousePressed(MouseEvent e) {
		  myComputerPoint[1]=e.getPoint();
	  }
  }
  public class MyComputerDragListener extends MouseMotionAdapter{
	  public void mouseDragged(MouseEvent e) {
		  myComputerPoint[2]=e.getPoint();
		  myComputerPoint[0].translate((int)(myComputerPoint[2].getX() - myComputerPoint[1].getX()), (int)(myComputerPoint[2].getY() - myComputerPoint[1].getY()));		  
		  myComputerSelected.setBounds((int)(myComputerPoint[0].getX()),(int)(myComputerPoint[0].getY()),102,77);
		  myComputer.setBounds((int)(myComputerPoint[0].getX()),(int)(myComputerPoint[0].getY()),102,77);
		  desktop.revalidate();
		  desktop.repaint();
	  }
  }
  public void inboxObjectsMethod() {
    // Inbox
    inbox = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Inbox.png")));
    inbox.setBounds(26, 110, 51, 78);
    inbox.setToolTipText("Inbox");
    /// Inbox Selected
    inboxSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InboxSelected.png")));
    inboxSelected.setBounds(26, 110, 51, 78);
    inboxSelected.setToolTipText("Inbox");
    // Inbox Objects
    inboxOK = new JButton("OK");
    inboxOK.addActionListener(this);
    inboxOK.setBounds(560, 560, 100, 33);
    inboxOK.setEnabled(false);
    inboxOK.setFont(MSSansSerif16);
    inboxCancel = new JButton("Cancel");
    inboxCancel.addActionListener(this);
    inboxCancel.setBounds(680, 560, 100, 33);
    inboxCancel.setFont(MSSansSerif16);
    theMicrosoftNetwork = new JCheckBox("The Microsoft Network");
    theMicrosoftNetwork.addActionListener(this);
    theMicrosoftNetwork.setBounds(80, 270, 230, 20);
    theMicrosoftNetwork.setFont(MSSansSerif18);
    MicrosoftMail = new JCheckBox("Microsoft Mail");
    MicrosoftMail.addActionListener(this);
    MicrosoftMail.setBounds(80, 370, 150, 20);
    MicrosoftMail.setFont(MSSansSerif18);
    MicrosoftFax = new JCheckBox("Microsoft Fax");
    MicrosoftFax.addActionListener(this);
    MicrosoftFax.setBounds(80, 500, 150, 20);
    MicrosoftFax.setFont(MSSansSerif18);
    MSN_CheckboxIcon = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN_CheckboxIcon.png")));
    MSN_CheckboxIcon.setBounds(5, 250, 70, 70);
    MicrosoftMailIcon = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MicrosoftMailIcon.png")));
    MicrosoftMailIcon.setBounds(5, 350, 70, 70);
    MicrosoftFaxIcon = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MicrosoftFaxIcon.png")));
    MicrosoftFaxIcon.setBounds(5, 475, 73, 62);
    getConnected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GetConnected.png")));
    getConnected.setBounds(0, 0, 900, 235);
    getConnected2 = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GetConnected2.png")));
    getConnected2.setBounds(340, 240, 564, 296);
    inboxSeparator = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InboxSeparator.png")));
    inboxSeparator.setBounds(10, 545, 860, 10);
    // Setting up "Open" in Inbox Popup Menu
    inboxOpen = new JDialog();
    inboxOpen.setAlwaysOnTop(true);
    inboxOpen.getContentPane().setBackground(gray);
    inboxOpen.setBounds(50, 0, 910, 660);
    inboxOpen.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    inboxOpen.setLayout(null);
    inboxOpen.setTitle("Inbox Setup Wizard");
    inboxOpen.add(getConnected);
    inboxOpen.add(getConnected2);
    inboxOpen.add(MSN_CheckboxIcon);
    inboxOpen.add(theMicrosoftNetwork);
    inboxOpen.add(MicrosoftMailIcon);
    inboxOpen.add(MicrosoftMail);
    inboxOpen.add(MicrosoftFaxIcon);
    inboxOpen.add(MicrosoftFax);
    inboxOpen.add(inboxSeparator);
    inboxOpen.add(inboxOK);
    inboxOpen.add(inboxCancel);
    // Setting up "Properties" in Inbox Popup Menu
    inboxProperties = new JDialog();
    inboxProperties.setAlwaysOnTop(true);
    inboxProperties.setLayout(null);
    inboxProperties.setResizable(false);
    inboxProperties.setSize(600, 700);
    inboxProperties.setTitle("Inbox Properties");
    /// Inbox Properties Objects
    inboxPropertiesButton = new JButton[3];
    inboxPropertiesButton[0] = new JButton("OK");
    inboxPropertiesButton[1] = new JButton("Cancel");
    inboxPropertiesButton[2] = new JButton("Apply");
    inboxPropertiesButton[0].setBounds(240, 625, 100, 33);
    inboxPropertiesButton[1].setBounds(355, 625, 100, 33);
    inboxPropertiesButton[2].setBounds(470, 625, 100, 33);
    inboxPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      inboxPropertiesButton[i].addActionListener(this);
      inboxPropertiesButton[i].setFont(MSSansSerif16);
      inboxProperties.add(inboxPropertiesButton[i]);
    }
    inboxGeneralPanel = new JPanel();
    inboxPropertiesPanel = new JPanel();
    inboxPropertiesPanel.setBorder(BorderFactory.createRaisedBevelBorder());
    inboxPropertiesPanel.setBounds(10, 15, 550, 600);
    inboxPropertiesPanel.setLayout(new GridLayout());
    inboxPropertiesTabbedPane = new JTabbedPane(JTabbedPane.TOP);
    inboxPropertiesTabbedPane.addTab("General", inboxGeneralPanel);
    inboxPropertiesPanel.add(inboxPropertiesTabbedPane);
    inboxProperties.add(inboxPropertiesPanel);
  }

  public void myComputerUnselectMethod() {
    if (removableDiskASelected.getParent() != null) {
      myComputerPanel.remove(removableDiskASelected);
      myComputerPanel.add(removableDiskA);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (playDosGameCSelected.getParent() != null) {
      myComputerPanel.remove(playDosGameCSelected);
      myComputerPanel.add(playDosGameC);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (controlPanelSelected.getParent() != null) {
      myComputerPanel.remove(controlPanelSelected);
      myComputerPanel.add(controlPanel);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (printersSelected.getParent() != null) {
      myComputerPanel.remove(printersSelected);
      myComputerPanel.add(printers);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
  }

  public void recycleBinObjectsMethod() {
    // Recycle Bin
    recycleBin = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("RecycleBin.png")));
    recycleBin.setBounds(5, 222, 96, 78);
    recycleBin.setToolTipText("Recycle Bin");
    /// Recycle Bin Selected
    recycleBinSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("RecycleBinSelected.png")));
    recycleBinSelected.setBounds(5, 222, 96, 78);
    recycleBinSelected.setToolTipText("Recycle Bin");
    //// Recycle Bin Objects
    recycleBinScrollPane = new JScrollPane();
    recycleBinScrollPane.getViewport().setBackground(white);
    recycleBinScrollPane.getHorizontalScrollBar().setBackground(gray);
    recycleBinScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    // Setting up "Open" in Recycle Bin Popup Menu
    recycleBinIcon = new ImageIcon(getClass().getClassLoader().getResource("RecycleBinIcon.png"));
    recycleBinOpen = new JFrame();
    recycleBinOpen.getContentPane().add(recycleBinScrollPane);
    recycleBinOpen.setAlwaysOnTop(true);
    recycleBinOpen.setBackground(white);
    recycleBinOpen.setBounds(50, 0, 300, 300);
    recycleBinOpen.setIconImage(recycleBinIcon.getImage());
    recycleBinOpen.setTitle("Recycle Bin");
    recycleBinMenu = new JMenu[5];
    recycleBinMenu[0] = new JMenu("File");
    recycleBinMenu[1] = new JMenu("Edit");
    recycleBinMenu[2] = new JMenu("View");
    recycleBinMenu[3] = new JMenu("Help");
    recycleBinMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      recycleBinMenu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == recycleBinMenu[0]) {
            recycleBinStatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == recycleBinMenu[1]) {
            recycleBinStatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == recycleBinMenu[2]) {
            recycleBinStatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == recycleBinMenu[3]) {
            recycleBinStatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {}
      });
      recycleBinMenuBar.add(recycleBinMenu[i]);
    }
    recycleBinMenuItem = new JMenuItem[50];
    // Recycle Bin Menubar File Menu
    recycleBinMenuItem[0] = new JMenuItem("Empty Recycle Bin");
    recycleBinSeparator = new JSeparator[9];
    for (int i = 0; i < 9; i++) {
      recycleBinSeparator[i] = new JSeparator();
    }
    recycleBinMenu[0].add(recycleBinMenuItem[0]);
    recycleBinMenuItem[1] = new JMenuItem("Create Shortcut");
    recycleBinMenuItem[2] = new JMenuItem("Delete");
    recycleBinMenuItem[3] = new JMenuItem("Rename");
    recycleBinMenuItem[4] = new JMenuItem("Properties");
    for (int i = 0; i < 5; i++) {
      recycleBinMenuItem[i].setEnabled(false);
    }
    for (int i = 1; i < 5; i++) {
      recycleBinMenu[0].add(recycleBinMenuItem[i]);
    }
    recycleBinMenu[0].add(recycleBinSeparator[1]);
    recycleBinMenuItem[5] = new JMenuItem("Close");
    recycleBinMenu[0].add(recycleBinMenuItem[5]);
    // Recycle Bin Menubar Edit Menu
    recycleBinMenuItem[6] = new JMenuItem("Undo");
    recycleBinMenuItem[6].setAccelerator(ctrlZ);
    recycleBinMenu[1].add(recycleBinMenuItem[6]);
    recycleBinMenu[1].add(recycleBinSeparator[2]);
    recycleBinMenuItem[7] = new JMenuItem("Cut");
    recycleBinMenuItem[7].setAccelerator(ctrlX);
    recycleBinMenuItem[8] = new JMenuItem("Copy");
    recycleBinMenuItem[8].setAccelerator(ctrlC);
    recycleBinMenuItem[9] = new JMenuItem("Paste");
    recycleBinMenuItem[9].setAccelerator(ctrlV);
    recycleBinMenuItem[10] = new JMenuItem("Paste Shorcut");
    for (int i = 7; i < 11; i++) {
      recycleBinMenu[1].add(recycleBinMenuItem[i]);
    }
    recycleBinMenu[1].add(recycleBinSeparator[3]);
    recycleBinMenuItem[11] = new JMenuItem("Select All");
    recycleBinMenuItem[11].setAccelerator(ctrlA);
    recycleBinMenuItem[12] = new JMenuItem("Invert Selection");
    for (int i = 11; i < 13; i++) {
      recycleBinMenu[1].add(recycleBinMenuItem[i]);
    }
    for (int i = 6; i < 11; i++) {
      recycleBinMenuItem[i].setEnabled(false);
    }
    // Recycle Bin Menubar View Menu
    recycleBinCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    recycleBinCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    recycleBinCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    recycleBinCheckBoxMenuItem[1].setSelected(true);
    for (int i = 0; i < 2; i++) {
      recycleBinCheckBoxMenuItem[i].addActionListener(this);
      recycleBinCheckBoxMenuItem[i].setFont(MSSansSerif16);
      recycleBinMenu[2].add(recycleBinCheckBoxMenuItem[i]);
    }
    recycleBinMenu[2].add(recycleBinSeparator[4]);
    recycleBinMenuItem[13] = new JMenuItem("Large Icons");
    recycleBinMenuItem[14] = new JMenuItem("Small Icons");
    recycleBinMenuItem[15] = new JMenuItem("List");
    recycleBinMenuItem[16] = new JMenuItem("Details");
    for (int i = 13; i < 17; i++) {
      recycleBinMenu[2].add(recycleBinMenuItem[i]);
    }
    recycleBinMenu[2].add(recycleBinSeparator[5]);
    recycleBinMenu[4] = new JMenu("Arrange Icons");
    recycleBinMenuItem[17] = new JMenuItem("by Name");
    recycleBinMenuItem[18] = new JMenuItem("by Origin");
    recycleBinMenuItem[19] = new JMenuItem("by Delete Date");
    recycleBinMenuItem[20] = new JMenuItem("by Type");
    recycleBinMenuItem[21] = new JMenuItem("by Size");
    recycleBinMenuItem[22] = new JMenuItem("Auto Arrange");
    recycleBinMenuItem[22].setEnabled(false);
    for (int i = 17; i < 22; i++) {
      recycleBinMenu[4].add(recycleBinMenuItem[i]);
    }
    recycleBinMenu[4].add(recycleBinSeparator[6]);
    recycleBinMenu[4].add(recycleBinMenuItem[22]);
    recycleBinMenu[2].add(recycleBinMenu[4]);
    recycleBinMenuItem[23] = new JMenuItem("Line up Icons");
    recycleBinMenu[2].add(recycleBinMenuItem[23]);
    recycleBinMenuItem[23].setEnabled(false);
    recycleBinMenu[2].add(recycleBinSeparator[7]);
    recycleBinMenuItem[24] = new JMenuItem("Refresh");
    recycleBinMenuItem[25] = new JMenuItem("Options...");
    for (int i = 24; i < 26; i++) {
      recycleBinMenu[2].add(recycleBinMenuItem[i]);
    }
    // Recycle Bin Menubar Help Menu
    recycleBinMenuItem[26] = new JMenuItem("Help Topics");
    recycleBinMenu[3].add(recycleBinMenuItem[26]);
    recycleBinMenu[3].add(recycleBinSeparator[8]);
    recycleBinMenuItem[27] = new JMenuItem("About Windows 95");
    recycleBinMenu[3].add(recycleBinMenuItem[27]);
    /// Recycle Bin Status Bar and Recycle Bin Status Text
    recycleBinStatusBar = new JPanel();
    recycleBinStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    recycleBinOpen.add(recycleBinStatusBar, BorderLayout.SOUTH);
    recycleBinStatusBar.setBackground(gray);
    recycleBinStatusBar.setPreferredSize(new Dimension(recycleBinOpen.getWidth(), 24));
    recycleBinStatusBar.setLayout(new BoxLayout(recycleBinStatusBar, BoxLayout.X_AXIS));
    recycleBinStatusText = new JLabel("0 object(s)");
    recycleBinStatusText.setFont(MSSansSerif16);
    recycleBinStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    recycleBinStatusBar.add(recycleBinStatusText);
    for (int i = 0; i < 5; i++) {
      recycleBinMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 28; i++) {
      recycleBinMenuItem[i].addActionListener(this);
      recycleBinMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == recycleBinMenuItem[0]) {
            recycleBinStatusText.setText("Empties the Recycle Bin.");
          } else if (e.getSource() == recycleBinMenuItem[1]) {
            recycleBinStatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == recycleBinMenuItem[2]) {
            recycleBinStatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == recycleBinMenuItem[3]) {
            recycleBinStatusText.setText("Renames the selected item.");
          } else if (e.getSource() == recycleBinMenuItem[4]) {
            recycleBinStatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == recycleBinMenuItem[5]) {
            recycleBinStatusText.setText("Closes the window.");
          } else if (e.getSource() == recycleBinMenuItem[6]) {
            recycleBinStatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == recycleBinMenuItem[7]) {
            recycleBinStatusText.setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == recycleBinMenuItem[8]) {
            recycleBinStatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == recycleBinMenuItem[9]) {
            recycleBinStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == recycleBinMenuItem[10]) {
            recycleBinStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == recycleBinMenuItem[11]) {
            recycleBinStatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == recycleBinMenuItem[12]) {
            recycleBinStatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == recycleBinMenuItem[13]) {
            recycleBinStatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == recycleBinMenuItem[14]) {
            recycleBinStatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == recycleBinMenuItem[15]) {
            recycleBinStatusText.setText("Displays items in a list.");
          } else if (e.getSource() == recycleBinMenuItem[16]) {
            recycleBinStatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == recycleBinMenuItem[17]) {
            recycleBinStatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == recycleBinMenuItem[18]) {
            recycleBinStatusText.setText("Sorts items according to their original location.");
          } else if (e.getSource() == recycleBinMenuItem[19]) {
            recycleBinStatusText.setText("Sorts items by the date on which they were deleted.");
          } else if (e.getSource() == recycleBinMenuItem[20]) {
            recycleBinStatusText.setText("Sorts items by type.");
          } else if (e.getSource() == recycleBinMenuItem[21]) {
            recycleBinStatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == recycleBinMenuItem[22]) {
            recycleBinStatusText.setText("Arranges icons automatically.");
          } else if (e.getSource() == recycleBinMenuItem[23]) {
            recycleBinStatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == recycleBinMenuItem[24]) {
            recycleBinStatusText.setText("Refresh item information.");
          } else if (e.getSource() == recycleBinMenuItem[25]) {
            recycleBinStatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == recycleBinMenuItem[26]) {
            recycleBinStatusText.setText("Opens Help.");
          } else if (e.getSource() == recycleBinMenuItem[27]) {
            recycleBinStatusText.setText("Displays program information, version number, and copyright.");
          }
        }
      });
      recycleBinMenuItem[i].setFont(MSSansSerif16);
    }
    /// Adding MouseListener to Recycle Bin Separators
    for (int i = 0; i < 9; i++) {
      recycleBinSeparator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 9; i++) {
            if (e.getSource() == recycleBinSeparator[i]) {
              recycleBinStatusText.setText("");
            }
          }
        }
      });
    }
    recycleBinOpen.add(recycleBinMenuBar, BorderLayout.NORTH);
    recycleBinOpen.getContentPane().setBackground(white);
    // Setting up "Explore" in Recycle Bin Popup Menu
    exploringRecycleBin = new JFrame();
    exploringRecycleBin.setBounds(50, 0, 600, 500);
    exploringRecycleBin.setTitle("Exploring - Recycle Bin");
    exploringRecycleBinAllFoldersNode = new DefaultMutableTreeNode[50];
    exploringRecycleBinAllFoldersNode[0] = new DefaultMutableTreeNode("Desktop");
    exploringRecycleBinAllFoldersNode[1] = new DefaultMutableTreeNode("My Computer");
    exploringRecycleBinAllFoldersNode[2] = new DefaultMutableTreeNode("Recycle Bin");
    for (int i = 1; i < 3; i++) {
      exploringRecycleBinAllFoldersNode[0].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[3] = new DefaultMutableTreeNode("Removable Disk (A:)");
    exploringRecycleBinAllFoldersNode[4] = new DefaultMutableTreeNode("Playdosgame (C:)");
    exploringRecycleBinAllFoldersNode[5] = new DefaultMutableTreeNode("Control Panel");
    exploringRecycleBinAllFoldersNode[6] = new DefaultMutableTreeNode("Printers");
    for (int i = 3; i < 7; i++) {
      exploringRecycleBinAllFoldersNode[1].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[7] = new DefaultMutableTreeNode("Program Files");
    exploringRecycleBinAllFoldersNode[8] = new DefaultMutableTreeNode("Windows");
    for (int i = 7; i < 9; i++) {
      exploringRecycleBinAllFoldersNode[4].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[9] = new DefaultMutableTreeNode("Accessories");
    exploringRecycleBinAllFoldersNode[10] = new DefaultMutableTreeNode("Microsoft Exchange");
    exploringRecycleBinAllFoldersNode[11] = new DefaultMutableTreeNode("Plus!");
    exploringRecycleBinAllFoldersNode[12] = new DefaultMutableTreeNode("The Microsoft Network");
    for (int i = 9; i < 13; i++) {
      exploringRecycleBinAllFoldersNode[7].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[13] = new DefaultMutableTreeNode("Command");
    exploringRecycleBinAllFoldersNode[14] = new DefaultMutableTreeNode("Config");
    exploringRecycleBinAllFoldersNode[15] = new DefaultMutableTreeNode("Cursors");
    exploringRecycleBinAllFoldersNode[16] = new DefaultMutableTreeNode("Fonts");
    exploringRecycleBinAllFoldersNode[17] = new DefaultMutableTreeNode("Help");
    exploringRecycleBinAllFoldersNode[18] = new DefaultMutableTreeNode("Inf");
    exploringRecycleBinAllFoldersNode[19] = new DefaultMutableTreeNode("Media");
    exploringRecycleBinAllFoldersNode[20] = new DefaultMutableTreeNode("Pif");
    exploringRecycleBinAllFoldersNode[21] = new DefaultMutableTreeNode("Recent");
    exploringRecycleBinAllFoldersNode[22] = new DefaultMutableTreeNode("SendTo");
    exploringRecycleBinAllFoldersNode[23] = new DefaultMutableTreeNode("ShellNew");
    exploringRecycleBinAllFoldersNode[24] = new DefaultMutableTreeNode("Spool");
    exploringRecycleBinAllFoldersNode[25] = new DefaultMutableTreeNode("Start Menu");
    exploringRecycleBinAllFoldersNode[26] = new DefaultMutableTreeNode("Sysbckup");
    exploringRecycleBinAllFoldersNode[27] = new DefaultMutableTreeNode("System");
    exploringRecycleBinAllFoldersNode[28] = new DefaultMutableTreeNode("Temp");
    for (int i = 13; i < 29; i++) {
      exploringRecycleBinAllFoldersNode[8].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[29] = new DefaultMutableTreeNode("Microsoft Internet");
    exploringRecycleBinAllFoldersNode[11].add(exploringRecycleBinAllFoldersNode[29]);
    exploringRecycleBinAllFoldersNode[30] = new DefaultMutableTreeNode("Printers");
    exploringRecycleBinAllFoldersNode[24].add(exploringRecycleBinAllFoldersNode[30]);
    exploringRecycleBinAllFoldersNode[31] = new DefaultMutableTreeNode("Programs");
    exploringRecycleBinAllFoldersNode[25].add(exploringRecycleBinAllFoldersNode[31]);
    exploringRecycleBinAllFoldersNode[32] = new DefaultMutableTreeNode("Color");
    exploringRecycleBinAllFoldersNode[33] = new DefaultMutableTreeNode("losubsys");
    exploringRecycleBinAllFoldersNode[34] = new DefaultMutableTreeNode("Vmm32");
    for (int i = 32; i < 35; i++) {
      exploringRecycleBinAllFoldersNode[27].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[35] = new DefaultMutableTreeNode("Accessories");
    exploringRecycleBinAllFoldersNode[36] = new DefaultMutableTreeNode("StartUp");
    for (int i = 35; i < 37; i++) {
      exploringRecycleBinAllFoldersNode[31].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinAllFoldersNode[37] = new DefaultMutableTreeNode("Games");
    exploringRecycleBinAllFoldersNode[38] = new DefaultMutableTreeNode("Internet Tools");
    exploringRecycleBinAllFoldersNode[39] = new DefaultMutableTreeNode("Multimedia");
    exploringRecycleBinAllFoldersNode[40] = new DefaultMutableTreeNode("System Tools");
    for (int i = 37; i < 41; i++) {
      exploringRecycleBinAllFoldersNode[35].add(exploringRecycleBinAllFoldersNode[i]);
    }
    exploringRecycleBinTree = new JTree[2];
    exploringRecycleBinTree[0] = new JTree(exploringRecycleBinAllFoldersNode[0]);
    exploringRecycleBinTree[1] = new JTree(exploringRecycleBinContentsNode);
    exploringRecycleBinSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
    exploringRecycleBinSplitPane.setDividerLocation(300);
    exploringRecycleBinSplitPane.setLeftComponent(exploringRecycleBinTree[0]);
    exploringRecycleBinSplitPane.setRightComponent(exploringRecycleBinTree[1]);
    exploringRecycleBin.add(exploringRecycleBinSplitPane);
    // Setting up "Properties" in Recycle Bin Popup Menu
    recycleBinProperties = new JDialog();
    recycleBinProperties.setLayout(null);
    recycleBinProperties.setResizable(false);
    recycleBinProperties.setSize(600, 700);
    recycleBinProperties.setTitle("Recycle Bin Properties");
    /// Recycle Bin Properties Objects
    recycleBinPropertiesButton = new JButton[3];
    recycleBinPropertiesButton[0] = new JButton("OK");
    recycleBinPropertiesButton[1] = new JButton("Cancel");
    recycleBinPropertiesButton[2] = new JButton("Apply");
    recycleBinPropertiesButton[0].setBounds(240, 625, 100, 33);
    recycleBinPropertiesButton[1].setBounds(355, 625, 100, 33);
    recycleBinPropertiesButton[2].setBounds(470, 625, 100, 33);
    recycleBinPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      recycleBinPropertiesButton[i].addActionListener(this);
      recycleBinPropertiesButton[i].setFont(MSSansSerif16);
      recycleBinProperties.add(recycleBinPropertiesButton[i]);
    }
    recycleBinPropertiesPanel = new JPanel();
    recycleBinPropertiesPanel.setBorder(BorderFactory.createRaisedBevelBorder());
    recycleBinPropertiesPanel.setBounds(10, 15, 550, 600);
    recycleBinPropertiesPanel.setLayout(new GridLayout());
    globalPanel = new JPanel();
    playDosGameC_Panel = new JPanel();
    recycleBinPropertiesTabbedPane = new JTabbedPane(JTabbedPane.TOP);
    recycleBinPropertiesTabbedPane.addTab("Global", globalPanel);
    recycleBinPropertiesTabbedPane.addTab("Playdosgame (C:)", playDosGameC_Panel);
    recycleBinPropertiesPanel.add(recycleBinPropertiesTabbedPane);
    recycleBinProperties.add(recycleBinPropertiesPanel);
  }

  public void theInternetObjectsMethod() {
    // The Internet
    theInternet = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("TheInternet.png")));
    theInternet.setBounds(5, 335, 97, 78);
    theInternet.setToolTipText("The Internet");
    /// The Internet Selected
    theInternetSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TheInternetSelected.png")));
    theInternetSelected.setBounds(5, 335, 97, 78);
    theInternetSelected.setToolTipText("The Internet");
    //// The Internet Objects
    theInternetHelp = new JButton("Help");
    theInternetBack = new JButton("< Back");
    theInternetNext = new JButton("Next >");
    theInternetCancel = new JButton("Cancel");
    theInternetHelp.addActionListener(this);
    theInternetBack.addActionListener(this);
    theInternetNext.addActionListener(this);
    theInternetCancel.addActionListener(this);
    theInternetHelp.setBounds(230, 340, 110, 40);
    theInternetBack.setBounds(400, 500, 110, 40);
    theInternetNext.setBounds(510, 500, 110, 40);
    theInternetCancel.setBounds(680, 500, 110, 40);
    theInternetBack.setEnabled(false);
    theInternetHelp.setFont(MSSansSerif16);
    theInternetBack.setFont(MSSansSerif16);
    theInternetNext.setFont(MSSansSerif16);
    theInternetCancel.setFont(MSSansSerif16);
    welcomeToInternetSetup = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("WelomeToInternetSetup.png")));
    internetSetupImage = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetSetupImage.png")));
    theInternetSeparator = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("theInternetSeparator.png")));
    youNeedAModem = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("YouNeedAModem.png")));
    welcomeToInternetSetup.setBounds(230, 10, 565, 305);
    internetSetupImage.setBounds(20, 20, 200, 400);
    theInternetSeparator.setBounds(10, 480, 780, 10);
    youNeedAModem.setBounds(230, 10, 577, 300);
    //// Install New Modem Objects
    installNewModemHaveDisk = new JButton("Have Disk...");
    installNewModemHaveDisk.addActionListener(this);
    installNewModemHaveDisk.setBounds(660, 355, 140, 40);
    installNewModemHaveDisk.setFont(MSSansSerif16);
    theInternetBack.setBounds(400, 500, 110, 40);
    theInternetNext.setBounds(510, 500, 110, 40);
    theInternetCancel.setBounds(680, 500, 110, 40);
    theInternetBack.setEnabled(false);
    dontDetectMyModem = new JCheckBox("Don't detect my modem; I will select it from a list.");
    dontDetectMyModem.addActionListener(this);
    dontDetectMyModem.setBounds(230, 340, 500, 50);
    dontDetectMyModem.setFont(MSSansSerif16);
    installNewModemImage = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallNewModemImage.png")));
    installNewModemSeparator = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallNewModemSeparator.png")));
    detectYourModem = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DetectYourModem.png")));
    lookingForAModem = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("LookingForAModem.png")));
    clickTheManufacturer = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ClickTheManufacturer.png")));
    standard300bpsModem = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("Standard300bpsModem.png")));
    pleaseWaitInstallYourModem = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("PleaseWaitInstallYourModem.png")));
    installNewModemImage.setBounds(20, 20, 200, 400);
    installNewModemSeparator.setBounds(10, 480, 780, 10);
    detectYourModem.setBounds(230, 10, 565, 305);
    lookingForAModem.setBounds(230, 10, 550, 242);
    clickTheManufacturer.setBounds(-22, 10, 885, 200);
    standard300bpsModem.setBounds(250, 0, 567, 165);
    pleaseWaitInstallYourModem.setBounds(230, 50, 522, 40);
    String[] modemManufacturer = new String[92];
    modemManufacturer[0] = "(Standard Modem Types)";
    modemManufacturer[1] = "(VoiceView Modem Types)";
    modemManufacturer[2] = "Acer";
    modemManufacturer[3] = "Angia";
    modemManufacturer[4] = "Apex Data Inc.";
    modemManufacturer[5] = "AST";
    modemManufacturer[6] = "AT&T";
    modemManufacturer[7] = "ATI Technologies Inc.";
    modemManufacturer[8] = "Avtek";
    modemManufacturer[9] = "Banksia";
    modemManufacturer[10] = "Best Data";
    modemManufacturer[11] = "Boca Research";
    modemManufacturer[12] = "Calcom";
    modemManufacturer[13] = "Cardinal";
    modemManufacturer[14] = "Cirrus Logic";
    modemManufacturer[15] = "Com 1";
    modemManufacturer[16] = "Communicate";
    modemManufacturer[17] = "Compaq";
    modemManufacturer[18] = "Computer Peripherals Inc";
    modemManufacturer[19] = "Creative Labs";
    modemManufacturer[20] = "Data Race";
    modemManufacturer[21] = "DEC";
    modemManufacturer[22] = "Diamond Multimedia";
    modemManufacturer[23] = "Digicom";
    modemManufacturer[24] = "Digital Equipment Corporation";
    modemManufacturer[25] = "Digitan";
    modemManufacturer[26] = "E-tech";
    modemManufacturer[27] = "Epson";
    modemManufacturer[28] = "Exar";
    modemManufacturer[29] = "Exicom Australia PTY";
    modemManufacturer[30] = "EXP";
    modemManufacturer[31] = "Gateway 2000";
    modemManufacturer[32] = "General DataComm";
    modemManufacturer[33] = "GVC";
    modemManufacturer[34] = "Hayes";
    modemManufacturer[35] = "Hotline";
    modemManufacturer[36] = "IBM";
    modemManufacturer[37] = "Infotel";
    modemManufacturer[38] = "InteCom";
    modemManufacturer[39] = "Intel";
    modemManufacturer[40] = "Interlink Electronics";
    modemManufacturer[41] = "Kingston";
    modemManufacturer[42] = "Logicode";
    modemManufacturer[43] = "Macronix";
    modemManufacturer[44] = "Maestro Digital Communications";
    modemManufacturer[45] = "Magic Ram";
    modemManufacturer[46] = "Maxtech";
    modemManufacturer[47] = "Megahertz Corp.";
    modemManufacturer[48] = "Metricom, Inc.";
    modemManufacturer[49] = "Microcom, Inc.";
    modemManufacturer[50] = "Microfax";
    modemManufacturer[51] = "Mitsubishi";
    modemManufacturer[52] = "Motorola";
    modemManufacturer[53] = "MultiTech Systems";
    modemManufacturer[54] = "NEC";
    modemManufacturer[55] = "NetComm";
    modemManufacturer[56] = "New Media Corporation";
    modemManufacturer[57] = "Nokia Mobile Phones";
    modemManufacturer[58] = "Noteworthy";
    modemManufacturer[59] = "NovaLink Technologies";
    modemManufacturer[60] = "Ositech";
    modemManufacturer[61] = "P.N.B";
    modemManufacturer[62] = "Pace Micro Communications Ltd";
    modemManufacturer[63] = "Packard Bell";
    modemManufacturer[64] = "Piiceon";
    modemManufacturer[65] = "Practical Peripherals";
    modemManufacturer[66] = "Premax";
    modemManufacturer[67] = "Psion";
    modemManufacturer[68] = "Puredata";
    modemManufacturer[69] = "Racal";
    modemManufacturer[70] = "Reveal";
    modemManufacturer[71] = "Rockwell";
    modemManufacturer[72] = "Schmidt Electronic Laboratories";
    modemManufacturer[73] = "Sierra Semiconductor";
    modemManufacturer[74] = "Sierra Wireless";
    modemManufacturer[75] = "Simple Computing";
    modemManufacturer[76] = "Spectrum Signal Processing Inc";
    modemManufacturer[77] = "Supra Corporation";
    modemManufacturer[78] = "TDK";
    modemManufacturer[79] = "Telebit";
    modemManufacturer[80] = "Texas Instruments";
    modemManufacturer[81] = "Toshiba";
    modemManufacturer[82] = "Turbomodem";
    modemManufacturer[83] = "U.S. Robotics, Inc.";
    modemManufacturer[84] = "Ven-Tel";
    modemManufacturer[85] = "Victory";
    modemManufacturer[86] = "Winbook";
    modemManufacturer[87] = "Xircom";
    modemManufacturer[88] = "Zoltrix";
    modemManufacturer[89] = "Zoom Telephonics, Inc.";
    modemManufacturer[90] = "Zypcom";
    modemManufacturer[91] = "ZyXEL";
    modemManufacturersList = new JList < Object > (modemManufacturer);
    modemManufacturersList.setFont(MSSansSerif16);
    modemManufacturersList.setSelectedIndex(0);
    modemManufacturersList.setVisibleRowCount(6);
    modemManufacturersScrollPane = new JScrollPane(modemManufacturersList);
    modemManufacturersScrollPane.setBounds(20, 230, 175, 120);
    modemModel = new String[7];
    modemModel[0] = "Standard  300 bps Modem";
    modemModel[1] = "Standard 1200 bps Modem";
    modemModel[2] = "Standard 2400 bps Modem";
    modemModel[3] = "Standard 9600 bps Modem";
    modemModel[4] = "Standard 14400 bps Modem";
    modemModel[5] = "Standard 19200 bps Modem";
    modemModel[6] = "Standard 28800 bps Modem";
    modemModelsList = new JList < Object > (modemModel);
    modemModelsList.setFont(MSSansSerif16);
    modemModelsList.setSelectedIndex(0);
    modemModelsList.setVisibleRowCount(6);
    modemModelsScrollPane = new JScrollPane(modemModelsList);
    modemModelsScrollPane.setBounds(350, 230, 400, 120);
    modemPort = new String[3];
    modemPort[0] = "Communications modemPort (COM1)";
    modemPort[1] = "Communications modemPort (COM2)";
    modemPort[2] = "Printer modemPort (LP1)";
    modemPortsList = new JList < Object > (modemPort);
    modemPortsList.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        if (modemPortsList.getSelectedValue().toString() == modemPort[0]) {
          theInternetNext.setEnabled(true);
        } else if (modemPortsList.getSelectedValue().toString() == modemPort[1]) {
          theInternetNext.setEnabled(true);
        } else if (modemPortsList.getSelectedValue().toString() == modemPort[2]) {
          theInternetNext.setEnabled(true);
        } else if (modemPortsList.getSelectedValue().toString() == null) {

        }
      }
    });
    modemPortsList.setFont(MSSansSerif16);
    modemPortsList.setVisibleRowCount(3);
    modemPortsScrollPane = new JScrollPane(modemPortsList);
    modemPortsScrollPane.setBounds(250, 200, 400, 80);
    //// Location Information Objects
    locationInformationCountrySelect = new JComboBox < String > ();
    country = new String[239];
    country[0] = "Afghanistan (93)";
    country[1] = "Albania (355)";
    country[2] = "Algeria (213)";
    country[3] = "America Samoa (684)";
    country[4] = "Andorra (376)";
    country[5] = "Angola (244)";
    country[6] = "Anguilla (1)";
    country[7] = "Antigua (1)";
    country[8] = "Argentina (54)";
    country[9] = "Armenia (374)";
    country[10] = "Aruba (297)";
    country[11] = "Ascension Island (247)";
    country[12] = "Australia (61)";
    country[13] = "Australian Antarctic Territory (672)";
    country[14] = "Austria (43)";
    country[15] = "Azerbaijan (994)";
    country[16] = "Bahamas (1)";
    country[17] = "Bahrain (973)";
    country[18] = "Bangladesh (880)";
    country[19] = "Barbados (1)";
    country[20] = "Barbuda (1)";
    country[21] = "Belarus (375)";
    country[22] = "Belgium (32)";
    country[23] = "Belize (501)";
    country[24] = "Benin (229)";
    country[25] = "Bermuda (1)";
    country[26] = "Bhutan (975)";
    country[27] = "Bolivia (591)";
    country[28] = "Bosnia and Herzegovina (387)";
    country[29] = "Botswana (267)";
    country[30] = "Brazil (55)";
    country[31] = "British Virgin Islands (1)";
    country[32] = "Brunei (673)";
    country[33] = "Bulgaria (359)";
    country[34] = "Burkina Faso (226)";
    country[35] = "Burundi (257)";
    country[36] = "Cambodia (855)";
    country[37] = "Cameroon (237)";
    country[38] = "Canada (1)";
    country[39] = "Cape Verde Islands (238)";
    country[40] = "Cayman Islands (1)";
    country[41] = "Central African Republic (236)";
    country[42] = "Chad (235)";
    country[43] = "Chile (56)";
    country[44] = "China (86)";
    country[45] = "Christmas Island (672)";
    country[46] = "Cocos-Keeling Islands (61)";
    country[47] = "Colombia (57)";
    country[48] = "Comoros (269)";
    country[49] = "Congo (242)";
    country[50] = "Cook Islands (682)";
    country[51] = "Costa Rica (506)";
    country[52] = "Croatia (385)";
    country[53] = "Cuba (53)";
    country[54] = "Cyprus (357)";
    country[55] = "Czech Republic (420";
    country[56] = "Denmark (45)";
    country[57] = "Diego Garcia (246)";
    country[58] = "Djibouti (253)";
    country[59] = "Dominica (1)";
    country[60] = "Dominican Republic (1)";
    country[61] = "Ecuador (593)";
    country[62] = "Egypt (20)";
    country[63] = "El Salvador (503)";
    country[64] = "Equatorial Guinea (240)";
    country[65] = "Eritrea (291)";
    country[66] = "Estonia (372)";
    country[67] = "Ethiopia (251)";
    country[68] = "F.Y.R.O.M. (Former Yugoslav Republic of Macedonia)";
    country[69] = "Faeroe Islands (298)";
    country[70] = "Falkland Islands (500)";
    country[71] = "Fiji Islands (679)";
    country[72] = "Finland (358)";
    country[73] = "France (33)";
    country[74] = "French Antilles (590)";
    country[75] = "French Guiana (594)";
    country[76] = "French Polynesia (689)";
    country[77] = "Gabon (241)";
    country[78] = "Gambia (220)";
    country[79] = "Georgia (995)";
    country[80] = "Germany (49)";
    country[81] = "Ghana (233)";
    country[82] = "Gibraltar (350)";
    country[83] = "Greece (30)";
    country[84] = "Greenland (299)";
    country[85] = "Grenada (1)";
    country[86] = "Guadeloupe (590)";
    country[87] = "Guam (671)";
    country[88] = "Guantanamo Bay (53)";
    country[89] = "Guatemala (502)";
    country[90] = "Guinea (224)";
    country[91] = "Guinea-Bissau (245)";
    country[92] = "Guyana (592)";
    country[93] = "Haiti (509)";
    country[94] = "Honduras (504)";
    country[95] = "Hong Kong (852)";
    country[96] = "Hungary (36)";
    country[97] = "Iceland (354)";
    country[98] = "India (91)";
    country[99] = "Indonesia (62)";
    country[100] = "INMARSAT (Atlantic-East) (871)";
    country[101] = "INMARSAT (Atlantic-West) (874)";
    country[102] = "INMARSAT (Pacific) (872)";
    country[103] = "Iran (98)";
    country[104] = "Iraq (964)";
    country[105] = "Ireland (353)";
    country[106] = "Israel (972)";
    country[107] = "Italy (39)";
    country[108] = "Ivory Coast (225)";
    country[109] = "Jamaica (1)";
    country[110] = "Japan (81)";
    country[111] = "Jordan (962)";
    country[112] = "Kazakhstan (7)";
    country[113] = "Kenya (254)";
    country[114] = "Kiribati Republic (686)";
    country[115] = "Korea (North) (850)";
    country[116] = "Korea (South) (82)";
    country[117] = "Kuwait (965)";
    country[118] = "Kyrgyzstan (7)";
    country[119] = "Laos (856)";
    country[120] = "Latvia (371)";
    country[121] = "Lebanon (961)";
    country[122] = "Lesotho (266)";
    country[123] = "Liberia (231)";
    country[124] = "Libya (218)";
    country[125] = "Liechtenstein (41)";
    country[126] = "Lithuania (37)";
    country[127] = "Luxembourg (352)";
    country[128] = "Macao (853)";
    country[129] = "Madagascar (261)";
    country[130] = "Malawi (265)";
    country[131] = "Malaysia (60)";
    country[132] = "Maldives (960)";
    country[133] = "Mali (223)";
    country[134] = "Malta (356)";
    country[135] = "Marshall Islands (692)";
    country[136] = "Martinique (596)";
    country[137] = "Mauritania (222)";
    country[138] = "Mauritius (230)";
    country[139] = "Mayotte Island (269)";
    country[140] = "Mexico (52)";
    country[141] = "Micronesia (691)";
    country[142] = "Moldova (373)";
    country[143] = "Monaco (33)";
    country[144] = "Mongolia (976)";
    country[145] = "Montserrat (1)";
    country[146] = "Morocco (212)";
    country[147] = "Mozambique (258)";
    country[148] = "Myanmar (95)";
    country[149] = "Namibia (264)";
    country[150] = "Nauru (674)";
    country[151] = "Nepal (977)";
    country[152] = "Netherlands (31)";
    country[153] = "Netherlands Antilles (599)";
    country[154] = "Nevis (1)";
    country[155] = "New Caledonia (687)";
    country[156] = "New Zealand (64)";
    country[157] = "Nicaragua (505)";
    country[158] = "Niger (227)";
    country[159] = "Nigeria (234)";
    country[160] = "Niue (683)";
    country[161] = "Norfolk Island (672)";
    country[162] = "Norway (47)";
    country[163] = "Oman (968)";
    country[164] = "Pakistan (92)";
    country[165] = "Palau (680)";
    country[166] = "Panama (507)";
    country[167] = "Papua New Guinea (675)";
    country[168] = "Paraguay (595)";
    country[169] = "Peru (51)";
    country[170] = "Philippines (63)";
    country[171] = "Poland (48)";
    country[172] = "Portugal (351)";
    country[173] = "Puerto Rico (1)";
    country[174] = "Qatar (974)";
    country[175] = "Reunion Island (262)";
    country[176] = "Romania (40)";
    country[177] = "Rota Island (670)";
    country[178] = "Russia (7)";
    country[179] = "Rwanda (250)";
    country[180] = "Saint Lucia (1)";
    country[181] = "Saipan Island (670)";
    country[182] = "San Marino (378)";
    country[183] = "Sao Tome and Principe (239)";
    country[184] = "Saudi Arabia (966)";
    country[185] = "Senegal Republic (221)";
    country[186] = "Seychelle Islands (248)";
    country[187] = "Sierra Leone (232)";
    country[188] = "Singapore (65)";
    country[189] = "Slovak Republic (42)";
    country[190] = "Slovenia (386)";
    country[191] = "Solomon Islands (677)";
    country[192] = "Somalia (252)";
    country[193] = "South Afria (27)";
    country[194] = "Spain (34)";
    country[195] = "Sri Lanka (94)";
    country[196] = "St. Helena (290";
    country[197] = "St. Kitts (1)";
    country[198] = "St. Pierre and Miquelon (508)";
    country[199] = "St. Vincent and the Grenadines (1)";
    country[200] = "Sudan (249)";
    country[201] = "Suriname (597)";
    country[202] = "Swaziland (268)";
    country[203] = "Sweden (46)";
    country[204] = "Switzerland (41)";
    country[205] = "Syria (963)";
    country[206] = "Taiwan, Republic of China (886)";
    country[207] = "Tajikistan (7)";
    country[208] = "Tanzania (255)";
    country[209] = "Thailand (66)";
    country[210] = "Tinian Island (670)";
    country[211] = "Togo (228)";
    country[212] = "Tokelau (690)";
    country[213] = "Tonga (676)";
    country[214] = "Trinidad and Tobago (1)";
    country[215] = "Tunisia (216)";
    country[216] = "Turkey (90)";
    country[217] = "Turkmenistan (7)";
    country[218] = "Turks and Caicos Islands (1)";
    country[219] = "Tuvalu (688)";
    country[220] = "Uganda (256)";
    country[221] = "Ukraine (380)";
    country[222] = "United Arab Emirates (971)";
    country[223] = "United Kingdom (44)";
    country[224] = "United States of America (1)";
    country[225] = "United States Virgin Islands (1)";
    country[226] = "Uruguay (598)";
    country[227] = "Uzbekistan (7)";
    country[228] = "Vanuatu (678)";
    country[229] = "Vatican City (39)";
    country[230] = "Venezuela (58)";
    country[231] = "Vietnam (84)";
    country[232] = "Wallis and Futuna Islands (681)";
    country[233] = "Western Samoa (685)";
    country[234] = "Yemen (96)";
    country[235] = "Yugoslavia (381)";
    country[236] = "Zaire (243)";
    country[237] = "Zambia (260)";
    country[238] = "Zimbabwe (263)";
    for (int i = 0; i < 239; i++) {
      locationInformationCountrySelect.addItem(country[i]);
    }
    locationInformationCountrySelect.setBounds(230, 150, 500, 30);
    locationInformationCountrySelect.setFont(MSSansSerif16);
    locationInformationCountrySelect.setSelectedIndex(224);
    locationInformationImage = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LocationInformationImage.png")));
    locationInformationCountry = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LocationInformationCountry.png")));
    locationInformationAreaCode = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LocationInformationAreaCode.png")));
    locationInformationAccessNumber = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LocationInformationAccessNumber.png")));
    locationInformationPhoneSystem = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LocationInformationPhoneSystem.png")));
    locationInformationSeparator = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LocationInformationSeparator.png")));
    locationInformationImage.setBounds(20, 20, 200, 400);
    locationInformationCountry.setBounds(230, 20, 580, 112);
    locationInformationAreaCode.setBounds(230, 220, 448, 37);
    locationInformationAccessNumber.setBounds(230, 300, 579, 39);
    locationInformationPhoneSystem.setBounds(230, 380, 433, 39);
    locationInformationAreaCodeTextField = new JTextField();
    locationInformationAccessNumberTextField = new JTextField();
    locationInformationAreaCodeTextField.getDocument().addDocumentListener(new DocumentListener() {
      public void insertUpdate(DocumentEvent e) {
        theInternetNext.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
            if (e.getSource() == theInternetNext && theInternetOpen.getTitle() == "Location Information" &&
              locationInformationAreaCodeTextField.getText().trim().length() == 0) {
              JOptionPane.showOptionDialog(null,
                "Locations in the selected country must specify an area (city) code.\n" +
                "Please enter one.",
                "Required Entry Not Made", JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK,
                OK[0]);
            }
          }
        });
      }

      public void removeUpdate(DocumentEvent e) {}

      public void changedUpdate(DocumentEvent e) {}
    });
    locationInformationAreaCodeTextField.setBounds(230, 265, 100, 33);
    locationInformationAccessNumberTextField.setBounds(230, 345, 100, 33);
    toneDialing = new JRadioButton("Tone dialing");
    pulseDialing = new JRadioButton("Pulse dialing");
    toneDialing.setBounds(235, 420, 120, 30);
    pulseDialing.setBounds(365, 420, 120, 30);
    toneDialing.setFont(MSSansSerif16);
    pulseDialing.setFont(MSSansSerif16);
    toneDialing.setSelected(true);
    locationInformationButtonGroup = new ButtonGroup();
    locationInformationButtonGroup.add(toneDialing);
    locationInformationButtonGroup.add(pulseDialing);
    // Your modem has been set up successfully
    yourModemSuccess = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("YourModemSuccess.png")));
    yourModemSuccess.setBounds(230, 10, 542, 200);
    // How to Connect
    howToConnect = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("HowToConnect.png")));
    howToConnect.setBounds(230, 10, 485, 160);
    howToConnect1 = new JRadioButton("Use The Microsoft Network");
    howToConnect2 = new JRadioButton("I already have an account with a different service\n provider");
    howToConnect1.addActionListener(this);
    howToConnect2.addActionListener(this);
    howToConnect1.setBounds(230, 175, 300, 30);
    howToConnect2.setBounds(230, 205, 500, 30);
    howToConnect1.setFont(MSSansSerif16);
    howToConnect2.setFont(MSSansSerif16);
    howToConnect1.setSelected(true);
    howToConnectButtonGroup = new ButtonGroup();
    howToConnectButtonGroup.add(howToConnect1);
    howToConnectButtonGroup.add(howToConnect2);
    // Use The Microsoft Network Installing Files
    installingFiles = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InstallingFiles.png")));
    installingFiles.setBounds(230, 10, 587, 255);
    //// Use The Microsoft Network Installing Files...
    installingFiles_ = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InstallingFiles....png")));
    installingFiles_.setBounds(230, 10, 587, 255);
    // Internet Mail
    internetMail = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InternetMail.png")));
    internetMailNote = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InternetMailNote.png")));
    internetMail.setBounds(230, 10, 522, 168);
    internetMailNote.setBounds(225, 300, 600, 101);
    internetMail1 = new JRadioButton("Yes (Recommended)");
    internetMail2 = new JRadioButton("No");
    internetMail1.addActionListener(this);
    internetMail2.addActionListener(this);
    internetMail1.setBounds(230, 190, 200, 20);
    internetMail2.setBounds(230, 210, 100, 20);
    internetMail1.setFont(MSSansSerif16);
    internetMail2.setFont(MSSansSerif16);
    internetMail1.setSelected(true);
    internetMailButtonGroup = new ButtonGroup();
    internetMailButtonGroup.add(internetMail1);
    internetMailButtonGroup.add(internetMail2);
    // Internet Mail Installing Files
    internetMailInstallingFiles1 = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetMailInstallingFiles.png")));
    internetMailInstallingFiles2 = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetMailInstallingFiles2.png")));
    internetMailInstallingFiles1.setBounds(218, 10, 610, 259);
    internetMailInstallingFiles2.setBounds(225, 10, 610, 259);
    // Internet Mail Installing Files...
    internetMailInstallingFiles_1 = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetMailInstallingFiles....png")));
    internetMailInstallingFiles_2 = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetMailInstallingFiles2....png")));
    internetMailInstallingFiles_1.setBounds(230, 10, 600, 264);
    internetMailInstallingFiles_2.setBounds(230, 10, 600, 264);
    // Welcome to Internet Setup! After "Your modem has been set up successfully."
    welcomeToInternetSetupAfterSuccess = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("WelomeToInternetSetupAfterSuccess.png")));
    welcomeToInternetSetupAfterSuccess.setBounds(230, 10, 565, 305);
    // Cancel Button in the Internet Setup Wizard After "Your modem has been set up
    // successfully."
    theInternetCancelAfterSuccess = new JButton("Cancel");
    theInternetCancelAfterSuccess.addActionListener(this);
    theInternetCancelAfterSuccess.setBounds(680, 500, 110, 40);
    theInternetCancelAfterSuccess.setFont(MSSansSerif16);
    // Setting up "Open" in The Internet Popup Menu
    theInternetOpen = new JDialog();
    theInternetOpen.setAlwaysOnTop(true);
    theInternetOpen.getContentPane().setBackground(gray);
    theInternetOpen.setBounds(120, 60, 830, 580);
    theInternetOpen.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    theInternetOpen.setLayout(null);
    theInternetOpen.setTitle("Internet Setup Wizard");
    theInternetOpen.add(welcomeToInternetSetup);
    theInternetOpen.add(internetSetupImage);
    theInternetOpen.add(theInternetHelp);
    theInternetOpen.add(theInternetBack);
    theInternetOpen.add(theInternetNext);
    theInternetOpen.add(theInternetCancel);
    theInternetOpen.add(theInternetSeparator);
    // Setting up "Properties" in The Internet Popup Menu
    internetProperties = new JDialog();
    internetProperties.setLayout(null);
    internetProperties.setResizable(false);
    internetProperties.setSize(600, 700);
    internetProperties.setTitle("Internet Properties");
    /// Internet Properties Objects
    autoDialPanel = new JPanel();
    autoDialPanel.setLayout(null);
    internetAdvancedPanel = new JPanel();
    internetAdvancedPanel.setLayout(null);
    internetPropertiesButton = new JButton[5];
    internetPropertiesButton[0] = new JButton("OK");
    internetPropertiesButton[1] = new JButton("Cancel");
    internetPropertiesButton[2] = new JButton("Apply");
    internetPropertiesButton[3] = new JButton("Properties...");
    internetPropertiesButton[4] = new JButton("New Connection...");
    internetPropertiesButton[0].setBounds(240, 625, 100, 33);
    internetPropertiesButton[1].setBounds(355, 625, 100, 33);
    internetPropertiesButton[2].setBounds(470, 625, 100, 33);
    internetPropertiesButton[3].setBounds(20, 200, 145, 33);
    internetPropertiesButton[4].setBounds(180, 200, 145, 33);
    internetPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      internetProperties.add(internetPropertiesButton[i]);
    }
    for (int i = 3; i < 5; i++) {
      autoDialPanel.add(internetPropertiesButton[i]);
    }
    for (int i = 0; i < 5; i++) {
      internetPropertiesButton[i].addActionListener(this);
      internetPropertiesButton[i].setFont(MSSansSerif16);
    }
    internetPropertiesTabbedPane = new JTabbedPane();
    internetPropertiesTabbedPane.addTab("AutoDial", autoDialPanel);
    internetPropertiesTabbedPane.addTab("Advanced", internetAdvancedPanel);
    internetPropertiesPanel = new JPanel();
    internetPropertiesPanel.add(internetPropertiesTabbedPane);
    internetPropertiesPanel.setBorder(BorderFactory.createRaisedBevelBorder());
    internetPropertiesPanel.setBounds(10, 15, 550, 600);
    internetPropertiesPanel.setLayout(new GridLayout());
    internetPropertiesPanel.add(internetPropertiesTabbedPane);
    internetProperties.add(internetPropertiesPanel);
  }

  public void MSN_objectsMethod() {
    // Set up the Microsoft Network
    MSN = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN.png")));
    MSN.setBounds(5, 445, 92, 119);
    MSN.setToolTipText("The Microsoft Network");
    /// Set up the Microsoft Network Selected
    MSN_Selected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN_Selected.png")));
    MSN_Selected.setBounds(5, 445, 92, 119);
    MSN_Selected.setToolTipText("The Microsoft Network");
    //// Set up the Microsoft Network Objects
    MSN_OK = new JButton("OK");
    MSN_Cancel = new JButton("Cancel");
    MSN_OK.addActionListener(this);
    MSN_Cancel.addActionListener(this);
    MSN_OK.setBounds(680, 580, 110, 40);
    MSN_Cancel.setBounds(800, 580, 110, 40);
    MSN_OK.setFont(MSSansSerif16);
    MSN_Cancel.setFont(MSSansSerif16);
    MSN_Image = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN_Image.png")));
    MSN_Text = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN_Text.png")));
    MSN_Need = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN_Need.png")));
    MSN_Separator = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MSN_Separator.png")));
    MSN_Image.setBounds(0, 0, 260, 560);
    MSN_Text.setBounds(300, 0, 700, 400);
    MSN_Need.setBounds(300, 500, 690, 60);
    MSN_Separator.setBounds(20, 570, 950, 10);
    MSN_Yes = new JRadioButton("Yes, install the Microsoft Network.");
    MSN_No = new JRadioButton("No, do not install the Microsoft Network.");
    MSN_Yes.addActionListener(this);
    MSN_No.addActionListener(this);
    MSN_Yes.setBounds(330, 430, 350, 30);
    MSN_No.setBounds(330, 460, 350, 30);
    MSN_Yes.setFont(MSSansSerif16);
    MSN_No.setFont(MSSansSerif16);
    MSN_Yes.setSelected(true);
    MSN_ButtonGroup = new ButtonGroup();
    MSN_ButtonGroup.add(MSN_Yes);
    MSN_ButtonGroup.add(MSN_No);
    // Setting up "Open" in Set Up The Microsoft Network Popup Menu
    MSN_Open = new JDialog();
    MSN_Open.add(MSN_Image);
    MSN_Open.add(MSN_Text);
    MSN_Open.add(MSN_Need);
    MSN_Open.add(MSN_Separator);
    MSN_Open.add(MSN_OK);
    MSN_Open.add(MSN_Cancel);
    MSN_Open.add(MSN_Yes);
    MSN_Open.add(MSN_No);
    MSN_Open.getContentPane().setBackground(gray);
    MSN_Open.setAlwaysOnTop(true);
    MSN_Open.setBounds(50, 0, 1005, 655);
    MSN_Open.setLayout(null);
    MSN_Open.setTitle("The Microsoft Network");
    // Setting up "Properties" in Set Up The Microsoft Network Popup Menu
    MSN_Properties = new JDialog();
    MSN_Properties.setLayout(null);
    MSN_Properties.setResizable(false);
    MSN_Properties.setSize(600, 700);
    MSN_Properties.setTitle("Set Up The Microsoft Network Properties");
    /// Set Up The Microsoft Network Properties
    MSN_GeneralPanel = new JPanel();
    MSN_GeneralPanel.setLayout(null);
    MSN_ShortcutPanel = new JPanel();
    MSN_ShortcutPanel.setLayout(null);
    MSN_PropertiesButton = new JButton[5];
    MSN_PropertiesButton[0] = new JButton("OK");
    MSN_PropertiesButton[1] = new JButton("Cancel");
    MSN_PropertiesButton[2] = new JButton("Apply");
    MSN_PropertiesButton[3] = new JButton("Find Target...");
    MSN_PropertiesButton[4] = new JButton("Change Icon...");
    MSN_PropertiesButton[0].setBounds(240, 625, 100, 33);
    MSN_PropertiesButton[1].setBounds(355, 625, 100, 33);
    MSN_PropertiesButton[2].setBounds(470, 625, 100, 33);
    MSN_PropertiesButton[3].setBounds(260, 575, 140, 33);
    MSN_PropertiesButton[4].setBounds(420, 575, 140, 33);
    MSN_PropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      MSN_Properties.add(MSN_PropertiesButton[i]);
    }
    for (int i = 3; i < 5; i++) {
      MSN_ShortcutPanel.add(MSN_PropertiesButton[i]);
    }
    for (int i = 0; i < 5; i++) {
      MSN_PropertiesButton[i].addActionListener(this);
      MSN_PropertiesButton[i].setFont(MSSansSerif16);
    }
    MSN_PropertiesTabbedPane = new JTabbedPane(JTabbedPane.TOP);
    MSN_PropertiesTabbedPane.addTab("General", MSN_GeneralPanel);
    MSN_PropertiesTabbedPane.addTab("Shortcut", MSN_ShortcutPanel);
    MSN_PropertiesPanel = new JPanel();
    MSN_PropertiesPanel.add(MSN_PropertiesTabbedPane);
    MSN_PropertiesPanel.setBorder(BorderFactory.createRaisedBevelBorder());
    MSN_PropertiesPanel.setBounds(10, 15, 550, 600);
    MSN_PropertiesPanel.setLayout(new GridLayout());
    MSN_Properties.add(MSN_PropertiesPanel);
  }

  public void startMenuRunMethod() {
    // Start Menu Run Open
    startMenuRunOpen = new JDialog();
    startMenuRunOpen.setAlwaysOnTop(true);
    startMenuRunOpen.setBounds(0, 400, 520, 250);
    startMenuRunOpen.setLayout(null);
    startMenuRunOpen.setTitle("Run");
    runOpen = new JComboBox < String > ();
    runOpen.setBounds(80, 100, 415, 30);
    runOpen.setEditable(true);
    startMenuRunOpen.add(runOpen);
    runButton = new JButton[5];
    runOpen.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        if (!runOpen.getEditor().getItem().toString().equals("")) {
          runButton[3].doClick();
          runButton[0].setEnabled(true);
        } else if (runOpen.getEditor().getItem().toString().equals("")) {
          runButton[3].doClick();
          runButton[0].setEnabled(false);
        }
      }
    });
    runButton[0] = new JButton("OK");
    runButton[1] = new JButton("Cancel");
    runButton[2] = new JButton("Browse...");
    runButton[3] = new JButton("");
    runButton[0].setBounds(150, 165, 110, 33);
    runButton[1].setBounds(270, 165, 110, 33);
    runButton[2].setBounds(390, 165, 110, 33);
    runButton[3].setBounds(0, 0, 0, 0);
    runButton[0].setEnabled(false);
    for (int i = 0; i < 4; i++) {
      startMenuRunOpen.add(runButton[i]);
      runButton[i].addActionListener(this);
      runButton[i].setFont(MSSansSerif15);
    }
    runIcon = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("RunIcon.png")));
    runText = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("RunText.png")));
    runIcon.setBounds(10, 30, 70, 105);
    runText.setBounds(80, 30, 405, 42);
    startMenuRunOpen.add(runIcon);
    startMenuRunOpen.add(runText);
  }

  public void startMenuObjectsSelectAndDeselectMethod() {
    /// Start Menu Programs Objects Select and Deselect
    startMenuPrograms.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.add(startMenuProgramsSelected);
        desktop.revalidate();
        desktop.repaint();
        if (startMenuDocumentsDisplayed.getParent() != null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.remove(documentsReadme);
          desktop.remove(documentsReadmeSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.remove(settingsControlPanel);
          desktop.remove(settingsControlPanelSelected);
          desktop.remove(settingsPrinters);
          desktop.remove(settingsPrintersSelected);
          desktop.remove(settingsTaskbar);
          desktop.remove(settingsTaskbarSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.remove(findFilesOrFolders);
          desktop.remove(findFilesOrFoldersSelected);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    startMenuProgramsSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuProgramsSelected);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettings);
        desktop.add(startMenuProgramsDisplayed);
        desktop.add(startMenuDocumentsCovered);
        desktop.add(startMenuSettingsCovered);
        desktop.add(startMenuFind);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.add(startMenuProgramsSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuProgramsDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (startMenuDocumentsDisplayed.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsSelected.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsSelected.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFind.getParent() == null) {
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null && startMenuHelp.getParent() == null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuHelp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuRunSelected.getParent() != null && startMenuRun.getParent() == null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuShutDownSelected.getParent() != null && startMenuShutDown.getParent() != null) {
          desktop.remove(startMenuShutDownSelected);
          desktop.add(startMenuShutDown);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.add(programsAccessories);
        desktop.add(programsStartUp);
        desktop.add(programsMS_DOS_Prompt);
        desktop.add(programsWindowsExplorer);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsAccessories.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.add(programsAccessoriesSelected);
        desktop.revalidate();
        desktop.repaint();
        if (programsStartUpDisplayed.getParent() != null) {
          desktop.remove(programsStartUpDisplayed);
          desktop.add(programsStartUp);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    programsAccessoriesSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (programsStartUpDisplayed.getParent() != null) {
          desktop.remove(programsStartUpDisplayed);
          desktop.add(programsStartUp);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.add(programsAccessoriesDisplayed);
        desktop.add(programsMS_DOS_Prompt);
        desktop.add(programsWindowsExplorer);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(programsAccessoriesDisplayed);
        desktop.add(programsAccessoriesSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsAccessoriesDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (programsStartUpDisplayed.getParent() != null) {
          desktop.remove(programsStartUpDisplayed);
          desktop.add(programsStartUp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsMS_DOS_PromptSelected.getParent() != null) {
          desktop.remove(programsMS_DOS_PromptSelected);
          desktop.add(programsMS_DOS_Prompt);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsWindowsExplorerSelected.getParent() != null) {
          desktop.remove(programsWindowsExplorerSelected);
          desktop.add(programsWindowsExplorer);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.add(games);
        desktop.add(internetTools);
        desktop.add(accessoriesMultimedia);
        desktop.add(systemTools);
        desktop.add(accessoriesCalculator);
        desktop.add(accessoriesNotepad);
        desktop.add(accessoriesOnlineRegistration);
        desktop.add(accessoriesPaint);
        desktop.add(accessoriesWordPad);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    games.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(games);
        desktop.add(gamesSelected);
        desktop.revalidate();
        desktop.repaint();
        if (programsAccessories.getParent() != null) {
          desktop.remove(accessoriesCalculatorSelected);
          desktop.remove(accessoriesNotepadSelected);
          desktop.remove(accessoriesOnlineRegistrationSelected);
          desktop.remove(accessoriesPaintSelected);
          desktop.remove(accessoriesWordPadSelected);
          desktop.add(accessoriesCalculator);
          desktop.add(accessoriesNotepad);
          desktop.add(accessoriesOnlineRegistration);
          desktop.add(accessoriesPaint);
          desktop.add(accessoriesWordPad);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    gamesSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(gamesSelected);
        desktop.add(gamesDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.add(gamesFreeCell);
        desktop.add(gamesHearts);
        desktop.add(gamesMinesweeper);
        desktop.add(gamesSolitaire);
        desktop.revalidate();
        desktop.repaint();

      }
    });
    gamesFreeCell.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(gamesFreeCell);
        desktop.add(gamesFreeCellSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesFreeCellSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        freeCellOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(gamesFreeCellSelected);
        desktop.add(gamesFreeCell);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesHearts.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(gamesHearts);
        desktop.add(gamesHeartsSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesHeartsSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        heartsOpen.setVisible(true);
        heartsOpen.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        for (int i = 0; i < 2; i++) {
          heartsMenu[i].setEnabled(false);
        }
        heartsWelcome.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(gamesHeartsSelected);
        desktop.add(gamesHearts);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesMinesweeper.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(gamesMinesweeper);
        desktop.add(gamesMinesweeperSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesMinesweeperSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaire);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        minesweeperOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(gamesMinesweeperSelected);
        desktop.add(gamesMinesweeper);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesSolitaire.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(gamesSolitaire);
        desktop.add(gamesSolitaireSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesSolitaireSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        solitaireOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(gamesSolitaireSelected);
        desktop.add(gamesSolitaire);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetTools.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(internetTools);
        desktop.add(internetToolsSelected);
        desktop.revalidate();
        desktop.repaint();
        if (programsAccessories.getParent() != null) {
          desktop.remove(accessoriesCalculatorSelected);
          desktop.remove(accessoriesNotepadSelected);
          desktop.remove(accessoriesOnlineRegistrationSelected);
          desktop.remove(accessoriesPaintSelected);
          desktop.remove(accessoriesWordPadSelected);
          desktop.add(accessoriesCalculator);
          desktop.add(accessoriesNotepad);
          desktop.add(accessoriesOnlineRegistration);
          desktop.add(accessoriesPaint);
          desktop.add(accessoriesWordPad);
          desktop.revalidate();
          desktop.repaint();
        }
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    internetToolsSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(internetToolsSelected);
        desktop.add(internetToolsDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetToolsDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.add(internetToolsInternetExplorer);
        desktop.add(internetToolsInternetSetupWizard);
        desktop.revalidate();
        desktop.repaint();

      }
    });
    internetToolsInternetExplorer.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(internetToolsInternetExplorer);
        desktop.add(internetToolsInternetExplorerSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetToolsInternetExplorerSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        internetExplorerOpen.setVisible(true);
        internetExplorerOpen.setAlwaysOnTop(false);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        /*
         * internetExplorerMessage=new JLabel(); internetExplorerMessage.
         * setText("<html>Unable to find www.home.msn.com. The address may be incorrect.<br/>"
         * +
         * "Unable to open http://www.home.msn.com/. The item may have been moved to a<br/> "
         * +
         * "different address, or it may not be available right now. Please try again later."
         * ); internetExplorerMessagePanel=new JPanel();
         * internetExplorerMessagePanel.add(internetExplorerMessage);
         * internetExplorerMessagePanel.setBorder(BorderFactory.createBevelBorder(
         * BevelBorder.RAISED)); internetExplorerMessagePanel.setSize(500,100);
         */
        int responseInternetExplorerError = JOptionPane.showOptionDialog(null,
          "Unable to find www.home.msn.com. The address may be incorrect.\n" +
          "Unable to open http://www.home.msn.com/. The item may have been moved to a\n" +
          "different address, or it may not be available right now. Please try again later.",
          "Internet Explorer", JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
        if (responseInternetExplorerError == 0) {
          internetExplorerOpen.setAlwaysOnTop(true);
        } else {
          internetExplorerOpen.setAlwaysOnTop(true);
        }
      }
      public void mouseExited(MouseEvent e) {
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.add(internetToolsInternetExplorer);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetToolsInternetSetupWizard.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.add(internetToolsInternetSetupWizardSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetToolsInternetSetupWizardSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        theInternetOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.add(internetToolsInternetSetupWizard);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesMultimedia.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesMultimedia);
        desktop.add(accessoriesMultimediaSelected);
        desktop.revalidate();
        desktop.repaint();
        if (programsAccessories.getParent() != null) {
          desktop.remove(accessoriesCalculatorSelected);
          desktop.remove(accessoriesNotepadSelected);
          desktop.remove(accessoriesOnlineRegistrationSelected);
          desktop.remove(accessoriesPaintSelected);
          desktop.remove(accessoriesWordPadSelected);
          desktop.add(accessoriesCalculator);
          desktop.add(accessoriesNotepad);
          desktop.add(accessoriesOnlineRegistration);
          desktop.add(accessoriesPaint);
          desktop.add(accessoriesWordPad);
          desktop.revalidate();
          desktop.repaint();
        }
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    accessoriesMultimediaSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesMultimediaSelected);
        desktop.add(accessoriesMultimediaDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesMultimediaDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.add(multimediaMediaPlayer);
        desktop.add(multimediaSoundRecorder);
        desktop.add(multimediaVolumeControl);
        desktop.revalidate();
        desktop.repaint();

      }
    });
    multimediaMediaPlayer.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(multimediaMediaPlayer);
        desktop.add(multimediaMediaPlayerSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaMediaPlayerSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        mediaPlayerOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.add(multimediaMediaPlayer);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaSoundRecorder.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(multimediaSoundRecorder);
        desktop.add(multimediaSoundRecorderSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaSoundRecorderSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        soundRecorderOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.add(multimediaSoundRecorder);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaVolumeControl.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(multimediaVolumeControl);
        desktop.add(multimediaVolumeControlSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaVolumeControlSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        volumeControl.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(multimediaVolumeControlSelected);
        desktop.add(multimediaVolumeControl);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    systemTools.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(systemTools);
        desktop.add(systemToolsSelected);
        desktop.revalidate();
        desktop.repaint();
        if (programsAccessories.getParent() != null) {
          desktop.remove(accessoriesCalculatorSelected);
          desktop.remove(accessoriesNotepadSelected);
          desktop.remove(accessoriesOnlineRegistrationSelected);
          desktop.remove(accessoriesPaintSelected);
          desktop.remove(accessoriesWordPadSelected);
          desktop.add(accessoriesCalculator);
          desktop.add(accessoriesNotepad);
          desktop.add(accessoriesOnlineRegistration);
          desktop.add(accessoriesPaint);
          desktop.add(accessoriesWordPad);
          desktop.revalidate();
          desktop.repaint();
        }
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    systemToolsSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(systemToolsSelected);
        desktop.add(systemToolsDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    systemToolsDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.add(systemToolsScanDisk);
        desktop.revalidate();
        desktop.repaint();

      }
    });
    systemToolsScanDisk.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(systemToolsScanDisk);
        desktop.add(systemToolsScanDiskSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    systemToolsScanDiskSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        scanDiskOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(systemToolsScanDiskSelected);
        desktop.add(systemToolsScanDisk);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesCalculator.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesCalculator);
        desktop.add(accessoriesCalculatorSelected);
        desktop.revalidate();
        desktop.repaint();
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    accessoriesCalculatorSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(systemTools);
        desktop.remove(systemToolsCovered);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        calculatorOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(accessoriesCalculatorSelected);
        desktop.add(accessoriesCalculator);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesNotepad.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesNotepad);
        desktop.add(accessoriesNotepadSelected);
        desktop.revalidate();
        desktop.repaint();
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    accessoriesNotepadSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemTools);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        documentsReadmeTextArea.setText("");
        documentsReadme_txt.setTitle("Untitled - Notepad");
        documentsReadme_txt.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(accessoriesNotepadSelected);
        desktop.add(accessoriesNotepad);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesOnlineRegistration.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesOnlineRegistration);
        desktop.add(accessoriesOnlineRegistrationSelected);
        desktop.revalidate();
        desktop.repaint();
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    accessoriesOnlineRegistrationSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemTools);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        UIManager.put("OptionPane.yesButtonText", "Yes");
        UIManager.put("OptionPane.noButtonText", "No");
        int responseOnlineRegistration = JOptionPane.showConfirmDialog(null,
          "No modem is available on this system. If\n" + "you do not install a modem, you will not\n" +
          "be able to run this application. Would\n" + "you like to install one now?",
          "Registration Wizard", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
          onlineRegistrationIcon);
        if (responseOnlineRegistration == JOptionPane.YES_OPTION) {

        } else if (responseOnlineRegistration == JOptionPane.NO_OPTION) {
          JOptionPane.showOptionDialog(null, "The Registration Wizard requires that you\n" +
            "have a properly configured modem to\n" + "perform automatic registration. Since\n" +
            "such a modem could not be detected,\n" + "please fill out and return the registration\n" +
            "card that came with your product.", "Registration Wizard",
            JOptionPane.INFORMATION_MESSAGE, 0, onlineRegistrationIcon, OK, OK[0]);
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.add(accessoriesOnlineRegistration);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesPaint.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesPaint);
        desktop.add(accessoriesPaintSelected);
        desktop.revalidate();
        desktop.repaint();
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    accessoriesPaintSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemTools);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        paintOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(accessoriesPaintSelected);
        desktop.add(accessoriesPaint);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesWordPad.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(accessoriesWordPad);
        desktop.add(accessoriesWordPadSelected);
        desktop.revalidate();
        desktop.repaint();
        if (gamesDisplayed.getParent() != null) {
          desktop.remove(gamesDisplayed);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.add(games);
          desktop.revalidate();
          desktop.repaint();
        }
        if (internetToolsDisplayed.getParent() != null) {
          desktop.remove(internetToolsDisplayed);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.add(internetTools);
          desktop.revalidate();
          desktop.repaint();
        }
        if (accessoriesMultimediaDisplayed.getParent() != null) {
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.add(accessoriesMultimedia);
          desktop.revalidate();
          desktop.repaint();
        }
        if (systemToolsDisplayed.getParent() != null) {
          desktop.remove(systemToolsDisplayed);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.add(systemTools);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    accessoriesWordPadSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemTools);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.add(wordPadWarning);
        wordPadWarning.addMouseListener(new MouseAdapter() {
          public void mouseEntered(MouseEvent e) {
            mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            blueScreenOfDeathMethod();
          }
        });
        desktop.revalidate();
        desktop.repaint();

        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(accessoriesWordPadSelected);
        desktop.add(accessoriesWordPad);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsStartUp.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsStartUp);
        desktop.add(programsStartUpSelected);
        desktop.revalidate();
        desktop.repaint();
        if (programsAccessoriesDisplayed.getParent() != null) {
          desktop.remove(programsAccessoriesDisplayed);
          desktop.add(programsAccessories);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsMS_DOS_PromptSelected.getParent() != null) {
          desktop.remove(programsMS_DOS_PromptSelected);
          desktop.add(programsMS_DOS_Prompt);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    programsStartUpSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsStartUpSelected);
        desktop.add(programsStartUpDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(programsStartUpSelected);
        desktop.add(programsStartUp);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsStartUpDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (programsAccessoriesDisplayed.getParent() != null) {
          desktop.remove(programsAccessoriesDisplayed);
          desktop.add(programsAccessories);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsMS_DOS_PromptSelected.getParent() != null) {
          desktop.remove(programsMS_DOS_PromptSelected);
          desktop.add(programsMS_DOS_Prompt);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsWindowsExplorerSelected.getParent() != null) {
          desktop.remove(programsWindowsExplorerSelected);
          desktop.add(programsWindowsExplorer);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.add(startUpEmpty);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startUpEmpty.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startUpEmpty);
        desktop.add(startUpEmptySelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startUpEmptySelected.addMouseListener(new MouseAdapter() {
      public void mouseExited(MouseEvent e) {
        desktop.remove(startUpEmptySelected);
        desktop.add(startUpEmpty);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsMS_DOS_Prompt.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsMS_DOS_Prompt);
        desktop.add(programsMS_DOS_PromptSelected);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsMS_DOS_PromptSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemTools);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        MSDOSPromptOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseEntered(MouseEvent e) {
        if (programsStartUpDisplayed.getParent() != null) {
          desktop.remove(programsStartUpDisplayed);
          desktop.add(programsStartUp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsAccessoriesDisplayed.getParent() != null) {
          desktop.remove(programsAccessoriesDisplayed);
          desktop.add(programsAccessories);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.add(programsMS_DOS_Prompt);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsWindowsExplorer.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsWindowsExplorer);
        desktop.add(programsWindowsExplorerSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsWindowsExplorerSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuProgramsDisplayed);
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(games);
        desktop.remove(internetTools);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(systemTools);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        windowsExplorerOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseEntered(MouseEvent e) {
        if (programsStartUpDisplayed.getParent() != null) {
          desktop.remove(programsStartUpDisplayed);
          desktop.add(programsStartUp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (programsAccessoriesDisplayed.getParent() != null) {
          desktop.remove(programsAccessoriesDisplayed);
          desktop.add(programsAccessories);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(programsWindowsExplorerSelected);
        desktop.add(programsWindowsExplorer);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    /// Start Menu Documents Objects Select and Deselect
    startMenuDocuments.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuDocumentsCovered);
        desktop.add(startMenuDocumentsSelected);
        desktop.revalidate();
        desktop.repaint();
        if (startMenuProgramsDisplayed.getParent() != null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    startMenuDocumentsSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuDocumentsSelected);
        desktop.add(startMenuDocumentsDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(startMenuDocumentsSelected);
        desktop.add(startMenuDocuments);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuDocumentsSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(programsStartUpSelected);
        desktop.remove(programsStartUpDisplayed);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUpCovered);
        desktop.remove(programsMS_DOS_PromptCovered);
        desktop.remove(programsWindowsExplorerCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbar);
        desktop.remove(settingsControlPanelSelected);
        desktop.remove(settingsPrintersSelected);
        desktop.remove(settingsTaskbarSelected);

        desktop.remove(findFilesOrFolders);
        desktop.remove(findFilesOrFoldersSelected);

        if (startMenuProgramsDisplayed.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuProgramsSelected.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsSelected);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsSelected.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindSelected.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindSelected);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null && startMenuHelp.getParent() == null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuHelp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuRunSelected.getParent() != null && startMenuRun.getParent() == null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuShutDownSelected.getParent() != null && startMenuShutDown.getParent() != null) {
          desktop.remove(startMenuShutDownSelected);
          desktop.add(startMenuShutDown);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.add(documentsReadme);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuDocumentsCovered.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuDocumentsCovered);
        desktop.add(startMenuDocumentsDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    documentsReadme.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(documentsReadme);
        desktop.add(documentsReadmeSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    documentsReadmeSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(documentsReadmeSelected);
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocumentsDisplayed);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        documentsReadme_txt.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(documentsReadmeSelected);
        desktop.add(documentsReadme);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    /// Start Menu Settings Objects Select and Deselect
    startMenuSettings.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuSettingsCovered);
        desktop.add(startMenuSettingsSelected);
        desktop.revalidate();
        desktop.repaint();
        if (startMenuDocumentsDisplayed.getParent() != null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    startMenuSettingsSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuSettingsSelected);
        desktop.add(startMenuSettingsDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {

      }
    });
    startMenuSettingsDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(programsStartUpSelected);
        desktop.remove(programsStartUpDisplayed);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUpCovered);
        desktop.remove(programsMS_DOS_PromptCovered);
        desktop.remove(programsWindowsExplorerCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);

        desktop.remove(documentsReadme);
        desktop.remove(documentsReadmeSelected);

        desktop.remove(findFilesOrFolders);
        desktop.remove(findFilesOrFoldersSelected);

        if (startMenuProgramsDisplayed.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuProgramsSelected.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsSelected);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsDisplayed.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsSelected.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindSelected.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindSelected);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null && startMenuHelp.getParent() == null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuHelp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuRunSelected.getParent() != null && startMenuRun.getParent() == null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuShutDownSelected.getParent() != null && startMenuShutDown.getParent() != null) {
          desktop.remove(startMenuShutDownSelected);
          desktop.add(startMenuShutDown);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.add(settingsControlPanel);
        desktop.add(settingsPrinters);
        desktop.add(settingsTaskbar);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuSettingsCovered.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuSettingsCovered);
        desktop.add(startMenuSettingsDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    settingsControlPanel.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(settingsControlPanel);
        desktop.add(settingsControlPanelSelected);
        desktop.revalidate();
        desktop.repaint();
        if (settingsPrintersSelected.getParent() != null) {
          desktop.remove(settingsPrintersSelected);
          desktop.add(settingsPrinters);
          desktop.revalidate();
          desktop.repaint();
        }
        if (settingsTaskbarSelected.getParent() != null) {
          desktop.remove(settingsTaskbarSelected);
          desktop.add(settingsTaskbar);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    settingsControlPanelSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettingsDisplayed);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(settingsControlPanelSelected);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbar);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
          Thread.sleep(500);
        } catch (InterruptedException ex) {
          ex.printStackTrace();
        }
        mainFrame.getContentPane().setCursor(Cursor.getDefaultCursor());
        controlPanelOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(settingsControlPanelSelected);
        desktop.add(settingsControlPanel);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    settingsPrinters.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(settingsPrinters);
        desktop.add(settingsPrintersSelected);
        desktop.revalidate();
        desktop.repaint();
        if (settingsControlPanelSelected.getParent() != null) {
          desktop.remove(settingsControlPanelSelected);
          desktop.add(settingsControlPanel);
          desktop.revalidate();
          desktop.repaint();
        }
        if (settingsTaskbarSelected.getParent() != null) {
          desktop.remove(settingsTaskbarSelected);
          desktop.add(settingsTaskbar);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    settingsPrintersSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettingsDisplayed);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrintersSelected);
        desktop.remove(settingsTaskbar);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        desktop.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
          Thread.sleep(200);
        } catch (InterruptedException ex) {
          ex.printStackTrace();
        }
        desktop.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        printersOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(settingsPrintersSelected);
        desktop.add(settingsPrinters);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    settingsTaskbar.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(settingsTaskbar);
        desktop.add(settingsTaskbarSelected);
        desktop.revalidate();
        desktop.repaint();
        if (settingsControlPanelSelected.getParent() != null) {
          desktop.remove(settingsControlPanelSelected);
          desktop.add(settingsControlPanel);
          desktop.revalidate();
          desktop.repaint();
        }
        if (settingsPrintersSelected.getParent() != null) {
          desktop.remove(settingsPrintersSelected);
          desktop.add(settingsPrinters);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    settingsTaskbarSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettingsDisplayed);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbarSelected);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        taskbarProperties.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(settingsTaskbarSelected);
        desktop.add(settingsTaskbar);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    /// Start Menu Find Objects Select and Deselect
    startMenuFind.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuFind);
        desktop.add(startMenuFindSelected);
        desktop.revalidate();
        desktop.repaint();
        if (startMenuSettingsDisplayed.getParent() != null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    startMenuFindSelected.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuFindSelected);
        desktop.add(startMenuFindDisplayed);
        desktop.revalidate();
        desktop.repaint();
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(startMenuFindDisplayed);
        desktop.add(startMenuFind);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuFindDisplayed.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(programsStartUpSelected);
        desktop.remove(programsStartUpDisplayed);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUpCovered);
        desktop.remove(programsMS_DOS_PromptCovered);
        desktop.remove(programsWindowsExplorerCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);

        desktop.remove(documentsReadme);
        desktop.remove(documentsReadmeSelected);

        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbar);
        desktop.remove(settingsControlPanelSelected);
        desktop.remove(settingsPrintersSelected);
        desktop.remove(settingsTaskbarSelected);

        if (startMenuProgramsDisplayed.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuProgramsSelected.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsSelected);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsDisplayed.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsSelected.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsSelected.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null && startMenuHelp.getParent() == null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuHelp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuRunSelected.getParent() != null && startMenuRun.getParent() == null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuShutDownSelected.getParent() != null && startMenuShutDown.getParent() != null) {
          desktop.remove(startMenuShutDownSelected);
          desktop.add(startMenuShutDown);
          desktop.revalidate();
          desktop.repaint();
        }
        desktop.add(findFilesOrFolders);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    findFilesOrFolders.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(findFilesOrFolders);
        desktop.add(findFilesOrFoldersSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    findFilesOrFoldersSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFindDisplayed);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(findFilesOrFoldersSelected);
        desktop.remove(settingsTaskbarSelected);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        findAllFiles.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(findFilesOrFoldersSelected);
        desktop.add(findFilesOrFolders);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    /// Start Menu Other Objects Select and Deselect
    startMenuHelp.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuHelp);
        desktop.add(startMenuHelpSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuHelpSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelpSelected);
        desktop.remove(startMenuRun);
        desktop.remove(startMenuShutDown);
        desktop.remove(settingsTaskbar);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        shutDownWindowsHelp.setVisible(false);
        helpTopicsWindowsHelp.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(programsStartUpSelected);
        desktop.remove(programsStartUpDisplayed);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUpCovered);
        desktop.remove(programsMS_DOS_PromptCovered);
        desktop.remove(programsWindowsExplorerCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.remove(documentsReadme);
        desktop.remove(documentsReadmeSelected);
        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbar);
        desktop.remove(settingsControlPanelSelected);
        desktop.remove(settingsPrintersSelected);
        desktop.remove(settingsTaskbarSelected);
        desktop.remove(findFilesOrFolders);
        desktop.remove(findFilesOrFoldersSelected);
        desktop.revalidate();
        desktop.repaint();

        if (startMenuProgramsDisplayed.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuProgramsSelected.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsSelected);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsDisplayed.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsSelected.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindSelected.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindSelected);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsSelected.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuRunSelected.getParent() != null && startMenuRun.getParent() == null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuShutDownSelected.getParent() != null && startMenuShutDown.getParent() != null) {
          desktop.remove(startMenuShutDownSelected);
          desktop.add(startMenuShutDown);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(startMenuHelpSelected);
        desktop.add(startMenuHelp);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuRun.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuRun);
        desktop.add(startMenuRunSelected);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuRunSelected.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        desktop.remove(startMenuPrograms);
        desktop.remove(startMenuDocuments);
        desktop.remove(startMenuSettings);
        desktop.remove(startMenuFind);
        desktop.remove(startMenuHelp);
        desktop.remove(startMenuRunSelected);
        desktop.remove(startMenuShutDown);
        desktop.remove(settingsTaskbar);
        desktop.remove(startMenuButtonClicked);
        desktop.remove(taskbarOpen);
        desktop.add(startMenuButton);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
        startMenuRunOpen.setVisible(true);
        if (recycleBin.getParent() == null) {
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (theInternet.getParent() == null) {
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (MSN.getParent() == null) {
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(programsStartUpSelected);
        desktop.remove(programsStartUpDisplayed);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUpCovered);
        desktop.remove(programsMS_DOS_PromptCovered);
        desktop.remove(programsWindowsExplorerCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.remove(documentsReadme);
        desktop.remove(documentsReadmeSelected);
        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbar);
        desktop.remove(settingsControlPanelSelected);
        desktop.remove(settingsPrintersSelected);
        desktop.remove(settingsTaskbarSelected);
        desktop.remove(findFilesOrFolders);
        desktop.remove(findFilesOrFoldersSelected);
        desktop.revalidate();
        desktop.repaint();

        if (startMenuProgramsDisplayed.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuProgramsSelected.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsSelected);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsDisplayed.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsSelected.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindSelected.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindSelected);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsSelected.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null && startMenuHelp.getParent() == null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuHelp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuShutDownSelected.getParent() != null && startMenuShutDown.getParent() != null) {
          desktop.remove(startMenuShutDownSelected);
          desktop.add(startMenuShutDown);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(startMenuRunSelected);
        desktop.add(startMenuRun);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuShutDown.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        desktop.remove(startMenuShutDown);
        desktop.add(startMenuShutDownSelected);
        desktop.revalidate();
        desktop.repaint();
        if (startMenuRunSelected.getParent() != null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    startMenuShutDownSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          mainFrame.remove(desktop);
          mainFrame.add(shutDownDesktop);
          mainFrame.revalidate();
          mainFrame.repaint();
          shutDownWindowsDialog.setVisible(true);
        }
      }

      public void mouseEntered(MouseEvent e) {
        desktop.remove(programsAccessories);
        desktop.remove(programsStartUp);
        desktop.remove(programsMS_DOS_Prompt);
        desktop.remove(programsWindowsExplorer);
        desktop.remove(programsAccessoriesSelected);
        desktop.remove(programsStartUpSelected);
        desktop.remove(programsStartUpDisplayed);
        desktop.remove(startUpEmpty);
        desktop.remove(startUpEmptySelected);
        desktop.remove(programsMS_DOS_PromptSelected);
        desktop.remove(programsWindowsExplorerSelected);
        desktop.remove(programsAccessoriesDisplayed);
        desktop.remove(programsStartUpCovered);
        desktop.remove(programsMS_DOS_PromptCovered);
        desktop.remove(programsWindowsExplorerCovered);
        desktop.remove(accessoriesCalculator);
        desktop.remove(accessoriesNotepad);
        desktop.remove(accessoriesOnlineRegistration);
        desktop.remove(accessoriesPaint);
        desktop.remove(accessoriesWordPad);
        desktop.remove(accessoriesCalculatorSelected);
        desktop.remove(accessoriesNotepadSelected);
        desktop.remove(accessoriesOnlineRegistrationSelected);
        desktop.remove(accessoriesPaintSelected);
        desktop.remove(accessoriesWordPadSelected);
        desktop.remove(games);
        desktop.remove(gamesSelected);
        desktop.remove(gamesDisplayed);
        desktop.remove(gamesFreeCell);
        desktop.remove(gamesHearts);
        desktop.remove(gamesMinesweeper);
        desktop.remove(gamesSolitaire);
        desktop.remove(gamesFreeCellSelected);
        desktop.remove(gamesHeartsSelected);
        desktop.remove(gamesMinesweeperSelected);
        desktop.remove(gamesSolitaireSelected);
        desktop.remove(internetTools);
        desktop.remove(internetToolsSelected);
        desktop.remove(internetToolsDisplayed);
        desktop.remove(internetToolsInternetExplorer);
        desktop.remove(internetToolsInternetSetupWizard);
        desktop.remove(internetToolsInternetExplorerSelected);
        desktop.remove(internetToolsInternetSetupWizardSelected);
        desktop.remove(accessoriesMultimedia);
        desktop.remove(accessoriesMultimediaSelected);
        desktop.remove(accessoriesMultimediaDisplayed);
        desktop.remove(multimediaMediaPlayer);
        desktop.remove(multimediaSoundRecorder);
        desktop.remove(multimediaVolumeControl);
        desktop.remove(multimediaMediaPlayerSelected);
        desktop.remove(multimediaSoundRecorderSelected);
        desktop.remove(multimediaVolumeControlSelected);
        desktop.remove(systemTools);
        desktop.remove(systemToolsSelected);
        desktop.remove(systemToolsDisplayed);
        desktop.remove(systemToolsScanDisk);
        desktop.remove(systemToolsScanDiskSelected);
        desktop.remove(documentsReadme);
        desktop.remove(documentsReadmeSelected);
        desktop.remove(settingsControlPanel);
        desktop.remove(settingsPrinters);
        desktop.remove(settingsTaskbar);
        desktop.remove(settingsControlPanelSelected);
        desktop.remove(settingsPrintersSelected);
        desktop.remove(settingsTaskbarSelected);
        desktop.remove(findFilesOrFolders);
        desktop.remove(findFilesOrFoldersSelected);
        desktop.revalidate();
        desktop.repaint();

        if (startMenuProgramsDisplayed.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsDisplayed);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuProgramsSelected.getParent() != null && startMenuPrograms.getParent() == null) {
          desktop.remove(startMenuProgramsSelected);
          desktop.add(startMenuPrograms);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsDisplayed.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsSelected.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsSelected);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuDocumentsCovered.getParent() != null && startMenuDocuments.getParent() == null) {
          desktop.remove(startMenuDocumentsCovered);
          desktop.add(startMenuDocuments);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindDisplayed.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindDisplayed);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuFindSelected.getParent() != null && startMenuFind.getParent() == null) {
          desktop.remove(startMenuFindSelected);
          desktop.add(startMenuFind);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsDisplayed.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsDisplayed);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsSelected.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsSelected);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuSettingsCovered.getParent() != null && startMenuSettings.getParent() == null) {
          desktop.remove(startMenuSettingsCovered);
          desktop.add(startMenuSettings);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuHelpSelected.getParent() != null && startMenuHelp.getParent() == null) {
          desktop.remove(startMenuHelpSelected);
          desktop.add(startMenuHelp);
          desktop.revalidate();
          desktop.repaint();
        }
        if (startMenuRunSelected.getParent() != null && startMenuRun.getParent() == null) {
          desktop.remove(startMenuRunSelected);
          desktop.add(startMenuRun);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseExited(MouseEvent e) {
        desktop.remove(startMenuShutDownSelected);
        desktop.add(startMenuShutDown);
        desktop.revalidate();
        desktop.repaint();
      }
    });
  }

  public void startMenuObjectsMethod() {
    // Start Menu Objects
    startMenuButton = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuButton.png")));
    startMenuButtonClicked = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuButtonClicked.png")));
    startMenuButtonClickedTwice = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuButtonClickedTwice.png")));
    /// Start Menu Programs Objects
    startMenuPrograms = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuPrograms.png")));
    programsAccessories = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsAccessories.png")));
    programsStartUp = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ProgramsStartUp.png")));
    programsMS_DOS_Prompt = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsMS-DOS_Prompt.png")));
    programsWindowsExplorer = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsWindowsExplorer.png")));
    //// Start Menu Programs Accessories Objects
    games = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Games.png")));
    gamesFreeCell = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GamesFreeCell.png")));
    gamesHearts = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GamesHearts.png")));
    gamesMinesweeper = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GamesMinesweeper.png")));
    gamesSolitaire = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GamesSolitaire.png")));
    internetTools = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InternetTools.png")));
    internetToolsInternetExplorer = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsInternetExplorer.png")));
    internetToolsInternetSetupWizard = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsInternetSetupWizard.png")));
    accessoriesMultimedia = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesMultimedia.png")));
    multimediaMediaPlayer = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaMediaPlayer.png")));
    multimediaSoundRecorder = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaSoundRecorder.png")));
    multimediaVolumeControl = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaVolumeControl.png")));
    systemTools = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SystemTools.png")));
    systemToolsScanDisk = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemToolsScanDisk.png")));
    accessoriesCalculator = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesCalculator.png")));
    accessoriesNotepad = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesNotepad.png")));
    accessoriesOnlineRegistration = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesOnlineRegistration.png")));
    accessoriesPaint = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AccessoriesPaint.png")));
    accessoriesWordPad = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesWordPad.png")));
    //// Start Menu Programs StartUp Object
    startUpEmpty = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartupEmpty.png")));
    /// Start Menu Documents Objects
    startMenuDocuments = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuDocuments.png")));
    documentsReadme = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DocumentsReadme.png")));
    /// Start Menu Settings Objects
    startMenuSettings = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuSettings.png")));
    settingsControlPanel = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SettingsControlPanel.png")));
    settingsPrinters = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SettingsPrinters.png")));
    settingsTaskbar = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SettingsTaskbar.png")));
    /// Start Menu Find Objects
    startMenuFind = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuFind.png")));
    findFilesOrFolders = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FindFilesOrFolders.png")));
    /// Start Menu Other Objects
    startMenuHelp = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuHelp.png")));
    startMenuRun = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuRun.png")));
    startMenuShutDown = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("StartMenuShutDown.png")));
    /// Start Menu Programs Selected Objects
    startMenuProgramsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuProgramsSelected.png")));
    programsAccessoriesSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsAccessoriesSelected.png")));
    programsStartUpSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsStartUpSelected.png")));
    programsMS_DOS_PromptSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsMS-DOS_PromptSelected.png")));
    programsWindowsExplorerSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsWindowsExplorerSelected.png")));
    //// Start Menu Programs Accessories Selected Objects
    gamesSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GamesSelected.png")));
    gamesFreeCellSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("GamesFreeCellSelected.png")));
    gamesHeartsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("GamesHeartsSelected.png")));
    gamesMinesweeperSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("GamesMinesweeperSelected.png")));
    gamesSolitaireSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("GamesSolitaireSelected.png")));
    internetToolsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsSelected.png")));
    internetToolsInternetExplorerSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsInternetExplorerSelected.png")));
    internetToolsInternetSetupWizardSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsInternetSetupWizardSelected.png")));
    accessoriesMultimediaSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesMultimediaSelected.png")));
    multimediaMediaPlayerSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaMediaPlayerSelected.png")));
    multimediaSoundRecorderSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaSoundRecorderSelected.png")));
    multimediaVolumeControlSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaVolumeControlSelected.png")));
    systemToolsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemToolsSelected.png")));
    systemToolsScanDiskSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemToolsScanDiskSelected.png")));
    accessoriesCalculatorSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesCalculatorSelected.png")));
    accessoriesNotepadSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesNotepadSelected.png")));
    accessoriesOnlineRegistrationSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesOnlineRegistrationSelected.png")));
    accessoriesPaintSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesPaintSelected.png")));
    accessoriesWordPadSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesWordPadSelected.png")));
    //// Start Menu Programs StartUp Selected Object
    startUpEmptySelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartupEmptySelected.png")));
    /// Start Menu Documents Selected Objects
    startMenuDocumentsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuDocumentsSelected.png")));
    documentsReadmeSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DocumentsReadmeSelected.png")));
    /// Start Menu Settings Selected Objects
    startMenuSettingsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuSettingsSelected.png")));
    settingsControlPanelSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SettingsControlPanelSelected.png")));
    settingsPrintersSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SettingsPrintersSelected.png")));
    settingsTaskbarSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SettingsTaskbarSelected.png")));
    /// Start Menu Find Selected Objects
    startMenuFindSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuFindSelected.png")));
    findFilesOrFoldersSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FindFilesOrFoldersSelected.png")));
    /// Start Menu Other Selected Objects
    startMenuHelpSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuHelpSelected.png")));
    startMenuRunSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuRunSelected.png")));
    startMenuShutDownSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuShutDownSelected.png")));
    /// Start Menu Displayed Objects
    startMenuProgramsDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuProgramsDisplayed.png")));
    programsAccessoriesDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsAccessoriesDisplayed.png")));
    programsStartUpDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsStartUpDisplayed.png")));
    startMenuDocumentsDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuDocumentsDisplayed.png")));
    startMenuSettingsDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuSettingsDisplayed.png")));
    startMenuFindDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuFindDisplayed.png")));
    /// Start Menu Accessories Displayed Objects
    gamesDisplayed = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("GamesDisplayed.png")));
    internetToolsDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsDisplayed.png")));
    accessoriesMultimediaDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesMultimediaDisplayed.png")));
    systemToolsDisplayed = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemToolsDisplayed.png")));
    /// Start Menu Covered Objects
    startMenuDocumentsCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuDocumentsCovered.png")));
    startMenuSettingsCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuSettingsCovered.png")));
    startMenuFindCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("StartMenuFindCovered.png")));
    // Start Menu Programs Accessories Covered Objects
    internetToolsCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InternetToolsCovered.png")));
    accessoriesMultimediaCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesMultimediaCovered.png")));
    systemToolsCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemToolsCovered.png")));
    accessoriesCalculatorCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesCalculatorCovered.png")));
    programsStartUpCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsStartUpCovered.png")));
    programsMS_DOS_PromptCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsMS-DOS_PromptCovered.png")));
    programsWindowsExplorerCovered = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ProgramsWindowsExplorerCovered.png")));
    // Start Menu Buttons Set Bounds
    startMenuButton.setBounds(0, 661, 88, 38);
    startMenuButtonClicked.setBounds(0, 661, 88, 38);
    startMenuButtonClickedTwice.setBounds(0, 661, 88, 38);
    /// Start Menu Programs Objects Set Bounds
    startMenuPrograms.setBounds(0, 300, 252, 50);
    programsAccessories.setBounds(245, 300, 219, 37);
    programsStartUp.setBounds(245, 337, 219, 31);
    programsMS_DOS_Prompt.setBounds(245, 368, 219, 30);
    programsWindowsExplorer.setBounds(245, 398, 219, 37);
    //// Start Menu Programs Accessories Objects Set Bounds
    games.setBounds(458, 300, 206, 34);
    gamesFreeCell.setBounds(661, 300, 170, 34);
    gamesHearts.setBounds(661, 334, 170, 28);
    gamesMinesweeper.setBounds(661, 362, 170, 28);
    gamesSolitaire.setBounds(661, 390, 170, 35);
    internetTools.setBounds(458, 334, 206, 28);
    internetToolsInternetExplorer.setBounds(661, 334, 246, 36);
    internetToolsInternetSetupWizard.setBounds(661, 370, 246, 36);
    accessoriesMultimedia.setBounds(458, 362, 206, 29);
    multimediaMediaPlayer.setBounds(661, 362, 191, 33);
    multimediaSoundRecorder.setBounds(661, 395, 191, 28);
    multimediaVolumeControl.setBounds(661, 423, 191, 33);
    systemTools.setBounds(458, 391, 206, 28);
    systemToolsScanDisk.setBounds(661, 391, 146, 39);
    accessoriesCalculator.setBounds(458, 419, 206, 28);
    accessoriesNotepad.setBounds(458, 447, 206, 28);
    accessoriesOnlineRegistration.setBounds(458, 475, 206, 28);
    accessoriesPaint.setBounds(458, 503, 206, 28);
    accessoriesWordPad.setBounds(458, 531, 206, 34);
    //// Start Menu Programs StartUp Object Set Bounds
    startUpEmpty.setBounds(458, 338, 149, 39);
    /// Start Menu Documents Objects Set Bounds
    startMenuDocuments.setBounds(0, 350, 252, 50);
    documentsReadme.setBounds(245, 350, 139, 39);
    /// Start Menu Settings Objects Set Bounds
    startMenuSettings.setBounds(0, 400, 252, 50);
    settingsControlPanel.setBounds(245, 400, 180, 33);
    settingsPrinters.setBounds(245, 433, 180, 29);
    settingsTaskbar.setBounds(245, 462, 180, 33);
    /// Start Menu Find Objects Set Bounds
    startMenuFind.setBounds(0, 450, 252, 50);
    findFilesOrFolders.setBounds(245, 450, 219, 43);
    /// Start Menu Other Objects Set Bounds
    startMenuHelp.setBounds(0, 500, 252, 50);
    startMenuRun.setBounds(0, 550, 252, 55);
    startMenuShutDown.setBounds(0, 600, 252, 63);
    /// Start Menu Programs Selected Objects Set Bounds
    startMenuProgramsSelected.setBounds(0, 300, 252, 53);
    programsAccessoriesSelected.setBounds(245, 300, 219, 37);
    programsStartUpSelected.setBounds(245, 337, 219, 31);
    programsMS_DOS_PromptSelected.setBounds(245, 368, 219, 30);
    programsWindowsExplorerSelected.setBounds(245, 398, 219, 37);
    //// Start Menu Programs Accessories Selected Objects Set Bounds
    gamesSelected.setBounds(458, 300, 206, 34);
    gamesFreeCellSelected.setBounds(661, 300, 170, 34);
    gamesHeartsSelected.setBounds(661, 334, 170, 28);
    gamesMinesweeperSelected.setBounds(661, 362, 170, 28);
    gamesSolitaireSelected.setBounds(661, 390, 170, 35);
    internetToolsSelected.setBounds(458, 334, 206, 28);
    internetToolsInternetExplorerSelected.setBounds(661, 334, 246, 36);
    internetToolsInternetSetupWizardSelected.setBounds(661, 370, 246, 36);
    accessoriesMultimediaSelected.setBounds(458, 362, 206, 29);
    multimediaMediaPlayerSelected.setBounds(661, 362, 191, 33);
    multimediaSoundRecorderSelected.setBounds(661, 395, 191, 28);
    multimediaVolumeControlSelected.setBounds(661, 423, 191, 33);
    systemToolsSelected.setBounds(458, 391, 206, 28);
    systemToolsScanDiskSelected.setBounds(661, 391, 146, 39);
    accessoriesCalculatorSelected.setBounds(458, 419, 206, 28);
    accessoriesNotepadSelected.setBounds(458, 447, 206, 28);
    accessoriesOnlineRegistrationSelected.setBounds(458, 475, 206, 28);
    accessoriesPaintSelected.setBounds(458, 503, 206, 28);
    accessoriesWordPadSelected.setBounds(458, 531, 206, 34);
    //// Start Menu Programs StartUp Selected Object Set Bounds
    startUpEmptySelected.setBounds(458, 338, 149, 39);
    /// Start Menu Documents Selected Objects Set Bounds
    startMenuDocumentsSelected.setBounds(0, 350, 252, 50);
    documentsReadmeSelected.setBounds(245, 350, 139, 39);
    /// Start Menu Settings Selected Objects Set Bounds
    startMenuSettingsSelected.setBounds(0, 400, 252, 50);
    settingsControlPanelSelected.setBounds(245, 400, 180, 33);
    settingsPrintersSelected.setBounds(245, 433, 180, 29);
    settingsTaskbarSelected.setBounds(245, 462, 180, 34);
    /// Start Menu Find Selected Objects Set Bounds
    startMenuFindSelected.setBounds(0, 450, 252, 50);
    findFilesOrFoldersSelected.setBounds(245, 450, 219, 43);
    /// Start Menu Other Selected Objects Set Bounds
    startMenuHelpSelected.setBounds(0, 500, 252, 50);
    startMenuRunSelected.setBounds(0, 550, 252, 55);
    startMenuShutDownSelected.setBounds(0, 600, 252, 63);
    /// Start Menu Displayed Objects Set Bounds
    startMenuProgramsDisplayed.setBounds(0, 300, 245, 50);
    programsAccessoriesDisplayed.setBounds(245, 300, 214, 37);
    programsStartUpDisplayed.setBounds(245, 337, 214, 31);
    gamesDisplayed.setBounds(458, 300, 203, 34);
    internetToolsDisplayed.setBounds(458, 334, 203, 28);
    accessoriesMultimediaDisplayed.setBounds(458, 362, 203, 29);
    systemToolsDisplayed.setBounds(458, 391, 203, 28);
    startMenuDocumentsDisplayed.setBounds(0, 350, 252, 50);
    startMenuSettingsDisplayed.setBounds(0, 400, 245, 50);
    startMenuFindDisplayed.setBounds(0, 450, 245, 50);
    /// Start Menu Covered Objects Set Bounds
    programsStartUpCovered.setBounds(295, 338, 283, 35);
    programsMS_DOS_PromptCovered.setBounds(295, 373, 283, 35);
    programsWindowsExplorerCovered.setBounds(295, 408, 283, 35);
    startMenuDocumentsCovered.setBounds(0, 350, 245, 50);
    startMenuSettingsCovered.setBounds(0, 400, 245, 50);
    startMenuFindCovered.setBounds(0, 450, 245, 50);
    internetToolsCovered.setBounds(528, 338, 283, 35);
    accessoriesMultimediaCovered.setBounds(572, 373, 283, 35);
    systemToolsCovered.setBounds(528, 411, 283, 35);
    accessoriesCalculatorCovered.setBounds(528, 446, 283, 33);
  }

  public void freeCellMethod() {
    /// Start Menu -> Programs -> Accessories -> Games -> FreeCell
    freeCellIcon = new ImageIcon(getClass().getClassLoader().getResource("FreeCellIcon.png"));
    freeCellOpen = new JFrame();
    freeCellOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        freeCellPanel.remove(freeCellPokerFaceLeft);
        freeCellPanel.add(freeCellPokerFaceRight);
        freeCellPanel.revalidate();
        freeCellPanel.repaint();
      }
    });
    freeCellOpen.setBounds(0, 0, 1290, 700);
    freeCellOpen.setIconImage(freeCellIcon.getImage());
    freeCellOpen.setTitle("FreeCell");
    freeCellMenuBar = new JMenuBar();
    freeCellMenu = new JMenu[2];
    freeCellMenu[0] = new JMenu("Game");
    freeCellMenu[1] = new JMenu("Help");
    for (int i = 0; i < 2; i++) {
      freeCellMenu[i].setFont(MSSansSerif16);
      freeCellMenuBar.add(freeCellMenu[i]);
    }
    freeCellSeparator = new JSeparator[4];
    for (int i = 0; i < 4; i++) {
      freeCellSeparator[i] = new JSeparator();
    }
    freeCellMenuItem = new JMenuItem[9];
    freeCellMenuItem[0] = new JMenuItem("New Game");
    freeCellMenuItem[0].setAccelerator(F2);
    freeCellMenuItem[1] = new JMenuItem("Select Game...");
    freeCellMenuItem[1].setAccelerator(F3);
    freeCellMenuItem[2] = new JMenuItem("Restart Game");
    freeCellMenuItem[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      freeCellMenu[0].add(freeCellMenuItem[i]);
    }
    freeCellMenu[0].add(freeCellSeparator[0]);
    freeCellMenuItem[3] = new JMenuItem("Statistics...");
    freeCellMenuItem[3].setAccelerator(F4);
    freeCellMenuItem[4] = new JMenuItem("Options...");
    freeCellMenuItem[4].setAccelerator(F5);
    for (int i = 3; i < 5; i++) {
      freeCellMenu[0].add(freeCellMenuItem[i]);
    }
    freeCellMenu[0].add(freeCellSeparator[1]);
    freeCellMenuItem[5] = new JMenuItem("Undo");
    freeCellMenuItem[5].setAccelerator(F10);
    freeCellMenuItem[5].setEnabled(false);
    freeCellMenu[0].add(freeCellMenuItem[5]);
    freeCellMenu[0].add(freeCellSeparator[2]);
    freeCellMenuItem[6] = new JMenuItem("Exit");
    freeCellMenu[0].add(freeCellMenuItem[6]);
    freeCellMenuItem[7] = new JMenuItem("Help Topics");
    freeCellMenu[1].add(freeCellMenuItem[7]);
    freeCellMenu[1].add(freeCellSeparator[3]);
    freeCellMenuItem[8] = new JMenuItem("About FreeCell");
    freeCellMenu[1].add(freeCellMenuItem[8]);
    for (int i = 0; i < 9; i++) {
      freeCellMenuItem[i].addActionListener(this);
      freeCellMenuItem[i].setFont(MSSansSerif16);
    }
    freeCellOpen.add(freeCellMenuBar, BorderLayout.NORTH);
    freeCellBackgroundGreen = new Color(0, 130, 0);
    freeCellLeftRow = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("FreeCellLeftRow.png")));
    freeCellRightRow = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("FreeCellRightRow.png")));
    freeCellPokerFaceLeft = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FreeCellPokerFaceLeft.png")));
    freeCellPokerFaceRight = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FreeCellPokerFaceRight.png")));
    freeCellLeftRow.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        freeCellPanel.remove(freeCellPokerFaceRight);
        freeCellPanel.add(freeCellPokerFaceLeft);
        freeCellPanel.revalidate();
        freeCellPanel.repaint();
      }
    });
    freeCellRightRow.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        freeCellPanel.remove(freeCellPokerFaceLeft);
        freeCellPanel.add(freeCellPokerFaceRight);
        freeCellPanel.revalidate();
        freeCellPanel.repaint();
      }
    });
    freeCellLeftRow.setBounds(0, 0, 578, 165);
    freeCellRightRow.setBounds(710, 0, 578, 165);
    freeCellPokerFaceLeft.setBounds(600, 20, 88, 88);
    freeCellPokerFaceRight.setBounds(600, 20, 88, 88);
    freeCellPanel = new JPanel();
    freeCellPanel.add(freeCellLeftRow);
    freeCellPanel.add(freeCellRightRow);
    freeCellPanel.add(freeCellPokerFaceRight);
    freeCellPanel.setLayout(null);
    freeCellPanel.setBackground(freeCellBackgroundGreen);
    freeCellOpen.add(freeCellPanel);
    freeCellStatistics = new JDialog();
    freeCellStatistics.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    freeCellStatistics.setLayout(null);
    freeCellStatistics.setLocationRelativeTo(null);
    freeCellStatistics.setSize(500, 450);
    freeCellStatistics.setTitle("FreeCell Statistics");
    freeCellStatisticsData = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FreeCellStatisticsData.png")));
    freeCellStatisticsData.setBounds(0, 0, 430, 360);
    freeCellStatistics.add(freeCellStatisticsData);
    freeCellStatisticsButton = new JButton[2];
    freeCellStatisticsButton[0] = new JButton("OK");
    freeCellStatisticsButton[1] = new JButton("Clear");
    freeCellStatisticsButton[0].setBounds(30, 370, 80, 25);
    freeCellStatisticsButton[1].setBounds(210, 370, 80, 25);
    for (int i = 0; i < 2; i++) {
      freeCellStatisticsButton[i].addActionListener(this);
      freeCellStatisticsButton[i].setFont(MSSansSerif16);
      freeCellStatistics.add(freeCellStatisticsButton[i]);
    }
    freeCellOptions = new JDialog();
    freeCellOptions.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    freeCellOptions.setLayout(null);
    freeCellOptions.setLocationRelativeTo(null);
    freeCellOptions.setSize(500, 180);
    freeCellOptions.setTitle("FreeCell Options");
    freeCellOptionsButton = new JButton[2];
    freeCellOptionsButton[0] = new JButton("OK");
    freeCellOptionsButton[1] = new JButton("Cancel");
    freeCellOptionsButton[0].setBounds(400, 20, 80, 25);
    freeCellOptionsButton[1].setBounds(400, 60, 80, 25);
    for (int i = 0; i < 2; i++) {
      freeCellOptionsButton[i].addActionListener(this);
      freeCellOptionsButton[i].setFont(MSSansSerif16);
      freeCellOptions.add(freeCellOptionsButton[i]);
    }
    freeCellOptionsCheckBox = new JCheckBox[3];
    freeCellOptionsCheckBox[0] = new JCheckBox("Display messages on illegal moves");
    freeCellOptionsCheckBox[0].setSelected(true);
    freeCellOptionsCheckBox[1] = new JCheckBox("Quick play (no animation)");
    freeCellOptionsCheckBox[2] = new JCheckBox("Double click moves card to free cell");
    freeCellOptionsCheckBox[2].setSelected(true);
    freeCellOptionsCheckBox[0].setBounds(20, 20, 300, 30);
    freeCellOptionsCheckBox[1].setBounds(20, 60, 300, 30);
    freeCellOptionsCheckBox[2].setBounds(20, 100, 300, 30);
    for (int i = 0; i < 3; i++) {
      freeCellOptionsCheckBox[i].addActionListener(this);
      freeCellOptionsCheckBox[i].setFont(MSSansSerif16);
      freeCellOptions.add(freeCellOptionsCheckBox[i]);
    }
  }

  public void heartsMethod() {
    /// Start Menu -> Programs -> Accessories -> Games -> Hearts
    heartsIcon = new ImageIcon(getClass().getClassLoader().getResource("HeartsIcon.png"));
    heartsOpen = new JFrame();
    heartsOpen.setBounds(50, 0, 800, 800);
    heartsOpen.setIconImage(heartsIcon.getImage());
    heartsOpen.setResizable(false);
    heartsOpen.setTitle("The Microsoft Hearts Network");
    heartsBackgroundGreen = new Color(0, 130, 0);
    heartsPanel = new JPanel();
    heartsPanel.setBackground(heartsBackgroundGreen);
    heartsOpen.add(heartsPanel);
    heartsWelcome = new JDialog();
    heartsWelcome.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        heartsWelcome.dispose();
        heartsOpen.dispose();
      }
    });
    heartsWelcome.setAlwaysOnTop(true);
    heartsWelcome.setBounds(75, 150, 500, 300);
    heartsWelcome.setLayout(null);
    heartsWelcome.setTitle("The Microsoft Hearts Network");
    heartsWelcomeButton = new JButton[2];
    heartsWelcomeButton[0] = new JButton("OK");
    heartsWelcomeButton[1] = new JButton("Quit");
    heartsWelcomeButton[0].setBounds(400, 20, 80, 25);
    heartsWelcomeButton[1].setBounds(400, 60, 80, 25);
    heartsButtonGroup = new ButtonGroup();
    heartsWelcomeRadioButton = new JRadioButton[2];
    heartsWelcomeRadioButton[0] = new JRadioButton("I want to connect to another game");
    heartsWelcomeRadioButton[1] = new JRadioButton("I want to be dealer");
    heartsWelcomeRadioButton[0].setBounds(50, 170, 300, 30);
    heartsWelcomeRadioButton[1].setBounds(50, 205, 300, 30);
    for (int i = 0; i < 2; i++) {
      heartsWelcomeButton[i].addActionListener(this);
      heartsWelcomeButton[i].setFont(MSSansSerif16);
      heartsWelcome.add(heartsWelcomeButton[i]);
      heartsWelcomeRadioButton[i].addActionListener(this);
      heartsWelcomeRadioButton[i].setEnabled(false);
      heartsWelcomeRadioButton[i].setFont(MSSansSerif16);
      heartsButtonGroup.add(heartsWelcomeRadioButton[i]);
      heartsWelcome.add(heartsWelcomeRadioButton[i]);
    }
    heartsWelcomeTextField = new JTextField();
    heartsWelcomeTextField.setBounds(200, 60, 150, 30);
    heartsWelcome.add(heartsWelcomeTextField);
    heartsWelcomeText = new JLabel[3];
    heartsWelcomeText[0] = new JLabel("Welcome to the Microsoft Hearts Network.");
    heartsWelcomeText[1] = new JLabel("What is your name?");
    heartsWelcomeText[2] = new JLabel("How do you want to play?");
    heartsWelcomeText[2].setEnabled(false);
    heartsWelcomeText[0].setBounds(50, 20, 400, 30);
    heartsWelcomeText[1].setBounds(50, 60, 400, 30);
    heartsWelcomeText[2].setBounds(50, 120, 300, 30);
    for (int i = 0; i < 3; i++) {
      heartsWelcomeText[i].setFont(MSSansSerif16);
      heartsWelcome.add(heartsWelcomeText[i]);
    }
    heartsMenu = new JMenu[2];
    heartsMenu[0] = new JMenu("Game");
    heartsMenu[1] = new JMenu("Help");
    heartsMenuBar = new JMenuBar();
    for (int i = 0; i < 2; i++) {
      heartsMenu[i].setFont(MSSansSerif16);
      heartsMenuBar.add(heartsMenu[i]);
    }
    heartsSeparator = new JSeparator[3];
    for (int i = 0; i < 3; i++) {
      heartsSeparator[i] = new JSeparator();
    }
    heartsMenuItem = new JMenuItem[7];
    heartsMenuItem[0] = new JMenuItem("New Game");
    heartsMenuItem[0].setAccelerator(F2);
    heartsMenuItem[0].setEnabled(false);
    heartsMenu[0].add(heartsMenuItem[0]);
    heartsMenu[0].add(heartsSeparator[0]);
    heartsMenuItem[1] = new JMenuItem("Options...");
    heartsMenuItem[1].setAccelerator(F7);
    heartsMenu[0].add(heartsMenuItem[1]);
    heartsCheckBoxMenuItem = new JCheckBoxMenuItem("Sound");
    heartsCheckBoxMenuItem.setAccelerator(F8);
    heartsMenu[0].add(heartsCheckBoxMenuItem);
    heartsMenuItem[2] = new JMenuItem("Score...");
    heartsMenuItem[2].setAccelerator(F9);
    heartsMenu[0].add(heartsMenuItem[2]);
    heartsMenu[0].add(heartsSeparator[1]);
    heartsMenuItem[3] = new JMenuItem("Exit");
    heartsMenu[0].add(heartsMenuItem[3]);
    heartsMenuItem[4] = new JMenuItem("Help Topics");
    heartsMenu[1].add(heartsMenuItem[4]);
    heartsMenu[1].add(heartsSeparator[2]);
    heartsMenuItem[5] = new JMenuItem("Quote...");
    heartsMenuItem[6] = new JMenuItem("About Hearts");
    for (int i = 5; i < 7; i++) {
      heartsMenu[1].add(heartsMenuItem[i]);
    }
    for (int i = 0; i < 7; i++) {
      heartsMenuItem[i].addActionListener(this);
      heartsMenuItem[i].setFont(MSSansSerif16);
    }
    heartsOpen.add(heartsMenuBar, BorderLayout.NORTH);
    heartsOptions = new JDialog();
    heartsOptions.setBounds(50, 0, 200, 200);
    heartsOptions.setLayout(null);
    heartsOptions.setTitle("Hearts Options");
    heartsOptionsButton = new JButton[2];
    heartsOptionsButton[0] = new JButton("OK");
    heartsOptionsButton[1] = new JButton("Cancel");
    heartsOptionsText = new JLabel[2];
    heartsOptionsText[0] = new JLabel("Animation speed");
    heartsOptionsText[1] = new JLabel("Computer player names");
    for (int i = 0; i < 2; i++) {
      heartsOptionsButton[i].addActionListener(this);
      heartsOptionsButton[i].setFont(MSSansSerif16);
      heartsOptionsText[i].setFont(MSSansSerif16);
      heartsOptions.add(heartsOptionsButton[i]);
      heartsOptions.add(heartsOptionsText[i]);
    }
    heartsOptionsRadioButton = new JRadioButton[3];
    heartsOptionsRadioButton[0] = new JRadioButton("Slow");
    heartsOptionsRadioButton[1] = new JRadioButton("Normal");
    heartsOptionsRadioButton[2] = new JRadioButton("Fast");
    heartsOptionsTextField = new JTextField[3];
    heartsOptionsTextField[0] = new JTextField("Pauline");
    heartsOptionsTextField[1] = new JTextField("Michele");
    heartsOptionsTextField[2] = new JTextField("Ben");
    for (int i = 0; i < 3; i++) {
      heartsOptionsRadioButton[i].addActionListener(this);
      heartsOptionsRadioButton[i].setFont(MSSansSerif16);
      heartsOptionsTextField[i].setFont(MSSansSerif16);
      heartsOptions.add(heartsOptionsRadioButton[i]);
      heartsOptions.add(heartsOptionsRadioButton[i]);
    }
    heartsScoreSheet = new JDialog();
    heartsScoreSheet.setBounds(50, 0, 200, 200);
    heartsScoreSheet.setLayout(null);
    heartsScoreSheet.setTitle("Score Sheet");
    heartsScoreSheetOK = new JButton("OK");
    heartsScoreSheetOK.setBounds(500, 50, 80, 25);
    heartsScoreSheet.add(heartsScoreSheetOK);
    heartsQuote = new JDialog();
    heartsQuote.setBounds(50, 0, 200, 200);
    heartsQuote.setLayout(null);
    heartsQuote.setTitle("Quote for The Microsoft Hearts Network");
    heartsQuoteOK = new JButton("OK");
    heartsQuoteOK.setBounds(300, 200, 80, 25);
    heartsQuote.add(heartsQuoteOK);
    heartsAbout = new JDialog();
    heartsAbout.setBounds(50, 0, 200, 200);
    heartsAbout.setLayout(null);
    heartsAbout.setTitle("About Hearts Network");
    heartsAboutOK = new JButton("OK");
    heartsAbout.add(heartsAboutOK);
  }

  public void minesweeperMethod() {
    // Declaring Minesweeper Variables
    final int cellSize = 15, coverForCell = 10, markforCell = 10, emptyCell = 0, mineCell = 9,
      coveredMineCell = mineCell + coverForCell;
    /// Start Menu -> Programs -> Accessories -> Games -> Minesweeper
    minesweeperIcon = new ImageIcon(getClass().getClassLoader().getResource("MinesweeperIcon.png"));
    minesweeperOpen = new JFrame();
    minesweeperOpen.setAlwaysOnTop(true);
    minesweeperOpen.setBounds(50, 0, 270, 360);
    minesweeperOpen.setIconImage(minesweeperIcon.getImage());
    // minesweeperOpen.setResizable(false);
    minesweeperOpen.setTitle("Minesweeper");
    minesweeperMenu = new JMenu[2];
    minesweeperMenu[0] = new JMenu("Game");
    minesweeperMenu[1] = new JMenu("Help");
    minesweeperMenuBar = new JMenuBar();
    for (int i = 0; i < 2; i++) {
      minesweeperMenu[i].setFont(MSSansSerif16);
      minesweeperMenuBar.add(minesweeperMenu[i]);
    }
    minesweeperSeparator = new JSeparator[5];
    for (int i = 0; i < 5; i++) {
      minesweeperSeparator[i] = new JSeparator();
    }
    minesweeperMenuItem = new JMenuItem[5];
    minesweeperMenuItem[0] = new JMenuItem("New");
    minesweeperMenuItem[0].setAccelerator(F2);
    minesweeperMenu[0].add(minesweeperMenuItem[0]);
    minesweeperMenu[0].add(minesweeperSeparator[0]);
    minesweeperCheckBoxMenuItem = new JCheckBoxMenuItem[6];
    minesweeperCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Beginner");
    minesweeperCheckBoxMenuItem[0].setSelected(true);
    minesweeperCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Intermediate");
    minesweeperCheckBoxMenuItem[2] = new JCheckBoxMenuItem("Expert");
    minesweeperCheckBoxMenuItem[3] = new JCheckBoxMenuItem("Custom...");
    for (int i = 0; i < 4; i++) {
      minesweeperMenu[0].add(minesweeperCheckBoxMenuItem[i]);
    }
    minesweeperMenu[0].add(minesweeperSeparator[1]);
    minesweeperCheckBoxMenuItem[4] = new JCheckBoxMenuItem("Marks (?)");
    minesweeperCheckBoxMenuItem[5] = new JCheckBoxMenuItem("Color");
    for (int i = 4; i < 6; i++) {
      minesweeperCheckBoxMenuItem[i].setSelected(true);
      minesweeperMenu[0].add(minesweeperCheckBoxMenuItem[i]);
    }
    minesweeperMenu[0].add(minesweeperSeparator[2]);
    for (int i = 0; i < 6; i++) {
      minesweeperCheckBoxMenuItem[i].addActionListener(this);
      minesweeperCheckBoxMenuItem[i].setFont(MSSansSerif16);
    }
    minesweeperMenuItem[1] = new JMenuItem("Best Times");
    minesweeperMenu[0].add(minesweeperMenuItem[1]);
    minesweeperMenu[0].add(minesweeperSeparator[3]);
    minesweeperMenuItem[2] = new JMenuItem("Exit");
    minesweeperMenu[0].add(minesweeperMenuItem[2]);
    minesweeperMenuItem[3] = new JMenuItem("Help Topics");
    minesweeperMenu[1].add(minesweeperMenuItem[3]);
    minesweeperMenu[1].add(minesweeperSeparator[4]);
    minesweeperMenuItem[4] = new JMenuItem("About Minesweeper");
    minesweeperMenu[1].add(minesweeperMenuItem[4]);
    for (int i = 0; i < 5; i++) {
      minesweeperMenuItem[i].addActionListener(this);
      minesweeperMenuItem[i].setFont(MSSansSerif16);
    }
    minesweeperOpen.add(minesweeperMenuBar, BorderLayout.NORTH);
    minesweeperPanel = new JPanel();
    minesweeperPanel.setBackground(gray);
    minesweeperPanel.setLayout(null);
    minesweeperOpen.add(minesweeperPanel);
    minesweeperCounter = new JLabel[2];
    minesweeperCounter[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MineSweeperFlagCounter.png")));
    minesweeperCounter[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MineSweeperTimeCounter.png")));
    minesweeperCounter[0].setBounds(0, 50, 95, 59);
    minesweeperCounter[1].setBounds(200, 50, 95, 59);
    for (int i = 0; i < 2; i++) {
      minesweeperPanel.add(minesweeperCounter[i]);
    }
    minesweeperFace = new JLabel[4];
    minesweeperFace[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MinesweeperSmileyFace.png")));
    minesweeperFace[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MinesweeperPressedFace.png")));
    minesweeperFace[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MinesweeperDeathFace.png")));
    minesweeperChangeFaceURL = this.getClass().getClassLoader().getResource("MinesweeperChangeFace.gif");
    minesweeperFace[3] = new JLabel(new ImageIcon(minesweeperChangeFaceURL));
    try {
      minesweeperRobot = new Robot();
    } catch (AWTException e1) {
      e1.printStackTrace();
    }
    minesweeperFace[0].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        minesweeperPanel.remove(minesweeperFace[0]);
        minesweeperPanel.add(minesweeperFace[1]);
        minesweeperPanel.revalidate();
        minesweeperPanel.repaint();
      }

      public void mouseReleased(MouseEvent e) {
        minesweeperPanel.remove(minesweeperFace[1]);
        minesweeperPanel.add(minesweeperFace[0]);
        minesweeperPanel.revalidate();
        minesweeperPanel.repaint();
      }
    });
    for (int i = 0; i < 4; i++) {
      minesweeperFace[i].setBounds(100, 50, 59, 59);
    }
    minesweeperPanel.add(minesweeperFace[0]);
    minesweeperMine = new JLabel[2];
    minesweeperMine[0] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MineRevealed.png")));
    minesweeperMine[1] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MineHit.png")));
  }

  public void solitaireMethod() {
    /// Start Menu -> Programs -> Accessories -> Games -> Solitaire
    solitaireIcon = new ImageIcon(getClass().getClassLoader().getResource("SolitaireIcon.png"));
    solitaireOpen = new JFrame();
    solitaireBackgroundGreen = new Color(0, 130, 0);
    solitairePanel = new JPanel();
    solitairePanel.setBackground(solitaireBackgroundGreen);
    solitaireOpen.add(solitairePanel);
    solitaireOpen.setAlwaysOnTop(true);
    solitaireOpen.setBounds(50, 0, 820, 600);
    solitaireOpen.setIconImage(solitaireIcon.getImage());
    solitaireOpen.setTitle("Solitaire");
    solitaireMenuBar = new JMenuBar();
    solitaireMenu = new JMenu[2];
    solitaireMenu[0] = new JMenu("Game");
    solitaireMenu[1] = new JMenu("Help");
    for (int i = 0; i < 2; i++) {
      solitaireMenu[i].setFont(MSSansSerif16);
      solitaireMenuBar.add(solitaireMenu[i]);
    }
    solitaireSeparator = new JSeparator[3];
    for (int i = 0; i < 3; i++) {
      solitaireSeparator[i] = new JSeparator();
    }
    solitaireMenuItem = new JMenuItem[7];
    solitaireMenuItem[0] = new JMenuItem("Deal");
    solitaireMenu[0].add(solitaireMenuItem[0]);
    solitaireMenu[0].add(solitaireSeparator[0]);
    solitaireMenuItem[1] = new JMenuItem("Undo");
    solitaireMenuItem[1].setEnabled(false);
    solitaireMenuItem[2] = new JMenuItem("Deck...");
    solitaireMenuItem[3] = new JMenuItem("Options...");
    for (int i = 1; i < 4; i++) {
      solitaireMenu[0].add(solitaireMenuItem[i]);
    }
    solitaireMenu[0].add(solitaireSeparator[1]);
    solitaireMenuItem[4] = new JMenuItem("Exit");
    solitaireMenu[0].add(solitaireMenuItem[4]);
    solitaireMenuItem[5] = new JMenuItem("Help Topics");
    solitaireMenu[1].add(solitaireMenuItem[5]);
    solitaireMenu[1].add(solitaireSeparator[2]);
    solitaireMenuItem[6] = new JMenuItem("About Solitaire");
    solitaireMenu[1].add(solitaireMenuItem[6]);
    for (int i = 0; i < 7; i++) {
      solitaireMenuItem[i].addActionListener(this);
      solitaireMenuItem[i].setFont(MSSansSerif16);
    }
    solitaireOpen.add(solitaireMenuBar, BorderLayout.NORTH);
  }

  public void internetExplorerMethod() {
    /// Start Menu -> Programs -> Accessories -> Internet Tool -> Internet Explorer
    internetExplorerIcon = new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerIcon.png"));
    internetExplorerOpen = new JFrame();
    internetExplorerOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        if (internetExplorerOpen.getExtendedState() == JFrame.MAXIMIZED_BOTH) {
          internetExplorerOpen.setAlwaysOnTop(false);
        }
      }
    });
    internetExplorerOpen.setAlwaysOnTop(true);
    internetExplorerOpen.setBounds(50, 0, 650, 200);
    internetExplorerOpen.setIconImage(internetExplorerIcon.getImage());
    internetExplorerOpen.setTitle("Microsoft Internet Explorer - [No Document]");
    internetExplorerMenuBar = new JMenuBar();
    internetExplorerMenu = new JMenu[6];
    internetExplorerMenu[0] = new JMenu("File");
    internetExplorerMenu[1] = new JMenu("Edit");
    internetExplorerMenu[2] = new JMenu("View");
    internetExplorerMenu[3] = new JMenu("Favorites");
    internetExplorerMenu[4] = new JMenu("Help");
    for (int i = 0; i < 5; i++) {
      internetExplorerMenuBar.add(internetExplorerMenu[i]);
    }
    internetExplorerMenu[5] = new JMenu("Fonts");
    for (int i = 0; i < 6; i++) {
      internetExplorerMenu[i].setFont(MSSansSerif16);
    }
    internetExplorerSeparator = new JSeparator[14];
    for (int i = 0; i < 14; i++) {
      internetExplorerSeparator[i] = new JSeparator();
    }
    internetExplorerMenuItem = new JMenuItem[27];
    internetExplorerMenuItem[0] = new JMenuItem("Open...");
    internetExplorerMenuItem[0].setAccelerator(ctrlO);
    internetExplorerMenuItem[1] = new JMenuItem("Open Start Page");
    internetExplorerMenuItem[2] = new JMenuItem("Save As...");
    for (int i = 0; i < 3; i++) {
      internetExplorerMenu[0].add(internetExplorerMenuItem[i]);
    }
    internetExplorerMenu[0].add(internetExplorerSeparator[0]);
    internetExplorerMenuItem[2].setAccelerator(ctrlS);
    internetExplorerMenuItem[3] = new JMenuItem("Page Setup...");
    internetExplorerMenuItem[4] = new JMenuItem("Print");
    internetExplorerMenuItem[4].setAccelerator(ctrlP);
    for (int i = 3; i < 5; i++) {
      internetExplorerMenu[0].add(internetExplorerMenuItem[i]);
    }
    internetExplorerMenu[0].add(internetExplorerSeparator[1]);
    internetExplorerMenuItem[5] = new JMenuItem("Create Shortcut");
    internetExplorerMenu[0].add(internetExplorerMenuItem[5]);
    internetExplorerMenu[0].add(internetExplorerSeparator[2]);
    internetExplorerMenuItem[6] = new JMenuItem("Exit");
    internetExplorerMenu[0].add(internetExplorerMenuItem[6]);
    internetExplorerMenu[0].add(internetExplorerSeparator[3]);
    internetExplorerMenuItem[7] = new JMenuItem("More History...");
    internetExplorerMenu[0].add(internetExplorerMenuItem[7]);
    for (int i = 1; i < 5; i++) {
      if (i == 3) {
        continue;
      }
      internetExplorerMenuItem[i].setEnabled(false);
    }
    internetExplorerMenuItem[8] = new JMenuItem("Cut");
    internetExplorerMenuItem[8].setAccelerator(ctrlX);
    internetExplorerMenuItem[9] = new JMenuItem("Copy");
    internetExplorerMenuItem[9].setAccelerator(ctrlC);
    internetExplorerMenuItem[10] = new JMenuItem("Paste");
    internetExplorerMenuItem[10].setAccelerator(ctrlV);
    for (int i = 8; i < 11; i++) {
      internetExplorerMenu[1].add(internetExplorerMenuItem[i]);
    }
    internetExplorerMenu[1].add(internetExplorerSeparator[4]);
    internetExplorerMenuItem[11] = new JMenuItem("Select All");
    internetExplorerMenuItem[11].setAccelerator(ctrlA);
    internetExplorerMenu[1].add(internetExplorerMenuItem[11]);
    internetExplorerMenu[1].add(internetExplorerSeparator[5]);
    internetExplorerMenuItem[12] = new JMenuItem("Find...");
    internetExplorerMenuItem[12].setAccelerator(ctrlF);
    internetExplorerMenu[1].add(internetExplorerMenuItem[12]);
    internetExplorerMenuItem[13] = new JMenuItem("Back");
    internetExplorerMenuItem[13].setAccelerator(backspace);
    internetExplorerMenuItem[14] = new JMenuItem("Forward");
    for (int i = 13; i < 15; i++) {
      internetExplorerMenu[2].add(internetExplorerMenuItem[i]);
    }
    internetExplorerMenu[2].add(internetExplorerSeparator[6]);
    for (int i = 8; i < 15; i++) {
      internetExplorerMenuItem[i].setEnabled(false);
    }
    internetExplorerCheckBoxMenuItem = new JCheckBoxMenuItem[8];
    internetExplorerCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    internetExplorerCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Address Bar");
    internetExplorerCheckBoxMenuItem[2] = new JCheckBoxMenuItem("Status Bar");
    for (int i = 0; i < 3; i++) {
      internetExplorerCheckBoxMenuItem[i].setSelected(true);
      internetExplorerMenu[2].add(internetExplorerCheckBoxMenuItem[i]);
    }
    internetExplorerMenu[2].add(internetExplorerSeparator[7]);
    internetExplorerCheckBoxMenuItem[3] = new JCheckBoxMenuItem("Largest");
    internetExplorerCheckBoxMenuItem[4] = new JCheckBoxMenuItem("Large");
    internetExplorerCheckBoxMenuItem[5] = new JCheckBoxMenuItem("Medium");
    internetExplorerCheckBoxMenuItem[5].setSelected(true);
    internetExplorerCheckBoxMenuItem[6] = new JCheckBoxMenuItem("Small");
    internetExplorerCheckBoxMenuItem[7] = new JCheckBoxMenuItem("Smallest");
    for (int i = 3; i < 8; i++) {
      internetExplorerMenu[5].add(internetExplorerCheckBoxMenuItem[i]);
    }
    for (int i = 0; i < 8; i++) {
      internetExplorerCheckBoxMenuItem[i].addActionListener(this);
      internetExplorerCheckBoxMenuItem[i].setFont(MSSansSerif16);
    }
    internetExplorerMenu[2].add(internetExplorerMenu[5]);
    internetExplorerMenu[2].add(internetExplorerSeparator[8]);
    internetExplorerMenuItem[15] = new JMenuItem("Stop");
    internetExplorerMenuItem[16] = new JMenuItem("Refresh");
    internetExplorerMenuItem[16].setEnabled(false);
    for (int i = 15; i < 17; i++) {
      internetExplorerMenu[2].add(internetExplorerMenuItem[i]);
    }
    internetExplorerMenu[2].add(internetExplorerSeparator[9]);
    internetExplorerMenuItem[17] = new JMenuItem("Options...");
    internetExplorerMenu[2].add(internetExplorerMenuItem[17]);
    internetExplorerMenuItem[18] = new JMenuItem("Add To Favorites...");
    internetExplorerMenuItem[18].setEnabled(false);
    internetExplorerMenuItem[19] = new JMenuItem("Open Favorites...");
    for (int i = 18; i < 20; i++) {
      internetExplorerMenu[3].add(internetExplorerMenuItem[i]);
    }
    internetExplorerMenu[3].add(internetExplorerSeparator[10]);
    internetExplorerMenuItem[20] = new JMenuItem("(Empty)");
    internetExplorerMenu[3].add(internetExplorerMenuItem[20]);
    internetExplorerMenuItem[20].setEnabled(false);
    internetExplorerMenuItem[21] = new JMenuItem("Help Topics");
    internetExplorerMenu[4].add(internetExplorerMenuItem[21]);
    internetExplorerMenu[4].add(internetExplorerSeparator[11]);
    internetExplorerMenuItem[22] = new JMenuItem("About Internet Explorer");
    internetExplorerMenu[4].add(internetExplorerMenuItem[22]);
    for (int i = 0; i < 23; i++) {
      internetExplorerMenuItem[i].addActionListener(this);
      internetExplorerMenuItem[i].setFont(MSSansSerif16);
    }
    internetExplorerOpen.add(internetExplorerMenuBar, BorderLayout.NORTH);
    internetExplorerPageUp = new JPanel();
    internetExplorerPageUp.setBackground(gray);
    internetExplorerScrollPane = new JScrollPane(internetExplorerPageUp);
    internetExplorerScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    internetExplorerScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    internetExplorerOpen.getContentPane().add(internetExplorerScrollPane);
    internetExplorerToolbar = new JPanel();
    internetExplorerToolbar.setLayout(new FlowLayout(FlowLayout.LEFT));
    internetExplorerToolbarButton = new JButton[13];
    for (int i = 0; i < 13; i++) {
      internetExplorerToolbarButton[i] = new JButton();
      internetExplorerToolbarButton[i].addActionListener(this);
      internetExplorerToolbarButton[i].setFocusable(false);
      internetExplorerToolbarButton[i].setSize(20, 20);
      internetExplorerToolbar.add(internetExplorerToolbarButton[i]);
    }
    internetExplorerToolbarButton[0]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarOpen.png")));
    internetExplorerToolbarButton[0].setToolTipText("Open...");
    internetExplorerToolbarButton[1].setIcon(
      new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarOpenStartPage.png")));
    internetExplorerToolbarButton[1].setToolTipText("Open Start Page");
    internetExplorerToolbarButton[2]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarBack.png")));
    internetExplorerToolbarButton[2].setToolTipText("Back");
    internetExplorerToolbarButton[3]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarForward.png")));
    internetExplorerToolbarButton[3].setToolTipText("Forward");
    internetExplorerToolbarButton[4]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarStop.png")));
    internetExplorerToolbarButton[4].setToolTipText("Stop");
    internetExplorerToolbarButton[5]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarRefresh.png")));
    internetExplorerToolbarButton[5].setToolTipText("Refresh");
    internetExplorerToolbarButton[6].setIcon(
      new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarOpenFavorites.png")));
    internetExplorerToolbarButton[6].setToolTipText("Open Favorites");
    internetExplorerToolbarButton[7].setIcon(
      new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarAddToFavorites.png")));
    internetExplorerToolbarButton[7].setToolTipText("Add To Favorites...");
    internetExplorerToolbarButton[8].setIcon(new ImageIcon(
      getClass().getClassLoader().getResource("InternetExplorerToolbarUseLargerFontDisabled.png")));
    internetExplorerToolbarButton[8].setToolTipText("Use Larger Font");
    internetExplorerToolbarButton[9].setIcon(
      new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarUseSmallerFont.png")));
    internetExplorerToolbarButton[9].setToolTipText("Use Smaller Font");
    internetExplorerToolbarButton[10]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarCut.png")));
    internetExplorerToolbarButton[10].setToolTipText("Cut");
    internetExplorerToolbarButton[11]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarCopy.png")));
    internetExplorerToolbarButton[11].setToolTipText("Copy");
    internetExplorerToolbarButton[12]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("InternetExplorerToolbarPaste.png")));
    internetExplorerToolbarButton[12].setToolTipText("Paste");
    for (int i = 2; i < 9; i++) {
      if (i == 4 || i == 6) {
        continue;
      }
      internetExplorerToolbarButton[i].setEnabled(false);
    }
    internetExplorerPageUp.add(internetExplorerToolbar, BorderLayout.WEST);
    internetExplorerAddress = new JComboBox < String > ();
    internetExplorerAddress.addItem("http://www.home.msn.com");
    internetExplorerAddress.setEditable(true);
    internetExplorerAddress.setSize(600, 100);
    internetExplorerPageDown = new JPanel();
    internetExplorerPageDown.add(internetExplorerAddress, BorderLayout.NORTH);
    internetExplorerPageUp.add(internetExplorerPageDown);
  }

  public void mediaPlayerMethod() {
    /// Start Menu -> Programs -> Accessories -> Multimedia -> Media Player
    mediaPlayerIcon = new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerIcon.png"));
    mediaPlayerOpen = new JFrame();
    mediaPlayerOpen.setAlwaysOnTop(true);
    mediaPlayerOpen.setBounds(50, 0, 562, 175);
    mediaPlayerOpen.setIconImage(mediaPlayerIcon.getImage());
    mediaPlayerOpen.setResizable(false);
    mediaPlayerOpen.setTitle("Media Player");
    mediaPlayerMenuBar = new JMenuBar();
    mediaPlayerMenu = new JMenu[5];
    mediaPlayerMenu[0] = new JMenu("File");
    mediaPlayerMenu[1] = new JMenu("Edit");
    mediaPlayerMenu[2] = new JMenu("Device");
    mediaPlayerMenu[3] = new JMenu("Scale");
    mediaPlayerMenu[4] = new JMenu("Help");
    mediaPlayerSeparator = new JSeparator[5];
    for (int i = 0; i < 5; i++) {
      mediaPlayerMenu[i].setFont(MSSansSerif16);
      mediaPlayerMenuBar.add(mediaPlayerMenu[i]);
      mediaPlayerSeparator[i] = new JSeparator();
    }
    mediaPlayerMenuItem = new JMenuItem[16];
    mediaPlayerMenuItem[0] = new JMenuItem("Open...");
    mediaPlayerMenuItem[1] = new JMenuItem("Close");
    mediaPlayerMenuItem[1].setEnabled(false);
    for (int i = 0; i < 2; i++) {
      mediaPlayerMenu[0].add(mediaPlayerMenuItem[i]);
    }
    mediaPlayerMenu[0].add(mediaPlayerSeparator[0]);
    mediaPlayerMenuItem[2] = new JMenuItem("Exit");
    mediaPlayerMenu[0].add(mediaPlayerMenuItem[2]);
    mediaPlayerMenuItem[3] = new JMenuItem("Copy Object");
    mediaPlayerMenuItem[3].setAccelerator(ctrlC);
    mediaPlayerMenu[1].add(mediaPlayerMenuItem[3]);
    mediaPlayerMenu[1].add(mediaPlayerSeparator[1]);
    mediaPlayerMenuItem[4] = new JMenuItem("Options");
    mediaPlayerMenuItem[4].setAccelerator(ctrlO);
    mediaPlayerMenuItem[5] = new JMenuItem("Selection");
    for (int i = 4; i < 6; i++) {
      mediaPlayerMenu[1].add(mediaPlayerMenuItem[i]);
    }
    for (int i = 3; i < 6; i++) {
      mediaPlayerMenuItem[i].setEnabled(false);
    }
    mediaPlayerMenuItem[6] = new JMenuItem("1 Video for Windows...");
    mediaPlayerMenuItem[7] = new JMenuItem("2 Sound...");
    mediaPlayerMenuItem[8] = new JMenuItem("3 MIDI Sequencer...");
    for (int i = 6; i < 9; i++) {
      mediaPlayerMenu[2].add(mediaPlayerMenuItem[i]);
    }
    mediaPlayerMenu[2].add(mediaPlayerSeparator[2]);
    mediaPlayerMenuItem[9] = new JMenuItem("Properties");
    mediaPlayerMenuItem[9].setEnabled(false);
    mediaPlayerMenu[2].add(mediaPlayerMenuItem[9]);
    mediaPlayerMenu[2].add(mediaPlayerSeparator[3]);
    mediaPlayerMenuItem[10] = new JMenuItem("Volume Control");
    mediaPlayerMenu[2].add(mediaPlayerMenuItem[10]);
    mediaPlayerMenuItem[11] = new JMenuItem("Time");
    mediaPlayerMenuItem[12] = new JMenuItem("Frames");
    mediaPlayerMenuItem[13] = new JMenuItem("Tracks");
    for (int i = 11; i < 14; i++) {
      mediaPlayerMenuItem[i].setEnabled(false);
      mediaPlayerMenu[3].add(mediaPlayerMenuItem[i]);
    }
    mediaPlayerMenuItem[14] = new JMenuItem("Help Topics");
    mediaPlayerMenu[4].add(mediaPlayerMenuItem[14]);
    mediaPlayerMenu[4].add(mediaPlayerSeparator[4]);
    mediaPlayerMenuItem[15] = new JMenuItem("About Media Player");
    mediaPlayerMenu[4].add(mediaPlayerMenuItem[15]);
    for (int i = 0; i < 16; i++) {
      mediaPlayerMenuItem[i].addActionListener(this);
      mediaPlayerMenuItem[i].setFont(MSSansSerif16);
    }
    mediaPlayerOpen.add(mediaPlayerMenuBar, BorderLayout.NORTH);
    //Media Player Contents
    mediaPlayerPanel = new JPanel();
    mediaPlayerPanel.setBounds(0, 0, 562, 175);
    mediaPlayerPanel.setLayout(null);
    mediaPlayerLabel = new JLabel[3];
    mediaPlayerLabel[0] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerSlider.png")));
    mediaPlayerLabel[1] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerSliderSelected.png")));
    mediaPlayerLabel[2] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerSeparator.png")));
    mediaPlayerLabel[0].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        mediaPlayerPanel.remove(mediaPlayerLabel[0]);
        mediaPlayerPanel.add(mediaPlayerLabel[1]);
        mediaPlayerPanel.revalidate();
        mediaPlayerPanel.repaint();
      }
    });
    mediaPlayerLabel[0].setBounds(15, 5, 473, 39);
    mediaPlayerLabel[1].setBounds(7, 2, 486, 45);
    mediaPlayerLabel[2].setBounds(5, 73, 545, 8);
    mediaPlayerPanel.add(mediaPlayerLabel[0]);
    mediaPlayerPanel.add(mediaPlayerLabel[2]);
    mediaPlayerButton = new JButton[11];
    for (int i = 0; i < 11; i++) {
      mediaPlayerButton[i] = new JButton();
      mediaPlayerButton[i].addActionListener(this);
      mediaPlayerButton[i].setEnabled(false);
      mediaPlayerPanel.add(mediaPlayerButton[i]);
    }
    mediaPlayerButton[0].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerScrollBackward.png")));
    mediaPlayerButton[1].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerScrollForward.png")));
    mediaPlayerButton[2].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerPlay.png")));
    mediaPlayerButton[3].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerStop.png")));
    mediaPlayerButton[4].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerEject.png")));
    mediaPlayerButton[5].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerPreviousMark.png")));
    mediaPlayerButton[6].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerRewind.png")));
    mediaPlayerButton[7].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerFastForward.png")));
    mediaPlayerButton[8].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerNextMark.png")));
    mediaPlayerButton[9].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerStartSelection.png")));
    mediaPlayerButton[10].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MediaPlayerEndSelection.png")));
    mediaPlayerButton[0].setBounds(495, 15, 10, 13);
    mediaPlayerButton[1].setBounds(510, 15, 10, 13);
    mediaPlayerButton[2].setBounds(5, 80, 34, 34);
    mediaPlayerButton[3].setBounds(39, 80, 34, 34);
    mediaPlayerButton[4].setBounds(73, 80, 34, 34);
    mediaPlayerButton[5].setBounds(123, 80, 34, 34);
    mediaPlayerButton[6].setBounds(157, 80, 34, 34);
    mediaPlayerButton[7].setBounds(191, 80, 34, 34);
    mediaPlayerButton[8].setBounds(225, 80, 34, 34);
    mediaPlayerButton[9].setBounds(275, 80, 34, 34);
    mediaPlayerButton[10].setBounds(314, 80, 34, 34);
    mediaPlayerButton[0].setToolTipText("Scroll Backward");
    mediaPlayerButton[1].setToolTipText("Scroll Forward");
    mediaPlayerButton[2].setToolTipText("Play");
    mediaPlayerButton[3].setToolTipText("Stop");
    mediaPlayerButton[4].setToolTipText("Eject");
    mediaPlayerButton[5].setToolTipText("Previous Mark");
    mediaPlayerButton[6].setToolTipText("Rewind");
    mediaPlayerButton[7].setToolTipText("Fast Forward");
    mediaPlayerButton[8].setToolTipText("Next Mark");
    mediaPlayerButton[9].setToolTipText("Start Selection");
    mediaPlayerButton[10].setToolTipText("End Selection");
    mediaPlayerOpen.add(mediaPlayerPanel);
  }
  public void soundRecorderMethod() {
    /// Start Menu -> Programs -> Accessories -> Multimedia -> Sound Recorder
    soundRecorderIcon = new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderIcon.png"));
    soundRecorderOpen = new JFrame();
    soundRecorderOpen.setAlwaysOnTop(true);
    soundRecorderOpen.setBounds(50, 0, 400, 230);
    soundRecorderOpen.setIconImage(soundRecorderIcon.getImage());
    soundRecorderOpen.setResizable(false);
    soundRecorderOpen.setTitle("Sound - Sound Recorder");
    soundRecorderMenuBar = new JMenuBar();
    soundRecorderMenu = new JMenu[4];
    soundRecorderMenu[0] = new JMenu("File");
    soundRecorderMenu[1] = new JMenu("Edit");
    soundRecorderMenu[2] = new JMenu("Effects");
    soundRecorderMenu[3] = new JMenu("Help");
    for (int i = 0; i < 4; i++) {
      soundRecorderMenu[i].setFont(MSSansSerif16);
      soundRecorderMenuBar.add(soundRecorderMenu[i]);
    }
    soundRecorderSeparator = new JSeparator[7];
    for (int i = 0; i < 7; i++) {
      soundRecorderSeparator[i] = new JSeparator();
    }
    soundRecorderMenuItem = new JMenuItem[23];
    soundRecorderMenuItem[0] = new JMenuItem("New");
    soundRecorderMenuItem[1] = new JMenuItem("Open...");
    soundRecorderMenuItem[2] = new JMenuItem("Save");
    soundRecorderMenuItem[3] = new JMenuItem("Save As...");
    soundRecorderMenuItem[4] = new JMenuItem("Revert...");
    soundRecorderMenuItem[4].setEnabled(false);
    soundRecorderMenuItem[5] = new JMenuItem("Properties");
    for (int i = 0; i < 6; i++) {
      soundRecorderMenu[0].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenu[0].add(soundRecorderSeparator[0]);
    soundRecorderMenuItem[6] = new JMenuItem("Exit");
    soundRecorderMenu[0].add(soundRecorderMenuItem[6]);
    soundRecorderMenuItem[7] = new JMenuItem("Copy");
    soundRecorderMenuItem[7].setAccelerator(ctrlC);
    soundRecorderMenuItem[8] = new JMenuItem("Paste Insert");
    soundRecorderMenuItem[8].setAccelerator(ctrlV);
    soundRecorderMenuItem[9] = new JMenuItem("Paste Mix");
    soundRecorderMenuItem[10] = new JMenuItem("Insert File...");
    soundRecorderMenuItem[11] = new JMenuItem("Mix with File...");
    soundRecorderMenuItem[12] = new JMenuItem("Delete Before Current Position");
    soundRecorderMenuItem[13] = new JMenuItem("Delete After Current Position");
    soundRecorderMenuItem[14] = new JMenuItem("Audio Properties");
    for (int i = 7; i < 10; i++) {
      soundRecorderMenu[1].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenu[1].add(soundRecorderSeparator[1]);
    for (int i = 10; i < 12; i++) {
      soundRecorderMenu[1].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenu[1].add(soundRecorderSeparator[2]);
    for (int i = 12; i < 14; i++) {
      soundRecorderMenu[1].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenu[1].add(soundRecorderSeparator[3]);
    soundRecorderMenu[1].add(soundRecorderMenuItem[14]);
    for (int i = 8; i < 14; i++) {
      if (i == 10 || i == 11) {
        continue;
      }
      soundRecorderMenuItem[i].setEnabled(false);
    }
    soundRecorderMenuItem[15] = new JMenuItem("Increase Volume (by 25%)");
    soundRecorderMenuItem[16] = new JMenuItem("Decrease Volume");
    for (int i = 15; i < 17; i++) {
      soundRecorderMenu[2].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenu[2].add(soundRecorderSeparator[4]);
    soundRecorderMenuItem[17] = new JMenuItem("Increase Speed (by 100%)");
    soundRecorderMenuItem[18] = new JMenuItem("Decrease Speed");
    for (int i = 17; i < 19; i++) {
      soundRecorderMenu[2].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenu[2].add(soundRecorderSeparator[5]);
    soundRecorderMenuItem[19] = new JMenuItem("Add Echo");
    soundRecorderMenuItem[20] = new JMenuItem("Reverse");
    for (int i = 19; i < 21; i++) {
      soundRecorderMenu[2].add(soundRecorderMenuItem[i]);
    }
    soundRecorderMenuItem[21] = new JMenuItem("Help Topics");
    soundRecorderMenu[3].add(soundRecorderMenuItem[21]);
    soundRecorderMenu[3].add(soundRecorderSeparator[6]);
    soundRecorderMenuItem[22] = new JMenuItem("About Sound Recorder");
    soundRecorderMenu[3].add(soundRecorderMenuItem[22]);
    for (int i = 0; i < 23; i++) {
      soundRecorderMenuItem[i].addActionListener(this);
      soundRecorderMenuItem[i].setFont(MSSansSerif16);
    }
    soundRecorderOpen.add(soundRecorderMenuBar, BorderLayout.NORTH);
    //Sound Recorder Content
    soundRecorderPanel = new JPanel();
    soundRecorderPanel.setBounds(0, 0, 400, 230);
    soundRecorderPanel.setLayout(null);
    soundRecorderLabel = new JLabel[3];
    soundRecorderLabel[0] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderDefaultPosition.png")));
    soundRecorderLabel[1] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderDefaultSlider.png")));
    soundRecorderLabel[2] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderDefaultSliderSelected.png")));
    soundRecorderLabel[1].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        soundRecorderPanel.remove(soundRecorderLabel[1]);
        soundRecorderPanel.add(soundRecorderLabel[2]);
        soundRecorderPanel.revalidate();
        soundRecorderPanel.repaint();
      }
    });
    soundRecorderLabel[0].setBounds(5, 5, 366, 64);
    soundRecorderLabel[1].setBounds(15, 75, 335, 33);
    soundRecorderLabel[2].setBounds(5, 80, 353, 38);
    for (int i = 0; i < 2; i++) {
      soundRecorderPanel.add(soundRecorderLabel[i]);
    }
    soundRecorderButton = new JButton[5];
    for (int i = 0; i < 5; i++) {
      soundRecorderButton[i] = new JButton();
      soundRecorderButton[i].addActionListener(this);
      soundRecorderPanel.add(soundRecorderButton[i]);
    }
    soundRecorderButton[0].setIcon(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderSeekToStart.png")));
    soundRecorderButton[1].setIcon(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderSeekToEnd.png")));
    soundRecorderButton[2].setIcon(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderPlay.png")));
    soundRecorderButton[3].setIcon(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderStop.png")));
    soundRecorderButton[4].setIcon(new ImageIcon(getClass().getClassLoader().getResource("SoundRecorderRecord.png")));
    soundRecorderButton[0].setBounds(10, 125, 64, 32);
    soundRecorderButton[1].setBounds(80, 125, 64, 32);
    soundRecorderButton[2].setBounds(150, 125, 64, 32);
    soundRecorderButton[3].setBounds(220, 125, 64, 32);
    soundRecorderButton[4].setBounds(290, 125, 64, 32);
    soundRecorderButton[0].setToolTipText("Seek To Start");
    soundRecorderButton[1].setToolTipText("Seek To End");
    soundRecorderButton[2].setToolTipText("Play");
    soundRecorderButton[3].setToolTipText("Stop");
    soundRecorderButton[4].setToolTipText("Record");
    for (int i = 0; i < 4; i++) {
      soundRecorderButton[i].setEnabled(false);
    }
    soundRecorderOpen.add(soundRecorderPanel);
  }
  public void scanDiskMethod() {
    scanDiskOpen = new JFrame();
    scanDiskIcon = new ImageIcon(getClass().getClassLoader().getResource("ScanDiskIcon.png"));
    scanDiskOpen.setBounds(50, 0, 700, 575);
    scanDiskOpen.setIconImage(scanDiskIcon.getImage());
    scanDiskOpen.setLayout(null);
    scanDiskOpen.setResizable(false);
    scanDiskOpen.setTitle("ScanDisk - Playdosgame (C:)");
    scanDiskLabel = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ScanDiskLabel.png")));
    scanDiskLabel.setBounds(15, 15, 55, 55);
    scanDiskOpen.add(scanDiskLabel);
    scanDiskText = new JLabel[5];
    scanDiskText[0] = new JLabel("Select the drive(s) you want to check for errors:");
    scanDiskText[0].setBounds(15, 70, 500, 20);
    for (int i = 0; i < 1; i++) {
      scanDiskText[i].setFont(MSSansSerif15);
      scanDiskOpen.add(scanDiskText[i]);
    }
    scanDiskDrive = new String[2];
    scanDiskDrive[0] = new String("Removable Disk (A:)");
    scanDiskDrive[1] = new String("Playdosgame (C:)");
    scanDiskList = new JList < Object > (scanDiskDrive);
    scanDiskList.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        int selectedDrive = scanDiskList.getSelectedIndex();
        if (selectedDrive == 0) {
          JOptionPane.showOptionDialog(null,
            "ScanDisk cannot check this drive because there is no disk in it, it is\n" +
            "not formatted, or a disk utility has locked it. Insert a valid disk in the\n" +
            "drive or wait for the utility to finish, and then restart ScanDisk.",
            "ScanDisk - Removable Disk (A:)", JOptionPane.INFORMATION_MESSAGE, 0, informationSign, OK,
            OK[0]);
          scanDiskOpen.dispose();
          mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          blueScreenOfDeathMethod();
        } else if (selectedDrive == 1) {

        }
      }
    });
    scanDiskList.setBounds(15, 100, 650, 75);
    scanDiskList.setSelectedIndex(1);
    scanDiskOpen.add(scanDiskList);
    scanDiskRadioButton = new JRadioButton[17];
    scanDiskRadioButton[0] = new JRadioButton(
      "<html>Standard<br>" + "(checks files and folders for errors)</html>");
    scanDiskRadioButton[1] = new JRadioButton(
      "<html>Thorough<br>" + "(performs Standard test and scans disk surface for errors)</html>");
    scanDiskRadioButton[0].setBounds(30, 230, 450, 50);
    scanDiskRadioButton[1].setBounds(30, 290, 450, 50);
    scanDiskRadioButton[0].setSelected(true);
    scanDiskButtonGroup = new ButtonGroup[6];
    for (int i = 0; i < 6; i++) {
      scanDiskButtonGroup[i] = new ButtonGroup();
    }
    for (int i = 0; i < 2; i++) {
      scanDiskRadioButton[i].addActionListener(this);
      scanDiskRadioButton[i].setFont(MSSansSerif15);
      scanDiskButtonGroup[0].add(scanDiskRadioButton[i]);
      scanDiskOpen.add(scanDiskRadioButton[i]);
    }
    scanDiskCheckBox = new JCheckBox[6];
    scanDiskCheckBox[0] = new JCheckBox("Automatically fix errors");
    scanDiskCheckBox[0].setBounds(15, 375, 300, 30);
    for (int i = 0; i < 1; i++) {
      scanDiskCheckBox[i].setFont(MSSansSerif15);
      scanDiskOpen.add(scanDiskCheckBox[i]);
    }
    scanDiskButton = new JButton[8];
    scanDiskButton[0] = new JButton("Options...");
    scanDiskButton[1] = new JButton("Start");
    scanDiskButton[2] = new JButton("Close");
    scanDiskButton[3] = new JButton("Advanced...");
    scanDiskButton[0].setBounds(570, 300, 90, 30);
    scanDiskButton[1].setBounds(265, 490, 125, 35);
    scanDiskButton[2].setBounds(400, 490, 125, 35);
    scanDiskButton[3].setBounds(535, 490, 125, 35);
    scanDiskButton[0].setEnabled(false);
    for (int i = 0; i < 4; i++) {
      scanDiskButton[i].addActionListener(this);
      scanDiskButton[i].setFont(MSSansSerif16);
      scanDiskOpen.add(scanDiskButton[i]);
    }
    scanDiskProgressBar = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ScanDiskProgressBar.png")));
    scanDiskProgressBar.setBounds(15, 435, 660, 50);
    scanDiskOpen.add(scanDiskProgressBar);
    surfaceScanOptions = new JDialog();
    surfaceScanOptions.setAlwaysOnTop(true);
    surfaceScanOptions.setBounds(50, 0, 500, 500);
    scanDiskAdvancedOptions = new JDialog();
    scanDiskAdvancedOptions.setAlwaysOnTop(true);
    scanDiskAdvancedOptions.setBounds(100, 100, 600, 600);
  }

  public void calculatorMethod() {
    /// Start Menu -> Programs -> Accessories -> Calculator Open and Its Objects
    calculatorColor = new Color[5];
    calculatorColor[0] = new Color(0, 0, 255); // 0~9
    calculatorColor[1] = new Color(255, 0, 0); // MC MR MS M+
    calculatorColor[2] = new Color(130, 0, 0); // Back CE C
    calculatorColor[3] = new Color(0, 0, 130); // A B C D E F
    calculatorColor[4] = new Color(130, 0, 130); // sin cos tan
    calculatorDecimalFormat = new DecimalFormat("0.#");
    calculatorFont = new Font[6];
    calculatorFont[0] = new Font("MS Sans Serif", Font.BOLD, 18);
    calculatorFont[1] = new Font("MS Sans Serif", Font.BOLD, 15);
    calculatorFont[2] = new Font("MS Sans Serif", Font.BOLD, 14);
    calculatorFont[3] = new Font("MS Sans Serif", Font.BOLD, 12);
    calculatorFont[4] = new Font("MS Sans Serif", Font.BOLD, 11);
    calculatorFont[5] = new Font("MS Sans Serif", Font.BOLD, 10);
    calculatorIcon = new ImageIcon(getClass().getClassLoader().getResource("CalculatorIcon.png"));
    calculatorOpen = new JFrame();
    calculatorOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        for (int i = 0; i < 2; i++) {
          calculatorCheckBox[i].setSelected(false);
        }
        for (int i = 0; i < 6; i++) {
          calculatorRadioButton[i].setSelected(false);
          if (i == 1 || i == 4) {
            continue;
          }
        }
        calculatorRadioButton[1].setSelected(true);
        calculatorRadioButton[4].setSelected(true);
        calculatorStandardTextField.setText("0.");
        calculatorScientificTextField.setText("0.");
      }
    });
    calculatorOpen.setAlwaysOnTop(true);
    calculatorOpen.setBounds(55, 50, 419, 407);
    calculatorOpen.setIconImage(calculatorIcon.getImage());
    calculatorOpen.setResizable(false);
    calculatorOpen.setTitle("Calculator");
    calculatorNumberA = 0;
    calculatorNumberB = 0;
    calculatorStandardResult = 0;
    calculatorStandardButton = new JButton[27];
    calculatorStandardPanel = new JPanel();
    calculatorStandardPanel.setLayout(null);
    for (int i = 0; i < 10; i++) {
      calculatorStandardButton[i] = new JButton(String.valueOf(i));
    }
    calculatorStandardButton[10] = new JButton("+/-");
    calculatorStandardButton[11] = new JButton(".");
    for (int i = 0; i < 12; i++) {
      calculatorStandardButton[i].setForeground(calculatorColor[0]);
    }
    calculatorStandardButton[12] = new JButton("MC");
    calculatorStandardButton[13] = new JButton("MR");
    calculatorStandardButton[14] = new JButton("MS");
    calculatorStandardButton[15] = new JButton("M+");
    calculatorStandardButton[16] = new JButton("/");
    calculatorStandardButton[17] = new JButton("*");
    calculatorStandardButton[18] = new JButton("-");
    calculatorStandardButton[19] = new JButton("+");
    calculatorStandardButton[20] = new JButton("=");
    for (int i = 12; i < 21; i++) {
      calculatorStandardButton[i].setForeground(calculatorColor[1]);
    }
    calculatorStandardButton[21] = new JButton("Back");
    calculatorStandardButton[22] = new JButton("CE");
    calculatorStandardButton[23] = new JButton("C");
    for (int i = 21; i < 24; i++) {
      calculatorStandardButton[i].setForeground(calculatorColor[2]);
    }
    calculatorStandardButton[24] = new JButton("sqrt");
    calculatorStandardButton[25] = new JButton("%");
    calculatorStandardButton[26] = new JButton("1/x");
    for (int i = 24; i < 27; i++) {
      calculatorStandardButton[i].setForeground(calculatorColor[3]);
    }
    calculatorStandardButton[0].setBounds(90, 286, 56, 45);
    calculatorStandardButton[1].setBounds(90, 234, 56, 45);
    calculatorStandardButton[2].setBounds(153, 234, 56, 45);
    calculatorStandardButton[3].setBounds(216, 234, 56, 45);
    calculatorStandardButton[4].setBounds(90, 182, 56, 45);
    calculatorStandardButton[5].setBounds(153, 182, 56, 45);
    calculatorStandardButton[6].setBounds(216, 182, 56, 45);
    calculatorStandardButton[7].setBounds(90, 130, 56, 45);
    calculatorStandardButton[8].setBounds(153, 130, 56, 45);
    calculatorStandardButton[9].setBounds(216, 130, 56, 45);
    calculatorStandardButton[10].setBounds(153, 286, 56, 45);
    calculatorStandardButton[11].setBounds(216, 286, 56, 45);
    calculatorStandardButton[12].setBounds(10, 130, 56, 45);
    calculatorStandardButton[13].setBounds(10, 182, 56, 45);
    calculatorStandardButton[14].setBounds(10, 234, 56, 45);
    calculatorStandardButton[15].setBounds(10, 286, 56, 45);
    calculatorStandardButton[16].setBounds(279, 130, 56, 45);
    calculatorStandardButton[17].setBounds(279, 182, 56, 45);
    calculatorStandardButton[18].setBounds(279, 234, 56, 45);
    calculatorStandardButton[19].setBounds(279, 286, 56, 45);
    calculatorStandardButton[20].setBounds(342, 286, 56, 45);
    calculatorStandardButton[21].setBounds(153, 78, 77, 45);
    calculatorStandardButton[22].setBounds(238, 78, 77, 45);
    calculatorStandardButton[23].setBounds(323, 78, 77, 45);
    calculatorStandardButton[24].setBounds(342, 130, 56, 45);
    calculatorStandardButton[25].setBounds(342, 182, 56, 45);
    calculatorStandardButton[26].setBounds(342, 234, 56, 45);
    for (int i = 0; i < 27; i++) {
      calculatorStandardButton[i].addActionListener(this);
      calculatorStandardButton[i].addKeyListener(this);
      calculatorStandardButton[i].setFocusable(false);
      calculatorStandardButton[i].setFont(calculatorFont[0]);
      calculatorStandardPanel.add(calculatorStandardButton[i]);
    }
    for (int i = 12; i < 17; i++) {
      calculatorStandardButton[i].setFont(calculatorFont[2]);
    }
    calculatorStandardButton[24].setFont(calculatorFont[4]);
    calculatorStandardButton[26].setFont(calculatorFont[1]);

    calculatorOpen.add(calculatorStandardPanel);
    calculatorMenu = new JMenu[3];
    calculatorMenu[0] = new JMenu("Edit");
    calculatorMenu[1] = new JMenu("View");
    calculatorMenu[2] = new JMenu("Help");
    calculatorMenuBar = new JMenuBar();
    calculatorMenuItem = new JMenuItem[4];
    calculatorMenuItem[0] = new JMenuItem("Copy");
    calculatorMenuItem[0].setAccelerator(ctrlC);
    calculatorMenuItem[1] = new JMenuItem("Paste");
    calculatorMenuItem[1].setAccelerator(ctrlV);
    calculatorMenuItem[1].setEnabled(false);
    for (int i = 0; i < 2; i++) {
      calculatorMenu[0].add(calculatorMenuItem[i]);
    }
    calculatorCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    calculatorCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Scientific");
    calculatorCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Standard");
    for (int i = 0; i < 2; i++) {
      calculatorCheckBoxMenuItem[i].addActionListener(this);
      calculatorCheckBoxMenuItem[i].setFont(MSSansSerif12);
      calculatorMenu[1].add(calculatorCheckBoxMenuItem[i]);
    }
    calculatorMenuItem[2] = new JMenuItem("Help Topics");
    calculatorMenuItem[3] = new JMenuItem("About Calculator");
    calculatorSeparator = new JSeparator();
    calculatorMenu[2].add(calculatorMenuItem[2]);
    calculatorMenu[2].add(calculatorSeparator);
    calculatorMenu[2].add(calculatorMenuItem[3]);
    for (int i = 0; i < 4; i++) {
      calculatorMenuItem[i].setFont(MSSansSerif12);
    }
    for (int i = 0; i < 3; i++) {
      calculatorMenu[i].setFont(MSSansSerif12);
      calculatorMenuBar.add(calculatorMenu[i]);
    }
    calculatorOpen.add(calculatorMenuBar, BorderLayout.NORTH);
    NumberFormat calculatorFormat = NumberFormat.getInstance();
    calculatorFormatter = new NumberFormatter(calculatorFormat);
    // calculatorFormatter.setAllowsInvalid(false);
    calculatorFormatter.setValueClass(Double.class);
    calculatorStandardTextField = new JFormattedTextField(calculatorFormatter);
    calculatorStandardTextField.setBounds(30, 20, 370, 40);
    calculatorStandardTextField.setCaretColor(white);
    calculatorStandardTextField.setFont(MSSansSerif16);
    calculatorStandardTextField.setHorizontalAlignment(SwingConstants.RIGHT);
    calculatorStandardTextField.setHighlighter(null);
    calculatorStandardTextField.setText("0.");
    calculatorStandardPanel.add(calculatorStandardTextField);
    calculatorOpen.add(calculatorStandardPanel);
    // Calculator Scientific
    calculatorScientificButton = new JButton[58];
    calculatorScientificPanel = new JPanel();
    calculatorScientificPanel.setLayout(null);
    for (int i = 0; i < 10; i++) {
      calculatorScientificButton[i] = new JButton(String.valueOf(i));
      calculatorScientificButton[i].setFont(calculatorFont[0]);
    }
    calculatorScientificButton[10] = new JButton("+/-");
    calculatorScientificButton[11] = new JButton(".");
    for (int i = 0; i < 12; i++) {
      calculatorScientificButton[i].setForeground(calculatorColor[0]);
    }
    calculatorScientificButton[12] = new JButton("MC");
    calculatorScientificButton[13] = new JButton("MR");
    calculatorScientificButton[14] = new JButton("MS");
    calculatorScientificButton[15] = new JButton("M+");
    calculatorScientificButton[16] = new JButton("/");
    calculatorScientificButton[17] = new JButton("*");
    calculatorScientificButton[18] = new JButton("-");
    calculatorScientificButton[19] = new JButton("+");
    calculatorScientificButton[20] = new JButton("Mod");
    calculatorScientificButton[21] = new JButton("Or");
    calculatorScientificButton[22] = new JButton("Lsh");
    calculatorScientificButton[23] = new JButton("=");
    calculatorScientificButton[24] = new JButton("And");
    calculatorScientificButton[25] = new JButton("Xor");
    calculatorScientificButton[26] = new JButton("Not");
    calculatorScientificButton[27] = new JButton("Int");
    for (int i = 12; i < 28; i++) {
      calculatorScientificButton[i].setForeground(calculatorColor[1]);
    }
    calculatorScientificButton[28] = new JButton("F-E");
    calculatorScientificButton[29] = new JButton("dms");
    calculatorScientificButton[30] = new JButton("sin");
    calculatorScientificButton[31] = new JButton("cos");
    calculatorScientificButton[32] = new JButton("tan");
    calculatorScientificButton[33] = new JButton("(");
    calculatorScientificButton[34] = new JButton("Exp");
    calculatorScientificButton[35] = new JButton("x^y");
    calculatorScientificButton[36] = new JButton("x^3");
    calculatorScientificButton[37] = new JButton("x^2");
    calculatorScientificButton[38] = new JButton(")");
    calculatorScientificButton[39] = new JButton("ln");
    calculatorScientificButton[40] = new JButton("log");
    calculatorScientificButton[41] = new JButton("n!");
    calculatorScientificButton[42] = new JButton("1/x");
    calculatorScientificButton[43] = new JButton("Back");
    calculatorScientificButton[44] = new JButton("CE");
    calculatorScientificButton[45] = new JButton("C");
    for (int i = 28; i < 46; i++) {
      calculatorScientificButton[i].setForeground(calculatorColor[4]);
    }
    calculatorScientificButton[46] = new JButton("Sta");
    calculatorScientificButton[47] = new JButton("Ave");
    calculatorScientificButton[48] = new JButton("Sum");
    calculatorScientificButton[49] = new JButton("s");
    calculatorScientificButton[50] = new JButton("Dat");
    calculatorScientificButton[51] = new JButton("PI");
    calculatorScientificButton[52] = new JButton("A");
    calculatorScientificButton[53] = new JButton("B");
    calculatorScientificButton[54] = new JButton("C");
    calculatorScientificButton[55] = new JButton("D");
    calculatorScientificButton[56] = new JButton("E");
    calculatorScientificButton[57] = new JButton("F");
    for (int i = 46; i < 58; i++) {
      calculatorScientificButton[i].setForeground(calculatorColor[3]);
    }
    calculatorScientificButton[0].setBounds(376, 338, 56, 45);
    calculatorScientificButton[1].setBounds(376, 286, 56, 45);
    calculatorScientificButton[2].setBounds(439, 286, 56, 45);
    calculatorScientificButton[3].setBounds(502, 286, 56, 45);
    calculatorScientificButton[4].setBounds(376, 234, 56, 45);
    calculatorScientificButton[5].setBounds(439, 234, 56, 45);
    calculatorScientificButton[6].setBounds(502, 234, 56, 45);
    calculatorScientificButton[7].setBounds(376, 182, 56, 45);
    calculatorScientificButton[8].setBounds(439, 182, 56, 45);
    calculatorScientificButton[9].setBounds(502, 182, 56, 45);
    calculatorScientificButton[10].setBounds(439, 338, 56, 45);
    calculatorScientificButton[11].setBounds(502, 338, 56, 45);
    calculatorScientificButton[12].setBounds(296, 182, 56, 45);
    calculatorScientificButton[13].setBounds(296, 234, 56, 45);
    calculatorScientificButton[14].setBounds(296, 286, 56, 45);
    calculatorScientificButton[15].setBounds(296, 338, 56, 45);
    calculatorScientificButton[16].setBounds(565, 182, 56, 45);
    calculatorScientificButton[17].setBounds(565, 234, 56, 45);
    calculatorScientificButton[18].setBounds(565, 286, 56, 45);
    calculatorScientificButton[19].setBounds(565, 338, 56, 45);
    calculatorScientificButton[20].setBounds(628, 182, 56, 45);
    calculatorScientificButton[21].setBounds(628, 234, 56, 45);
    calculatorScientificButton[22].setBounds(628, 286, 56, 45);
    calculatorScientificButton[23].setBounds(628, 338, 56, 45);
    calculatorScientificButton[24].setBounds(691, 182, 56, 45);
    calculatorScientificButton[25].setBounds(691, 234, 56, 45);
    calculatorScientificButton[26].setBounds(691, 286, 56, 45);
    calculatorScientificButton[27].setBounds(691, 338, 56, 45);
    calculatorScientificButton[28].setBounds(90, 182, 56, 45);
    calculatorScientificButton[29].setBounds(90, 234, 56, 45);
    calculatorScientificButton[30].setBounds(90, 286, 56, 45);
    calculatorScientificButton[31].setBounds(90, 338, 56, 45);
    calculatorScientificButton[32].setBounds(90, 390, 56, 45);
    calculatorScientificButton[33].setBounds(153, 182, 56, 45);
    calculatorScientificButton[34].setBounds(153, 234, 56, 45);
    calculatorScientificButton[35].setBounds(153, 286, 56, 45);
    calculatorScientificButton[36].setBounds(153, 338, 56, 45);
    calculatorScientificButton[37].setBounds(153, 390, 56, 45);
    calculatorScientificButton[38].setBounds(216, 182, 56, 45);
    calculatorScientificButton[39].setBounds(216, 234, 56, 45);
    calculatorScientificButton[40].setBounds(216, 286, 56, 45);
    calculatorScientificButton[41].setBounds(216, 338, 56, 45);
    calculatorScientificButton[42].setBounds(216, 390, 56, 45);
    calculatorScientificButton[43].setBounds(502, 130, 77, 45);
    calculatorScientificButton[44].setBounds(586, 130, 77, 45);
    calculatorScientificButton[45].setBounds(670, 130, 77, 45);
    calculatorScientificButton[46].setBounds(10, 182, 56, 45);
    calculatorScientificButton[47].setBounds(10, 234, 56, 45);
    calculatorScientificButton[48].setBounds(10, 286, 56, 45);
    calculatorScientificButton[49].setBounds(10, 338, 56, 45);
    calculatorScientificButton[50].setBounds(10, 390, 56, 45);
    calculatorScientificButton[51].setBounds(296, 390, 56, 45);
    calculatorScientificButton[52].setBounds(376, 390, 56, 45);
    calculatorScientificButton[53].setBounds(439, 390, 56, 45);
    calculatorScientificButton[54].setBounds(502, 390, 56, 45);
    calculatorScientificButton[55].setBounds(565, 390, 56, 45);
    calculatorScientificButton[56].setBounds(628, 390, 56, 45);
    calculatorScientificButton[57].setBounds(691, 390, 56, 45);
    for (int i = 10; i < 58; i++) {
      calculatorScientificButton[i].setFont(calculatorFont[3]);
    }
    for (int i = 12; i < 20; i++) {
      calculatorScientificButton[i].setFont(calculatorFont[2]);
    }
    for (int i = 52; i < 58; i++) {
      calculatorScientificButton[i].setFont(calculatorFont[0]);
    }
    calculatorScientificButton[20].setFont(calculatorFont[4]);
    calculatorScientificButton[24].setFont(calculatorFont[4]);
    calculatorScientificButton[29].setFont(calculatorFont[4]);
    calculatorScientificButton[34].setFont(calculatorFont[4]);
    calculatorScientificButton[47].setFont(calculatorFont[4]);
    calculatorScientificButton[48].setFont(calculatorFont[5]);
    for (int i = 0; i < 58; i++) {
      calculatorScientificButton[i].addActionListener(this);
      calculatorScientificButton[i].addKeyListener(this);
      calculatorScientificButton[i].setFocusable(false);
      calculatorScientificButton[i].setHorizontalTextPosition(0);
      calculatorScientificPanel.add(calculatorScientificButton[i]);
    }
    calculatorCheckBox = new JCheckBox[2];
    calculatorCheckBox[0] = new JCheckBox("Inv");
    calculatorCheckBox[1] = new JCheckBox("Hyp");
    calculatorCheckBox[0].setBounds(15, 125, 50, 50);
    calculatorCheckBox[1].setBounds(105, 125, 50, 50);
    for (int i = 0; i < 2; i++) {
      calculatorCheckBox[i].addActionListener(this);
      calculatorCheckBox[i].setFont(MSSansSerif12);
      calculatorScientificPanel.add(calculatorCheckBox[i]);
    }
    calculatorButtonGroup = new ButtonGroup[2];
    calculatorButtonGroup[0] = new ButtonGroup();
    calculatorButtonGroup[1] = new ButtonGroup();
    calculatorRadioButton = new JRadioButton[7];
    calculatorRadioButton[0] = new JRadioButton("Hex");
    calculatorRadioButton[1] = new JRadioButton("Dec");
    calculatorRadioButton[2] = new JRadioButton("Oct");
    calculatorRadioButton[3] = new JRadioButton("Bin");
    calculatorRadioButton[4] = new JRadioButton("Deg");
    calculatorRadioButton[5] = new JRadioButton("Rad");
    calculatorRadioButton[6] = new JRadioButton("Grad");
    calculatorRadioButton[0].setBounds(15, 70, 50, 50);
    calculatorRadioButton[1].setBounds(105, 70, 50, 50);
    calculatorRadioButton[2].setBounds(205, 70, 50, 50);
    calculatorRadioButton[3].setBounds(295, 70, 50, 50);
    calculatorRadioButton[4].setBounds(430, 70, 100, 50);
    calculatorRadioButton[5].setBounds(535, 70, 100, 50);
    calculatorRadioButton[6].setBounds(640, 70, 100, 50);
    calculatorRadioButton[1].setSelected(true);
    calculatorRadioButton[4].setSelected(true);
    for (int i = 0; i < 4; i++) {
      calculatorButtonGroup[0].add(calculatorRadioButton[i]);
    }
    for (int i = 4; i < 7; i++) {
      calculatorButtonGroup[1].add(calculatorRadioButton[i]);
    }
    for (int i = 0; i < 7; i++) {
      calculatorRadioButton[i].addActionListener(this);
      calculatorRadioButton[i].setFont(MSSansSerif12);
      calculatorScientificPanel.add(calculatorRadioButton[i]);
    }
    calculatorScientificTextField = new JFormattedTextField(calculatorFormatter);
    calculatorScientificTextField.setBounds(376, 20, 370, 40);
    calculatorScientificTextField.setCaretColor(white);
    calculatorScientificTextField.setFont(MSSansSerif16);
    calculatorScientificTextField.setHorizontalAlignment(SwingConstants.RIGHT);
    calculatorScientificTextField.setHighlighter(null);
    calculatorScientificTextField.setText("0.");
    calculatorScientificPanel.add(calculatorScientificTextField);
  }

  @SuppressWarnings("serial")
  public void paintMethod() {
    // Start Menu -> Programs -> Accessories -> Paint
    paintIcon = new ImageIcon(getClass().getClassLoader().getResource("PaintIcon.png"));
    paintOpen = new JFrame();
    paintToolkitBoolean = new boolean[16];
    paintToolkitBoolean[3] = true;
    for (int i = 0; i < 16; i++) {
      if (i == 3)
        continue;
      paintToolkitBoolean[i] = false;
    }
    paintCanvasPanel = new JPanel() {
      public void paintComponent(Graphics g) {
        Graphics gd = getGraphics();

        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setStroke(new BasicStroke(4, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL));
        g2d.setColor(paintSelectedColor);
        if (pME != null && SwingUtilities.isLeftMouseButton(pME) &&
          paintToolkitButton[4].isSelected()) g2d.drawLine(pME.getX(), pME.getY(), pME.getX(), pME.getY());
        //             if(pME != null && SwingUtilities.isLeftMouseButton(pME)
        //            		 && paintToolkitButton[6].isSelected()) {
        //            	 g2d.drawRect(paintPoint.x-10, paintPoint.y-10, 20,20);
        //             }
        //             if(pME != null && SwingUtilities.isLeftMouseButton(pME)
        //            		 && paintToolkitButton[7].isSelected()) {
        //            	 g2d.drawOval(paintPoint.x-10, paintPoint.y-10, 20,20);
        //             }

      };
    };
    paintCanvasPanel.addMouseMotionListener(new MouseMotionListener() {
      public void mouseDragged(MouseEvent e) {
        pME = e;
        paintCanvasPanel.repaint();
      }
      public void mouseMoved(MouseEvent e) {

      }

    });
    //paintCanvasPanel.setPreferredSize(new Dimension(1024,768));

    paintScrollPane = new JScrollPane(paintCanvasPanel);
    paintScrollPane.setBackground(white);
    paintScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    paintScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    paintOpen.getContentPane().add(paintScrollPane);
    paintOpen.getContentPane().setBackground(white);
    paintOpen.setAlwaysOnTop(true);
    paintOpen.setBounds(200, 0, 420, 600);
    paintOpen.setExtendedState(JFrame.MAXIMIZED_BOTH);
    paintOpen.setIconImage(paintIcon.getImage());
    paintOpen.setTitle("untitled - Paint");
    paintMenuBar = new JMenuBar();
    paintMenu = new JMenu[7];
    paintMenu[0] = new JMenu("File");
    paintMenu[1] = new JMenu("Edit");
    paintMenu[2] = new JMenu("View");
    paintMenu[3] = new JMenu("Image");
    paintMenu[4] = new JMenu("Options");
    paintMenu[5] = new JMenu("Help");
    paintMenu[6] = new JMenu("Zoom");
    paintMenu[6].setFont(MSSansSerif16);
    for (int i = 0; i < 6; i++) {
      paintMenu[i].setFont(MSSansSerif16);
      paintMenuBar.add(paintMenu[i]);
    }
    paintSeparator = new JSeparator[9];
    for (int i = 0; i < 9; i++) {
      paintSeparator[i] = new JSeparator();
    }
    paintMenuItem = new JMenuItem[50];
    paintMenuItem[0] = new JMenuItem("New");
    paintMenuItem[0].setAccelerator(ctrlN);
    paintMenuItem[1] = new JMenuItem("Open");
    paintMenuItem[1].setAccelerator(ctrlO);
    paintMenuItem[2] = new JMenuItem("Save");
    paintMenuItem[2].setAccelerator(ctrlS);
    paintMenuItem[3] = new JMenuItem("Save As...");
    for (int i = 0; i < 4; i++) {
      paintMenu[0].add(paintMenuItem[i]);
    }
    paintMenu[0].add(paintSeparator[0]);
    paintMenuItem[4] = new JMenuItem("Print Preview");
    paintMenuItem[5] = new JMenuItem("Page Setup...");
    paintMenuItem[6] = new JMenuItem("Print...");
    paintMenuItem[6].setAccelerator(ctrlP);
    for (int i = 4; i < 7; i++) {
      paintMenu[0].add(paintMenuItem[i]);
    }
    paintMenu[0].add(paintSeparator[1]);
    paintMenuItem[7] = new JMenuItem("Set As Wallpaper(Tiled)");
    paintMenuItem[8] = new JMenuItem("Set As Wallpaper(Centered)");
    for (int i = 7; i < 9; i++) {
      paintMenu[0].add(paintMenuItem[i]);
    }
    paintMenu[0].add(paintSeparator[2]);
    paintMenuItem[9] = new JMenuItem("Recent File");
    for (int i = 7; i < 10; i++) {
      paintMenuItem[i].setEnabled(false);
    }
    paintMenu[0].add(paintMenuItem[9]);
    paintMenu[0].add(paintSeparator[3]);
    paintMenuItem[10] = new JMenuItem("Exit");
    paintMenuItem[10].setAccelerator(AltF4);
    paintMenu[0].add(paintMenuItem[10]);
    paintMenuItem[11] = new JMenuItem("Undo");
    paintMenuItem[11].setAccelerator(ctrlZ);
    paintMenuItem[12] = new JMenuItem("Repeat");
    paintMenuItem[12].setAccelerator(F4);
    for (int i = 11; i < 13; i++) {
      paintMenu[1].add(paintMenuItem[i]);
    }
    paintMenu[1].add(paintSeparator[4]);
    paintMenuItem[13] = new JMenuItem("Cut");
    paintMenuItem[13].setAccelerator(ctrlX);
    paintMenuItem[14] = new JMenuItem("Copy");
    paintMenuItem[14].setAccelerator(ctrlC);
    paintMenuItem[15] = new JMenuItem("Paste");
    paintMenuItem[15].setAccelerator(ctrlV);
    paintMenuItem[16] = new JMenuItem("Clear Selection");
    paintMenuItem[16].setAccelerator(del);
    paintMenuItem[17] = new JMenuItem("Select All");
    paintMenuItem[17].setAccelerator(ctrlL);
    for (int i = 13; i < 18; i++) {
      paintMenu[1].add(paintMenuItem[i]);
    }
    paintMenu[1].add(paintSeparator[5]);
    paintMenuItem[18] = new JMenuItem("Copy To...");
    paintMenuItem[19] = new JMenuItem("Paste From...");
    for (int i = 18; i < 20; i++) {
      paintMenu[1].add(paintMenuItem[i]);
    }
    for (int i = 11; i < 20; i++) {
      if (i == 17 || i == 19) {
        continue;
      }
      paintMenuItem[i].setEnabled(false);
    }
    paintCheckBoxMenuItem = new JCheckBoxMenuItem[6];
    paintCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Tool Box");
    paintCheckBoxMenuItem[0].setAccelerator(ctrlT);
    paintCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Color Box");
    paintCheckBoxMenuItem[1].setAccelerator(ctrlA);
    paintCheckBoxMenuItem[2] = new JCheckBoxMenuItem("Status Bar");
    for (int i = 0; i < 3; i++) {
      paintMenu[2].add(paintCheckBoxMenuItem[i]);
    }
    paintMenu[2].add(paintSeparator[6]);
    paintMenu[2].add(paintMenu[6]);
    paintMenuItem[20] = new JMenuItem("Normal Size");
    paintMenuItem[20].setAccelerator(ctrlPgUp);
    paintMenuItem[20].setEnabled(false);
    paintMenuItem[21] = new JMenuItem("Large Size");
    paintMenuItem[21].setAccelerator(ctrlPgDn);
    paintMenuItem[22] = new JMenuItem("Custom...");
    for (int i = 20; i < 23; i++) {
      paintMenu[6].add(paintMenuItem[i]);
    }
    paintMenu[6].add(paintSeparator[7]);
    paintCheckBoxMenuItem[3] = new JCheckBoxMenuItem("Text Toolbar");
    paintCheckBoxMenuItem[4] = new JCheckBoxMenuItem("Show Grid");
    paintCheckBoxMenuItem[4].setAccelerator(ctrlG);
    paintCheckBoxMenuItem[5] = new JCheckBoxMenuItem("Show Thumbnail");
    for (int i = 4; i < 6; i++) {
      paintMenu[6].add(paintCheckBoxMenuItem[i]);
    }
    for (int i = 3; i < 6; i++) {
      paintCheckBoxMenuItem[i].setEnabled(false);
    }
    for (int i = 0; i < 6; i++) {
      if (i == 4) {
        continue;
      }
      paintCheckBoxMenuItem[i].setSelected(true);
    }
    for (int i = 0; i < 6; i++) {
      paintCheckBoxMenuItem[i].setFont(MSSansSerif16);
    }
    paintMenuItem[23] = new JMenuItem("View Bitmap");
    paintMenuItem[23].setEnabled(false);
    paintMenu[2].add(paintMenuItem[23]);
    paintMenu[2].add(paintCheckBoxMenuItem[3]);
    paintMenuItem[24] = new JMenuItem("Flip/Rotate...");
    paintMenuItem[24].setAccelerator(ctrlR);
    paintMenuItem[25] = new JMenuItem("Stretch/Skew...");
    paintMenuItem[25].setAccelerator(ctrlW);
    paintMenuItem[26] = new JMenuItem("Invert Colors");
    paintMenuItem[26].setAccelerator(ctrlI);
    paintMenuItem[27] = new JMenuItem("Attributes...");
    paintMenuItem[27].setAccelerator(ctrlE);
    paintMenuItem[28] = new JMenuItem("Clear Image");
    paintMenuItem[28].setAccelerator(ctrlShiftN);
    for (int i = 24; i < 29; i++) {
      paintMenu[3].add(paintMenuItem[i]);
    }
    paintMenuItem[29] = new JMenuItem("Edit Colors...");
    paintMenuItem[30] = new JMenuItem("Get Colors...");
    paintMenuItem[30].setEnabled(false);
    paintMenuItem[31] = new JMenuItem("Save Colors...");
    paintMenuItem[32] = new JMenuItem("Draw Opaque");
    for (int i = 29; i < 33; i++) {
      paintMenu[4].add(paintMenuItem[i]);
    }
    paintMenuItem[33] = new JMenuItem("Help Topics");
    paintMenu[5].add(paintMenuItem[33]);
    paintMenu[5].add(paintSeparator[8]);
    paintMenuItem[34] = new JMenuItem("About Paint");
    paintMenu[5].add(paintMenuItem[34]);
    for (int i = 0; i < 35; i++) {
      paintMenuItem[i].addActionListener(this);
      paintMenuItem[i].setFont(MSSansSerif16);
    }
    paintOpen.add(paintMenuBar, BorderLayout.NORTH);
    //Paint Toolkit
    paintGridBagConstraints = new GridBagConstraints[2];
    for (int i = 0; i < 2; i++) {
      paintGridBagConstraints[i] = new GridBagConstraints();
    }
    paintGridBagConstraints[0].anchor = GridBagConstraints.NORTH;
    paintGridBagConstraints[0].gridheight = 5;
    paintGridBagConstraints[0].gridwidth = 5;
    paintGridBagConstraints[0].weightx = 0;
    paintGridBagConstraints[0].weighty = 1;
    paintGridBagConstraints[0].fill = GridBagConstraints.VERTICAL;
    paintGridBagConstraints[1].anchor = GridBagConstraints.WEST;
    paintGridBagConstraints[1].weighty = 1;
    paintGridBagConstraints[1].fill = GridBagConstraints.HORIZONTAL;
    paintToolkitPanel = new JPanel[3];
    for (int i = 0; i < 3; i++) {
      paintToolkitPanel[i] = new JPanel();
    }
    paintToolkitPanel[0].setLayout(new GridBagLayout());
    for (int i = 1; i < 3; i++) {
      paintToolkitPanel[i].setLayout(new BoxLayout(paintToolkitPanel[i], BoxLayout.Y_AXIS));
      paintToolkitPanel[0].add(paintToolkitPanel[i]);
    }
    paintToolkitButton = new JToggleButton[16];
    for (int i = 0; i < 16; i++) {
      paintToolkitButton[i] = new JToggleButton();
      paintToolkitButton[i].addActionListener(this);
      paintToolkitButton[i].setBackground(gray);
    }
    for (int i = 0; i < 8; i++) {
      paintToolkitPanel[1].add(paintToolkitButton[i], paintGridBagConstraints[0]);
    }
    for (int i = 8; i < 16; i++) {
      paintToolkitPanel[2].add(paintToolkitButton[i], paintGridBagConstraints[0]);
    }
    paintOpen.add(paintToolkitPanel[0], BorderLayout.WEST);
    paintToolkitButton[0].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintFreeFormSelect.png")));
    paintToolkitButton[1].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintEraserColorEraser.png")));
    paintToolkitButton[2].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintPickColor.png")));
    paintToolkitButton[3].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintPencil.png")));
    paintToolkitButton[4].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintAirbrush.png")));
    paintToolkitButton[5].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintLine.png")));
    paintToolkitButton[6].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintRectangle.png")));
    paintToolkitButton[7].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintEllipse.png")));
    paintToolkitButton[8].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintSelect.png")));
    paintToolkitButton[9].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintFillWithColor.png")));
    paintToolkitButton[10].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintMagnifier.png")));
    paintToolkitButton[11].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintBrush.png")));
    paintToolkitButton[12].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintText.png")));
    paintToolkitButton[13].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintCurve.png")));
    paintToolkitButton[14].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintPolygon.png")));
    paintToolkitButton[15].setIcon(new ImageIcon(getClass().getClassLoader().getResource("PaintRoundedRectangle.png")));
    paintToolkitButton[0].setToolTipText("Free-Form Select");
    paintToolkitButton[1].setToolTipText("Eraser/Color Eraser");
    paintToolkitButton[2].setToolTipText("Pick Color");
    paintToolkitButton[3].setToolTipText("Pencil");
    paintToolkitButton[4].setToolTipText("Airbrush");
    paintToolkitButton[5].setToolTipText("Line");
    paintToolkitButton[6].setToolTipText("Rectangle");
    paintToolkitButton[7].setToolTipText("Ellipse");
    paintToolkitButton[8].setToolTipText("Select");
    paintToolkitButton[9].setToolTipText("Fill With Color");
    paintToolkitButton[10].setToolTipText("Magnifier");
    paintToolkitButton[11].setToolTipText("Brush");
    paintToolkitButton[12].setToolTipText("Text");
    paintToolkitButton[13].setToolTipText("Curve");
    paintToolkitButton[14].setToolTipText("Polygon");
    paintToolkitButton[15].setToolTipText("Rounded Rectangle");
    //Paint Palette 
    paintSelectedColor = new Color(0, 0, 0);
    paintPaletteColor = new Color[28];
    paintPaletteColor[0] = new Color(0, 0, 0); // black
    paintPaletteColor[1] = new Color(130, 130, 130); // gray
    paintPaletteColor[2] = new Color(130, 0, 0); // crimson
    paintPaletteColor[3] = new Color(130, 130, 0); // dark green
    paintPaletteColor[4] = new Color(0, 130, 0); // verdant green
    paintPaletteColor[5] = new Color(0, 130, 130); // dark cyan
    paintPaletteColor[6] = new Color(0, 0, 130); // deep blue
    paintPaletteColor[7] = new Color(130, 0, 130); // purple
    paintPaletteColor[8] = new Color(130, 130, 65); // grayish green
    paintPaletteColor[9] = new Color(0, 65, 65); // greenish blue
    paintPaletteColor[10] = new Color(0, 130, 255); // light blue
    paintPaletteColor[11] = new Color(0, 65, 130); // dark blue
    paintPaletteColor[12] = new Color(65, 0, 255); // bright purple
    paintPaletteColor[13] = new Color(130, 65, 0); // brown
    paintPaletteColor[14] = new Color(255, 255, 255); // white
    paintPaletteColor[15] = new Color(195, 195, 195); // light gray
    paintPaletteColor[16] = new Color(255, 0, 0); // red
    paintPaletteColor[17] = new Color(255, 255, 0); // yellow
    paintPaletteColor[18] = new Color(0, 255, 0); // green
    paintPaletteColor[19] = new Color(0, 255, 255); // cyan
    paintPaletteColor[20] = new Color(0, 0, 255); // blue
    paintPaletteColor[21] = new Color(255, 0, 255); // purple
    paintPaletteColor[22] = new Color(255, 255, 130); // light yellow
    paintPaletteColor[23] = new Color(0, 255, 130); // light green
    paintPaletteColor[24] = new Color(130, 255, 255); // sky blue
    paintPaletteColor[25] = new Color(130, 130, 255); // light purple
    paintPaletteColor[26] = new Color(255, 0, 130); // bright pink
    paintPaletteColor[27] = new Color(255, 130, 65); // orange
    paintPalettePanel = new JPanel[3];
    for (int i = 0; i < 3; i++) {
      paintPalettePanel[i] = new JPanel();
    }
    paintPalettePanel[0].setLayout(new BoxLayout(paintPalettePanel[0], BoxLayout.Y_AXIS));
    for (int i = 1; i < 3; i++) {
      paintPalettePanel[i].setLayout(new GridBagLayout());
      paintPalettePanel[0].add(paintPalettePanel[i]);
    }
    paintColorButton = new JButton[28];
    for (int i = 0; i < 28; i++) {
      paintColorButton[i] = new JButton();
      paintColorButton[i].addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          paintSelectedColor = ((JButton) e.getSource()).getBackground();
        }
      });
      paintColorButton[i].setBackground(paintPaletteColor[i]);
    }
    for (int i = 0; i < 14; i++) {
      paintPalettePanel[1].add(paintColorButton[i]);
    }
    for (int i = 14; i < 28; i++) {
      paintPalettePanel[2].add(paintColorButton[i]);
    }
    paintOpen.add(paintPalettePanel[0], BorderLayout.SOUTH);
  }
  public void wordPadMethod() {
    wordPadWarning = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("WordPadWarning.png")));
    wordPadWarning.setBounds(200, 200, 799, 321);
  }

  public void MSDOSPromptMethod() {
    MSDOSPromptOpen = new JFrame();
    MSDOSPromptIcon = new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptIcon.png"));
    MSDOSPromptOpen.addWindowStateListener(new WindowStateListener() {
      public void windowStateChanged(WindowEvent e) {
        if ((e.getNewState() & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH) {
          MSDOSPromptPanel.remove(MSDOSPromptNormalLabel);
          MSDOSPromptPanel.add(MSDOSPromptMaximizedLabel);
          MSDOSPromptPanel.revalidate();
          MSDOSPromptPanel.repaint();
        } else if ((e.getNewState() & Frame.NORMAL) == Frame.NORMAL) {
          MSDOSPromptPanel.remove(MSDOSPromptMaximizedLabel);
          MSDOSPromptPanel.add(MSDOSPromptNormalLabel);
          MSDOSPromptPanel.revalidate();
          MSDOSPromptPanel.repaint();
        }
      }
    });
    MSDOSPromptOpen.setAlwaysOnTop(true);
    MSDOSPromptOpen.setBounds(50, 0, 755, 390);
    MSDOSPromptOpen.setIconImage(MSDOSPromptIcon.getImage());
    MSDOSPromptOpen.setTitle("MS-DOS Prompt");
    MSDOSPromptToolbar = new JPanel();
    MSDOSPromptToolbar.setBackground(gray);
    MSDOSPromptToolbar.setLayout(new FlowLayout(FlowLayout.LEFT));
    MSDOSPromptOpen.add(MSDOSPromptToolbar, BorderLayout.NORTH);
    MSDOSPromptFontSize = new JComboBox < String > ();
    MSDOSPromptFontSize.addItem("Auto");
    MSDOSPromptToolbar.add(MSDOSPromptFontSize);
    MSDOSPromptButton = new JButton[7];
    for (int i = 0; i < 7; i++) {
      MSDOSPromptButton[i] = new JButton();
      MSDOSPromptButton[i].addActionListener(this);
      MSDOSPromptButton[i].setSize(30, 30);
      MSDOSPromptToolbar.add(MSDOSPromptButton[i]);
    }
    MSDOSPromptButton[0].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptMark.png")));
    MSDOSPromptButton[1].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptCopy.png")));
    MSDOSPromptButton[2].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptPaste.png")));
    MSDOSPromptButton[3]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptFullScreen.png")));
    MSDOSPromptButton[4]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptProperties.png")));
    MSDOSPromptButton[5]
      .setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptBackground.png")));
    MSDOSPromptButton[6].setIcon(new ImageIcon(getClass().getClassLoader().getResource("MSDOSPromptFont.png")));
    MSDOSPromptButton[0].setToolTipText("Mark");
    MSDOSPromptButton[1].setToolTipText("Copy");
    MSDOSPromptButton[2].setToolTipText("Paste");
    MSDOSPromptButton[3].setToolTipText("Full screen");
    MSDOSPromptButton[4].setToolTipText("Properties");
    MSDOSPromptButton[5].setToolTipText("Background");
    MSDOSPromptButton[6].setToolTipText("Font");
    MSDOSPromptButton[1].setEnabled(false);
    MSDOSPromptPanel = new JPanel();
    MSDOSPromptPanel.setBackground(Color.BLACK);
    MSDOSPromptPanel.setLayout(null);
    MSDOSPromptOpen.add(MSDOSPromptPanel);
    MSDOSPromptNormalURL = this.getClass().getClassLoader().getResource("MSDOSPromptNormalAnimation.gif");
    MSDOSPromptNormalLabel = new JLabel(new ImageIcon(MSDOSPromptNormalURL));
    MSDOSPromptNormalLabel.setBounds(0, 0, 1090, 456);
    MSDOSPromptPanel.add(MSDOSPromptNormalLabel);
    MSDOSPromptMaximizedURL = this.getClass().getClassLoader().getResource("MSDOSPromptMaximizedAnimation.gif");
    MSDOSPromptMaximizedLabel = new JLabel(new ImageIcon(MSDOSPromptMaximizedURL));
    MSDOSPromptMaximizedLabel.setBounds(0, 0, 1200, 837);
  }

  public void windowsExplorerMethod() {
    // Windows Explorer Open and Its Objects
    windowsExplorerOpen = new JFrame();
    windowsExplorerOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        for (int i = 7; i < 9; i++) {
          windowsExplorerPath = new TreePath(windowsExplorerAllFoldersNode[i].getPath());
        }
        windowsExplorerTree[0].collapsePath(windowsExplorerPath);
      }
    });
    windowsExplorerOpen.setBounds(50, 0, 600, 500);
    windowsExplorerOpen.setTitle("Exploring - Playdosgame (C:)");
    windowsExplorerAllFoldersNode = new DefaultMutableTreeNode[42];
    windowsExplorerAllFoldersNode[0] = new DefaultMutableTreeNode("Desktop");
    windowsExplorerAllFoldersNode[1] = new DefaultMutableTreeNode("My Computer");
    windowsExplorerAllFoldersNode[2] = new DefaultMutableTreeNode("Recycle Bin");
    for (int i = 1; i < 3; i++) {
      windowsExplorerAllFoldersNode[0].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[3] = new DefaultMutableTreeNode("Removable Disk (A:)");
    windowsExplorerAllFoldersNode[4] = new DefaultMutableTreeNode("Playdosgame (C:)");
    windowsExplorerAllFoldersNode[5] = new DefaultMutableTreeNode("Control Panel");
    windowsExplorerAllFoldersNode[6] = new DefaultMutableTreeNode("Printers");
    for (int i = 3; i < 7; i++) {
      windowsExplorerAllFoldersNode[1].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[7] = new DefaultMutableTreeNode("Program Files");
    windowsExplorerAllFoldersNode[8] = new DefaultMutableTreeNode("Windows");
    for (int i = 7; i < 9; i++) {
      windowsExplorerAllFoldersNode[4].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[9] = new DefaultMutableTreeNode("Accessories");
    windowsExplorerAllFoldersNode[10] = new DefaultMutableTreeNode("Microsoft Exchange");
    windowsExplorerAllFoldersNode[11] = new DefaultMutableTreeNode("Plus!");
    windowsExplorerAllFoldersNode[12] = new DefaultMutableTreeNode("The Microsoft Network");
    for (int i = 9; i < 13; i++) {
      windowsExplorerAllFoldersNode[7].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[13] = new DefaultMutableTreeNode("Command");
    windowsExplorerAllFoldersNode[14] = new DefaultMutableTreeNode("Config");
    windowsExplorerAllFoldersNode[15] = new DefaultMutableTreeNode("Cursors");
    windowsExplorerAllFoldersNode[16] = new DefaultMutableTreeNode("Fonts");
    windowsExplorerAllFoldersNode[17] = new DefaultMutableTreeNode("Help");
    windowsExplorerAllFoldersNode[18] = new DefaultMutableTreeNode("Inf");
    windowsExplorerAllFoldersNode[19] = new DefaultMutableTreeNode("Media");
    windowsExplorerAllFoldersNode[20] = new DefaultMutableTreeNode("Pif");
    windowsExplorerAllFoldersNode[21] = new DefaultMutableTreeNode("Recent");
    windowsExplorerAllFoldersNode[22] = new DefaultMutableTreeNode("SendTo");
    windowsExplorerAllFoldersNode[23] = new DefaultMutableTreeNode("ShellNew");
    windowsExplorerAllFoldersNode[24] = new DefaultMutableTreeNode("Spool");
    windowsExplorerAllFoldersNode[25] = new DefaultMutableTreeNode("Start Menu");
    windowsExplorerAllFoldersNode[26] = new DefaultMutableTreeNode("Sysbckup");
    windowsExplorerAllFoldersNode[27] = new DefaultMutableTreeNode("System");
    windowsExplorerAllFoldersNode[28] = new DefaultMutableTreeNode("Temp");
    for (int i = 13; i < 29; i++) {
      windowsExplorerAllFoldersNode[8].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[29] = new DefaultMutableTreeNode("Microsoft Internet");
    windowsExplorerAllFoldersNode[11].add(windowsExplorerAllFoldersNode[29]);
    windowsExplorerAllFoldersNode[30] = new DefaultMutableTreeNode("Printers");
    windowsExplorerAllFoldersNode[24].add(windowsExplorerAllFoldersNode[30]);
    windowsExplorerAllFoldersNode[31] = new DefaultMutableTreeNode("Programs");
    windowsExplorerAllFoldersNode[25].add(windowsExplorerAllFoldersNode[31]);
    windowsExplorerAllFoldersNode[32] = new DefaultMutableTreeNode("Color");
    windowsExplorerAllFoldersNode[33] = new DefaultMutableTreeNode("losubsys");
    windowsExplorerAllFoldersNode[34] = new DefaultMutableTreeNode("Vmm32");
    for (int i = 32; i < 35; i++) {
      windowsExplorerAllFoldersNode[27].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[35] = new DefaultMutableTreeNode("Accessories");
    windowsExplorerAllFoldersNode[36] = new DefaultMutableTreeNode("StartUp");
    for (int i = 35; i < 37; i++) {
      windowsExplorerAllFoldersNode[31].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerAllFoldersNode[37] = new DefaultMutableTreeNode("Games");
    windowsExplorerAllFoldersNode[38] = new DefaultMutableTreeNode("Internet Tools");
    windowsExplorerAllFoldersNode[39] = new DefaultMutableTreeNode("Multimedia");
    windowsExplorerAllFoldersNode[40] = new DefaultMutableTreeNode("System Tools");
    for (int i = 37; i < 41; i++) {
      windowsExplorerAllFoldersNode[35].add(windowsExplorerAllFoldersNode[i]);
    }
    windowsExplorerTree = new JTree[2];
    windowsExplorerTree[0] = new JTree(windowsExplorerAllFoldersNode[0]);
    for (int i = 7; i < 9; i++) {
      windowsExplorerPath = new TreePath(windowsExplorerAllFoldersNode[i].getPath());
    }
    windowsExplorerTree[0].collapsePath(windowsExplorerPath);
    windowsExplorerContentsNode = new DefaultMutableTreeNode[100];
    windowsExplorerContentsNode[0] = new DefaultMutableTreeNode("Program Files");
    windowsExplorerContentsNode[1] = new DefaultMutableTreeNode("Windows");
    windowsExplorerContentsNode[2] = new DefaultMutableTreeNode("Command");
    windowsExplorerContentsNode[3] = new DefaultMutableTreeNode("Contents of 'My Computer' Invisible Root Node");
    for (int i = 0; i < 3; i++) {
      windowsExplorerContentsNode[3].add(windowsExplorerContentsNode[i]);
    }
    windowsExplorerTree[1] = new JTree(windowsExplorerContentsNode[3]);
    windowsExplorerTree[1].setRootVisible(false);
    windowsExplorerSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
    windowsExplorerSplitPane.setDividerLocation(300);
    windowsExplorerSplitPane.setLeftComponent(windowsExplorerTree[0]);
    windowsExplorerSplitPane.setRightComponent(windowsExplorerTree[1]);
    windowsExplorerOpen.add(windowsExplorerSplitPane);
  }

  public void documentsReadmeMethod() {
    // Start Menu -> Documents -> Readme Open
    notepadIcon = new ImageIcon(getClass().getClassLoader().getResource("NotepadIcon.png"));
    documentsReadme_txt = new JFrame();
    documentsReadme_txt.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        documentsReadme_txt.setTitle("Readme - Notepad");
        documentsReadmeTextArea.setFont(courierNew20);
        documentsReadmeTextArea.setLineWrap(false);
        documentsReadmeSetText();
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            documentsReadmeScrollPane.getVerticalScrollBar().setValue(0);
          }
        });
      }
    });
    documentsReadme_txt.getContentPane().setBackground(white);
    documentsReadme_txt.setAlwaysOnTop(true);
    documentsReadme_txt.setBounds(50, 0, 700, 490);
    documentsReadme_txt.setIconImage(notepadIcon.getImage());
    documentsReadme_txt.setTitle("Readme - Notepad");
    documentsReadmeMenu = new JMenu[4];
    documentsReadmeMenu[0] = new JMenu("File");
    documentsReadmeMenu[1] = new JMenu("Edit");
    documentsReadmeMenu[2] = new JMenu("Search");
    documentsReadmeMenu[3] = new JMenu("Help");
    documentsReadmeMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      documentsReadmeMenu[i].setFont(MSSansSerif16);
      documentsReadmeMenuBar.add(documentsReadmeMenu[i]);
    }
    documentsReadmeMenuItem = new JMenuItem[20];
    documentsReadmeMenuItem[0] = new JMenuItem("New");
    documentsReadmeMenuItem[1] = new JMenuItem("Open...");
    documentsReadmeMenuItem[2] = new JMenuItem("Save");
    documentsReadmeMenuItem[3] = new JMenuItem("Save As...");
    for (int i = 0; i < 4; i++) {
      documentsReadmeMenu[0].add(documentsReadmeMenuItem[i]);
    }
    documentsReadmeSeparator = new JSeparator[6];
    for (int i = 0; i < 6; i++) {
      documentsReadmeSeparator[i] = new JSeparator();
    }
    documentsReadmeMenu[0].add(documentsReadmeSeparator[0]);
    documentsReadmeMenuItem[4] = new JMenuItem("Page Setup...");
    documentsReadmeMenuItem[5] = new JMenuItem("Print");
    documentsReadmeMenuItem[5].setEnabled(false);
    for (int i = 4; i < 6; i++) {
      documentsReadmeMenu[0].add(documentsReadmeMenuItem[i]);
    }
    documentsReadmeMenu[0].add(documentsReadmeSeparator[1]);
    documentsReadmeMenuItem[6] = new JMenuItem("Exit");
    documentsReadmeMenu[0].add(documentsReadmeMenuItem[6]);
    documentsReadmeMenuItem[7] = new JMenuItem("Undo");
    documentsReadmeMenuItem[7].setAccelerator(ctrlZ);
    documentsReadmeMenu[1].add(documentsReadmeMenuItem[7]);
    documentsReadmeMenu[1].add(documentsReadmeSeparator[2]);
    documentsReadmeMenuItem[8] = new JMenuItem("Cut");
    documentsReadmeMenuItem[8].setAccelerator(ctrlX);
    documentsReadmeMenuItem[9] = new JMenuItem("Copy");
    documentsReadmeMenuItem[9].setAccelerator(ctrlC);
    documentsReadmeMenuItem[10] = new JMenuItem("Paste");
    documentsReadmeMenuItem[10].setAccelerator(ctrlV);
    documentsReadmeMenuItem[11] = new JMenuItem("Delete");
    documentsReadmeMenuItem[11].setAccelerator(del);
    for (int i = 7; i < 12; i++) {
      documentsReadmeMenuItem[i].setEnabled(false);
    }
    for (int i = 8; i < 12; i++) {
      documentsReadmeMenu[1].add(documentsReadmeMenuItem[i]);
    }
    documentsReadmeMenu[1].add(documentsReadmeSeparator[3]);
    documentsReadmeMenuItem[12] = new JMenuItem("Select All");
    documentsReadmeMenuItem[13] = new JMenuItem("Time/Date");
    documentsReadmeMenuItem[13].setAccelerator(F5);
    for (int i = 12; i < 14; i++) {
      documentsReadmeMenu[1].add(documentsReadmeMenuItem[i]);
    }
    documentsReadmeMenu[1].add(documentsReadmeSeparator[4]);
    documentsReadmeMenuItem[14] = new JMenuItem("Word Wrap");
    documentsReadmeMenu[1].add(documentsReadmeMenuItem[14]);
    documentsReadmeMenuItem[15] = new JMenuItem("Find...");
    documentsReadmeMenuItem[16] = new JMenuItem("Find Next");
    documentsReadmeMenuItem[16].setAccelerator(F3);
    for (int i = 15; i < 17; i++) {
      documentsReadmeMenu[2].add(documentsReadmeMenuItem[i]);
    }
    documentsReadmeMenuItem[17] = new JMenuItem("Help Topics");
    documentsReadmeMenu[3].add(documentsReadmeMenuItem[17]);
    documentsReadmeMenu[3].add(documentsReadmeSeparator[5]);
    documentsReadmeMenuItem[18] = new JMenuItem("About Notepad");
    documentsReadmeMenu[3].add(documentsReadmeMenuItem[18]);
    for (int i = 0; i < 19; i++) {
      documentsReadmeMenuItem[i].addActionListener(this);
      documentsReadmeMenuItem[i].setFont(MSSansSerif16);
    }
    documentsReadmeTextArea = new JTextArea(10, 10);
    documentsReadmeTextArea.getDocument().addDocumentListener(new DocumentListener() {
      @Override
      public void removeUpdate(DocumentEvent e) {

      }

      @Override
      public void insertUpdate(DocumentEvent e) {

      }

      @Override
      public void changedUpdate(DocumentEvent arg0) {
        int responseSaveDocumentsReadme = JOptionPane.showConfirmDialog(null,
          "The text in the C:\\Windows\\Readme.TXT file has changed.\n\n" +
          "Do you want to save the changes?",
          "Notepad", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, exclamationMark);
        if (responseSaveDocumentsReadme == JOptionPane.YES_OPTION) {

        }
      }
    });
    documentsReadmeTextArea.setFont(courierNew20);
    documentsReadmeSetText();
    documentsReadmeScrollPane = new JScrollPane(documentsReadmeTextArea);
    documentsReadmeScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    documentsReadmeScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    documentsReadme_txt.add(documentsReadmeMenuBar, BorderLayout.NORTH);
    documentsReadme_txt.getContentPane().add(documentsReadmeScrollPane);
    /// About Notepad Dialog and Contents
    aboutNotepadDialog = new JDialog();
    aboutNotepadDialog.setAlwaysOnTop(true);
    aboutNotepadDialog.setBounds(100, 150, 530, 425);
    aboutNotepadDialog.setTitle("About Notepad");
    aboutNotepadOK = new JButton("OK");
    aboutNotepadOK.addActionListener(this);
    aboutNotepadOK.setBackground(gray);
    aboutNotepadOK.setBounds(410, 340, 100, 33);
    aboutNotepadOK.setFont(MSSansSerif12);
    aboutNotepad = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AboutNotepad.png")));
    aboutNotepad.setBounds(0, 0, 500, 305);
    aboutNotepadDialog.add(aboutNotepad);
    aboutNotepadDialog.add(aboutNotepadOK);
    aboutNotepadDialog.getContentPane().setBackground(gray);
    aboutNotepadDialog.setLayout(null);
  }

  @SuppressWarnings("unchecked")
  public void findAllFilesMethod() {
    // Find: All Files
    findAllFiles = new JFrame();
    findAllFiles.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        findAllFilesBrowseForFolder.dispose();
        findAllFilesTabbedPane.setSelectedIndex(0);
        findAllFilesComboBox[0].setSelectedItem("");
        findAllFilesComboBox[1].setSelectedIndex(2);
        for (int i = 2; i < 4; i++) {
          findAllFilesComboBox[i].setSelectedIndex(0);
        }
        findAllFilesIncludeSubfolders.setSelected(true);
        findAllFilesRadioButton[0].setSelected(true);
        findAllFilesRadioButton[1].setSelected(false);
        for (int i = 0; i < 2; i++) {
          findAllFilesSpinner[i].setValue(1);
        }
        findAllFilesSpinner[2].setValue(0);
        findAllFilesTextField[0].setText("7/9/<2");
        findAllFilesTextField[1].setText("10/7/<2");
        findAllFilesTextField[2].setText("");
      }
    });
    findAllFiles.addWindowStateListener(new WindowStateListener() {
      public void windowStateChanged(WindowEvent e) {
        if ((e.getNewState() == Frame.MAXIMIZED_BOTH)) {
          findAllFiles.setBounds(0, 0, 1250, 250);
        }
      }
    });
    findAllFiles.setAlwaysOnTop(true);
    findAllFiles.setBounds(50, 0, 670, 350);
    findAllFiles.setTitle("Find: All Files");
    findAllFilesButton = new JButton[5];
    findAllFilesButton[0] = new JButton("Find Now");
    findAllFilesButton[0].setBounds(520, 75, 100, 33);
    findAllFilesButton[1] = new JButton("Stop");
    findAllFilesButton[1].setBounds(520, 115, 100, 33);
    findAllFilesButton[1].setEnabled(false);
    findAllFilesButton[2] = new JButton("New Search");
    findAllFilesButton[2].setBounds(520, 155, 100, 33);
    findAllFilesButton[4] = new JButton();
    findAllFilesButton[4].setEnabled(false);
    for (int i = 0; i < 5; i++) {
      if (i == 3) {
        continue;
      }
      findAllFilesButton[i].addActionListener(this);
      findAllFilesButton[i].setFont(MSSansSerif12);
      findAllFiles.add(findAllFilesButton[i]);
    }
    findAllFilesMenu = new JMenu[6];
    findAllFilesMenu[0] = new JMenu("File");
    findAllFilesMenu[1] = new JMenu("Edit");
    findAllFilesMenu[2] = new JMenu("View");
    findAllFilesMenu[3] = new JMenu("Arrange Icons");
    findAllFilesMenu[4] = new JMenu("Options");
    findAllFilesMenu[5] = new JMenu("Help");
    findAllFilesMenuBar = new JMenuBar();
    findAllFilesSeparator = new JSeparator[6];
    for (int i = 0; i < 6; i++) {
      findAllFilesSeparator[i] = new JSeparator();
      findAllFilesMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 6; i++) {
      if (i == 3) {
        continue;
      }
      findAllFilesMenuBar.add(findAllFilesMenu[i]);
    }
    findAllFilesMenuItem = new JMenuItem[27];
    findAllFilesMenuItem[0] = new JMenuItem("Create Shortcut");
    findAllFilesMenuItem[1] = new JMenuItem("Delete");
    findAllFilesMenuItem[2] = new JMenuItem("Rename");
    findAllFilesMenuItem[3] = new JMenuItem("Properties");
    for (int i = 0; i < 4; i++) {
      findAllFilesMenu[0].add(findAllFilesMenuItem[i]);
    }
    findAllFilesMenuItem[0].add(findAllFilesSeparator[0]);
    findAllFilesMenuItem[4] = new JMenuItem("Open Containing Folder");
    findAllFilesMenu[0].add(findAllFilesMenuItem[4]);
    findAllFilesMenu[0].add(findAllFilesSeparator[1]);
    for (int i = 0; i < 5; i++) {
      findAllFilesMenuItem[i].setEnabled(false);
    }
    findAllFilesMenuItem[5] = new JMenuItem("Save Search");
    findAllFilesMenu[0].add(findAllFilesMenuItem[5]);
    findAllFilesMenu[0].add(findAllFilesSeparator[2]);
    findAllFilesMenuItem[6] = new JMenuItem("Close");
    findAllFilesMenu[0].add(findAllFilesMenuItem[6]);
    findAllFilesMenuItem[7] = new JMenuItem("Undo");
    findAllFilesMenuItem[7].setAccelerator(ctrlZ);
    findAllFilesMenu[1].add(findAllFilesMenuItem[7]);
    findAllFilesMenu[1].add(findAllFilesSeparator[3]);
    findAllFilesMenuItem[8] = new JMenuItem("Cut");
    findAllFilesMenuItem[8].setAccelerator(ctrlX);
    findAllFilesMenuItem[9] = new JMenuItem("Copy");
    for (int i = 7; i < 10; i++) {
      findAllFilesMenuItem[i].setEnabled(false);
    }
    for (int i = 8; i < 10; i++) {
      findAllFilesMenu[1].add(findAllFilesMenuItem[i]);
    }
    findAllFilesMenu[1].add(findAllFilesSeparator[4]);
    findAllFilesMenuItem[9].setAccelerator(ctrlC);
    findAllFilesMenuItem[10] = new JMenuItem("Select All");
    findAllFilesMenuItem[10].setAccelerator(ctrlA);
    findAllFilesMenuItem[11] = new JMenuItem("Invert Selection");
    for (int i = 10; i < 12; i++) {
      findAllFilesMenu[1].add(findAllFilesMenuItem[i]);
    }
    findAllFilesMenuItem[12] = new JMenuItem("Large Icons");
    findAllFilesMenuItem[13] = new JMenuItem("Small Icons");
    findAllFilesMenuItem[14] = new JMenuItem("List");
    findAllFilesMenuItem[15] = new JMenuItem("Details");
    for (int i = 12; i < 16; i++) {
      findAllFilesMenu[2].add(findAllFilesMenuItem[i]);
    }
    findAllFilesMenu[2].add(findAllFilesSeparator[5]);
    findAllFilesMenu[2].add(findAllFilesMenu[3]);
    findAllFilesMenuItem[16] = new JMenuItem("by Name");
    findAllFilesMenuItem[17] = new JMenuItem("by Folder");
    findAllFilesMenuItem[18] = new JMenuItem("by Type");
    findAllFilesMenuItem[19] = new JMenuItem("by Size");
    findAllFilesMenuItem[20] = new JMenuItem("by Date");
    findAllFilesMenuItem[21] = new JMenuItem("Auto Arrange");
    findAllFilesMenuItem[21].setEnabled(false);
    for (int i = 16; i < 22; i++) {
      findAllFilesMenu[3].add(findAllFilesMenuItem[i]);
    }
    findAllFilesMenuItem[22] = new JMenuItem("Line up Icons");
    findAllFilesMenuItem[22].setEnabled(false);
    findAllFilesMenu[2].add(findAllFilesMenuItem[22]);
    findAllFilesCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    findAllFilesCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Case Sensitive");
    findAllFilesCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Save Results");
    for (int i = 0; i < 2; i++) {
      findAllFilesCheckBoxMenuItem[i].addActionListener(this);
      findAllFilesCheckBoxMenuItem[i].setFont(MSSansSerif16);
      findAllFilesMenu[4].add(findAllFilesCheckBoxMenuItem[i]);
    }
    findAllFilesMenuItem[23] = new JMenuItem("Help Topics");
    findAllFilesMenuItem[24] = new JMenuItem("What's This?");
    for (int i = 23; i < 25; i++) {
      findAllFilesMenu[5].add(findAllFilesMenuItem[i]);
    }
    for (int i = 0; i < 25; i++) {
      findAllFilesMenuItem[i].addActionListener(this);
      findAllFilesMenuItem[i].setFont(MSSansSerif16);
    }
    findAllFiles.add(findAllFilesMenuBar, BorderLayout.NORTH);
    // Find All Files: Name & Location, Date Modified, Advanced
    findAllFilesPanel = new JPanel[3];
    for (int i = 0; i < 3; i++) {
      findAllFilesPanel[i] = new JPanel();
      findAllFilesPanel[i].setBorder(BorderFactory.createRaisedBevelBorder());
      findAllFilesPanel[i].setLayout(null);
    }
    findAllFilesTabbedPane = new JTabbedPane();
    findAllFilesTabbedPane.addTab("Name & Location", findAllFilesPanel[0]);
    findAllFilesTabbedPane.addTab("Date Modified", findAllFilesPanel[1]);
    findAllFilesTabbedPane.addTab("Advanced", findAllFilesPanel[2]);
    findAllFilesTabbedPane.setFont(MSSansSerif16);
    findAllFilesTabbedPane.setSize(300, 200);
    findAllFiles.add(findAllFilesTabbedPane, BorderLayout.CENTER);
    findAllFilesText = new JLabel[9];
    findAllFilesText[0] = new JLabel("Named:");
    findAllFilesText[1] = new JLabel("Look in:");
    findAllFilesText[0].setBounds(20, 50, 100, 30);
    findAllFilesText[1].setBounds(20, 100, 100, 30);
    for (int i = 0; i < 2; i++) {
      findAllFilesPanel[0].add(findAllFilesText[i]);
    }
    findAllFilesComboBox = new JComboBox[4];
    for (int i = 0; i < 4; i++) {
      findAllFilesComboBox[i] = new JComboBox < String > ();
    }
    findAllFilesComboBox[1].addItem("My Computer");
    findAllFilesComboBox[1].addItem("Removable Disk (A:)");
    findAllFilesComboBox[1].addItem("Playdosgame (C:)");
    findAllFilesComboBox[0].setBounds(100, 50, 300, 30);
    findAllFilesComboBox[1].setBounds(100, 100, 200, 30);
    findAllFilesComboBox[1].setSelectedIndex(2);
    for (int i = 0; i < 2; i++) {
      findAllFilesComboBox[i].setEditable(true);
      findAllFilesPanel[0].add(findAllFilesComboBox[i]);
    }
    findAllFilesButton[3] = new JButton("Browse...");
    findAllFilesButton[3].setBounds(310, 100, 100, 33);
    findAllFilesButton[3].addActionListener(this);
    findAllFilesButton[3].setFont(MSSansSerif12);
    // Browse for Folder in Find : All Files
    findAllFilesBrowseForFolder = new JDialog();
    findAllFilesBrowseForFolder.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        findAllFiles.setAlwaysOnTop(true);
      }
    });
    findAllFilesBrowseForFolder.setAlwaysOnTop(true);
    findAllFilesBrowseForFolder.setBounds(100, 125, 500, 500);
    findAllFilesBrowseForFolder.setTitle("Browse for Folder");
    findAllFilesBrowseForFolderText = new JLabel(
      "<html>Select the folder where you want to begin the<br/> search.<html>");
    findAllFilesBrowseForFolderText.setFont(MSSansSerif16);
    findAllFilesBrowseForFolder.add(findAllFilesBrowseForFolderText, BorderLayout.NORTH);
    findAllFilesBrowseForFolderNode = new DefaultMutableTreeNode[42];
    findAllFilesBrowseForFolderNode[0] = new DefaultMutableTreeNode("Desktop");
    findAllFilesBrowseForFolderNode[1] = new DefaultMutableTreeNode("My Computer");
    findAllFilesBrowseForFolderNode[2] = new DefaultMutableTreeNode("Recycle Bin");
    for (int i = 1; i < 3; i++) {
      findAllFilesBrowseForFolderNode[0].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[3] = new DefaultMutableTreeNode("Removable Disk (A:)");
    findAllFilesBrowseForFolderNode[4] = new DefaultMutableTreeNode("Playdosgame (C:)");
    findAllFilesBrowseForFolderNode[5] = new DefaultMutableTreeNode("Control Panel");
    findAllFilesBrowseForFolderNode[6] = new DefaultMutableTreeNode("Printers");
    for (int i = 3; i < 7; i++) {
      findAllFilesBrowseForFolderNode[1].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[7] = new DefaultMutableTreeNode("Program Files");
    findAllFilesBrowseForFolderNode[8] = new DefaultMutableTreeNode("Windows");
    for (int i = 7; i < 9; i++) {
      findAllFilesBrowseForFolderNode[4].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[9] = new DefaultMutableTreeNode("Accessories");
    findAllFilesBrowseForFolderNode[10] = new DefaultMutableTreeNode("Microsoft Exchange");
    findAllFilesBrowseForFolderNode[11] = new DefaultMutableTreeNode("Plus!");
    findAllFilesBrowseForFolderNode[12] = new DefaultMutableTreeNode("The Microsoft Network");
    for (int i = 9; i < 13; i++) {
      findAllFilesBrowseForFolderNode[7].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[13] = new DefaultMutableTreeNode("Command");
    findAllFilesBrowseForFolderNode[14] = new DefaultMutableTreeNode("Config");
    findAllFilesBrowseForFolderNode[15] = new DefaultMutableTreeNode("Cursors");
    findAllFilesBrowseForFolderNode[16] = new DefaultMutableTreeNode("Fonts");
    findAllFilesBrowseForFolderNode[17] = new DefaultMutableTreeNode("Help");
    findAllFilesBrowseForFolderNode[18] = new DefaultMutableTreeNode("Inf");
    findAllFilesBrowseForFolderNode[19] = new DefaultMutableTreeNode("Media");
    findAllFilesBrowseForFolderNode[20] = new DefaultMutableTreeNode("Pif");
    findAllFilesBrowseForFolderNode[21] = new DefaultMutableTreeNode("Recent");
    findAllFilesBrowseForFolderNode[22] = new DefaultMutableTreeNode("SendTo");
    findAllFilesBrowseForFolderNode[23] = new DefaultMutableTreeNode("ShellNew");
    findAllFilesBrowseForFolderNode[24] = new DefaultMutableTreeNode("Spool");
    findAllFilesBrowseForFolderNode[25] = new DefaultMutableTreeNode("Start Menu");
    findAllFilesBrowseForFolderNode[26] = new DefaultMutableTreeNode("Sysbckup");
    findAllFilesBrowseForFolderNode[27] = new DefaultMutableTreeNode("System");
    findAllFilesBrowseForFolderNode[28] = new DefaultMutableTreeNode("Temp");
    for (int i = 13; i < 29; i++) {
      findAllFilesBrowseForFolderNode[8].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[29] = new DefaultMutableTreeNode("Microsoft Internet");
    findAllFilesBrowseForFolderNode[11].add(findAllFilesBrowseForFolderNode[29]);
    findAllFilesBrowseForFolderNode[30] = new DefaultMutableTreeNode("Printers");
    findAllFilesBrowseForFolderNode[24].add(findAllFilesBrowseForFolderNode[30]);
    findAllFilesBrowseForFolderNode[31] = new DefaultMutableTreeNode("Programs");
    findAllFilesBrowseForFolderNode[25].add(findAllFilesBrowseForFolderNode[31]);
    findAllFilesBrowseForFolderNode[32] = new DefaultMutableTreeNode("Color");
    findAllFilesBrowseForFolderNode[33] = new DefaultMutableTreeNode("losubsys");
    findAllFilesBrowseForFolderNode[34] = new DefaultMutableTreeNode("Vmm32");
    for (int i = 32; i < 35; i++) {
      findAllFilesBrowseForFolderNode[27].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[35] = new DefaultMutableTreeNode("Accessories");
    findAllFilesBrowseForFolderNode[36] = new DefaultMutableTreeNode("StartUp");
    for (int i = 35; i < 37; i++) {
      findAllFilesBrowseForFolderNode[31].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderNode[37] = new DefaultMutableTreeNode("Games");
    findAllFilesBrowseForFolderNode[38] = new DefaultMutableTreeNode("Internet Tools");
    findAllFilesBrowseForFolderNode[39] = new DefaultMutableTreeNode("Multimedia");
    findAllFilesBrowseForFolderNode[40] = new DefaultMutableTreeNode("System Tools");
    for (int i = 37; i < 41; i++) {
      findAllFilesBrowseForFolderNode[35].add(findAllFilesBrowseForFolderNode[i]);
    }
    findAllFilesBrowseForFolderTree = new JTree[2];
    findAllFilesBrowseForFolderTree[0] = new JTree(findAllFilesBrowseForFolderNode[0]);
    findAllFilesBrowseForFolderContentsNode = new DefaultMutableTreeNode[100];
    findAllFilesBrowseForFolderContentsNode[0] = new DefaultMutableTreeNode("Removable Disk (A:)");
    findAllFilesBrowseForFolderContentsNode[1] = new DefaultMutableTreeNode("Playdosgame (C:)");
    findAllFilesBrowseForFolderContentsNode[2] = new DefaultMutableTreeNode("Control Panel");
    findAllFilesBrowseForFolderContentsNode[3] = new DefaultMutableTreeNode("Printers");
    findAllFilesBrowseForFolderContentsNode[4] = new DefaultMutableTreeNode(
      "Contents of 'My Computer' Invisible Root Node");
    for (int i = 0; i < 4; i++) {
      findAllFilesBrowseForFolderContentsNode[4].add(findAllFilesBrowseForFolderContentsNode[i]);
    }
    findAllFilesBrowseForFolderTree[1] = new JTree(findAllFilesBrowseForFolderContentsNode[4]);
    findAllFilesBrowseForFolderTree[1].setRootVisible(false);
    findAllFilesBrowseForFolderPanel = new JPanel();
    findAllFilesBrowseForFolderPanel.add(findAllFilesBrowseForFolderTree[0]);
    findAllFilesBrowseForFolder.add(findAllFilesBrowseForFolderPanel, BorderLayout.CENTER);
    findAllFilesPanel[0].add(findAllFilesButton[3]);
    findAllFilesBrowseForFolderButton = new JButton[2];
    findAllFilesBrowseForFolderButton[0] = new JButton("OK");
    findAllFilesBrowseForFolderButton[1] = new JButton("Cancel");
    findAllFilesBrowseForFolderButton[0].setEnabled(false);
    for (int i = 0; i < 2; i++) {
      findAllFilesBrowseForFolderButton[i].addActionListener(this);
      findAllFilesBrowseForFolderButton[i].setFont(MSSansSerif16);
      findAllFilesBrowseForFolder.add(findAllFilesBrowseForFolderButton[i], BorderLayout.SOUTH);
    }
    // Find All Files Includ Subfolders
    findAllFilesIncludeSubfolders = new JCheckBox("Include subfolders");
    findAllFilesIncludeSubfolders.addActionListener(this);
    findAllFilesIncludeSubfolders.setBounds(100, 150, 200, 30);
    findAllFilesIncludeSubfolders.setFont(MSSansSerif16);
    findAllFilesIncludeSubfolders.setSelected(true);
    findAllFilesPanel[0].add(findAllFilesIncludeSubfolders);
    findAllFilesRadioButton = new JRadioButton[5];
    findAllFilesRadioButton[0] = new JRadioButton("All files");
    findAllFilesRadioButton[1] = new JRadioButton("Find all files created or modified:");
    findAllFilesRadioButton[2] = new JRadioButton("between");
    findAllFilesRadioButton[0].setBounds(20, 20, 100, 30);
    findAllFilesRadioButton[1].setBounds(20, 55, 300, 30);
    findAllFilesRadioButton[2].setBounds(50, 90, 100, 30);
    findAllFilesRadioButton[0].setSelected(true);
    findAllFilesTextField = new JTextField[3];
    findAllFilesTextField[0] = new JTextField("7/9/<2");
    findAllFilesTextField[1] = new JTextField("10/7/<2");
    findAllFilesTextField[0].setBounds(150, 90, 120, 30);
    findAllFilesTextField[1].setBounds(300, 90, 120, 30);
    for (int i = 0; i < 2; i++) {
      findAllFilesTextField[i].setEnabled(false);
      findAllFilesPanel[1].add(findAllFilesTextField[i]);
    }
    findAllFilesRadioButton[3] = new JRadioButton("during the previous");
    findAllFilesRadioButton[4] = new JRadioButton("during the previous");
    findAllFilesRadioButton[3].setBounds(50, 125, 175, 30);
    findAllFilesRadioButton[4].setBounds(50, 160, 175, 30);
    findAllFilesSpinner = new JSpinner[3];
    findAllFilesSpinnerModel = new SpinnerNumberModel[3];
    findAllFilesButtonGroup = new ButtonGroup[2];
    for (int i = 0; i < 2; i++) {
      findAllFilesSpinnerModel[i] = new SpinnerNumberModel(1, 0, 999, 1);
      findAllFilesSpinner[i] = new JSpinner(findAllFilesSpinnerModel[i]);
      findAllFilesSpinner[i].setEnabled(false);
      findAllFilesPanel[1].add(findAllFilesSpinner[i]);
      findAllFilesButtonGroup[i] = new ButtonGroup();
      findAllFilesButtonGroup[0].add(findAllFilesRadioButton[i]);
    }
    findAllFilesSpinner[0].setBounds(220, 125, 60, 30);
    findAllFilesSpinner[1].setBounds(220, 160, 60, 30);
    for (int i = 0; i < 5; i++) {
      findAllFilesRadioButton[i].addActionListener(this);
      findAllFilesRadioButton[i].setFont(MSSansSerif16);
      findAllFilesPanel[1].add(findAllFilesRadioButton[i]);
    }
    findAllFilesText[2] = new JLabel("and");
    findAllFilesText[3] = new JLabel("month(s)");
    findAllFilesText[4] = new JLabel("day(s)");
    findAllFilesText[2].setBounds(275, 90, 25, 30);
    findAllFilesText[3].setBounds(300, 125, 70, 30);
    findAllFilesText[4].setBounds(300, 160, 70, 30);
    for (int i = 2; i < 5; i++) {
      findAllFilesButtonGroup[1].add(findAllFilesRadioButton[i]);
      findAllFilesPanel[1].add(findAllFilesText[i]);
    }
    findAllFilesText[5] = new JLabel("Of type:");
    findAllFilesText[6] = new JLabel("Containing text:");
    findAllFilesText[7] = new JLabel("Size is:");
    findAllFilesText[5].setBounds(20, 50, 100, 30);
    findAllFilesText[6].setBounds(20, 100, 150, 30);
    findAllFilesText[7].setBounds(20, 150, 100, 30);
    for (int i = 5; i < 8; i++) {
      findAllFilesPanel[2].add(findAllFilesText[i]);
    }
    findAllFilesOfType = new String[46];
    findAllFilesOfType[0] = "All Files and Folders";
    findAllFilesOfType[1] = "AIFF Format Sound";
    findAllFilesOfType[2] = "Animated Cursor";
    findAllFilesOfType[3] = "Application";
    findAllFilesOfType[4] = "Application Extension";
    findAllFilesOfType[5] = "AU Format Sound";
    findAllFilesOfType[6] = "Bitmap Image";
    findAllFilesOfType[7] = "Configuration Settings";
    findAllFilesOfType[8] = "Cursor";
    findAllFilesOfType[9] = "Device driver";
    findAllFilesOfType[10] = "Folder";
    findAllFilesOfType[11] = "Font file";
    findAllFilesOfType[12] = "GIF Image";
    findAllFilesOfType[13] = "Help File";
    findAllFilesOfType[14] = "ICC profile";
    findAllFilesOfType[15] = "Icon";
    findAllFilesOfType[16] = "Internet Document (HTML)";
    findAllFilesOfType[17] = "Internet Shortcut";
    findAllFilesOfType[18] = "JPEG Image";
    findAllFilesOfType[19] = "Microsoft Program Group";
    findAllFilesOfType[20] = "MIDI Instrument Definition";
    findAllFilesOfType[21] = "MIDI Sequence";
    findAllFilesOfType[22] = "MS-DOS Application";
    findAllFilesOfType[23] = "MS-DOS Batch File";
    findAllFilesOfType[24] = "MSN Central";
    findAllFilesOfType[25] = "MSN Phone Book";
    findAllFilesOfType[26] = "RealAudio";
    findAllFilesOfType[27] = "Registration Entries";
    findAllFilesOfType[28] = "Rich Text Document";
    findAllFilesOfType[29] = "Saved Search";
    findAllFilesOfType[30] = "Scrap object";
    findAllFilesOfType[31] = "Screen Saver";
    findAllFilesOfType[32] = "Setup Information";
    findAllFilesOfType[33] = "Shortcut";
    findAllFilesOfType[34] = "Shorcut into a document";
    findAllFilesOfType[35] = "Shortcut to MS-DOS Program";
    findAllFilesOfType[36] = "Shortcut to The Microsoft Network";
    findAllFilesOfType[37] = "System file";
    findAllFilesOfType[38] = "Text Document";
    findAllFilesOfType[39] = "TrueType Font File";
    findAllFilesOfType[40] = "Video Clip";
    findAllFilesOfType[41] = "Virtual device driver";
    findAllFilesOfType[42] = "Wave Sound";
    findAllFilesOfType[43] = "WordPad Document";
    findAllFilesOfType[44] = "Write Document";
    findAllFilesOfType[45] = "XBM Image";
    for (int i = 0; i < 46; i++) {
      findAllFilesComboBox[2].addItem(findAllFilesOfType[i]);
    }
    findAllFilesComboBox[2].setBounds(140, 50, 330, 30);
    findAllFilesComboBox[2].setSelectedIndex(0);
    findAllFilesPanel[2].add(findAllFilesComboBox[2]);
    findAllFilesTextField[2] = new JTextField();
    findAllFilesTextField[2].setBounds(140, 100, 330, 30);
    findAllFilesPanel[2].add(findAllFilesTextField[2]);
    findAllFilesComboBox[3].addItem("");
    findAllFilesComboBox[3].addItem("At least");
    findAllFilesComboBox[3].addItem("At most");
    findAllFilesComboBox[3].setBounds(140, 150, 100, 30);
    findAllFilesComboBox[3].setSelectedIndex(0);
    findAllFilesPanel[2].add(findAllFilesComboBox[3]);
    findAllFilesSpinnerModel[2] = new SpinnerNumberModel(0, 0, 32767, 1);
    findAllFilesSpinner[2] = new JSpinner(findAllFilesSpinnerModel[2]);
    findAllFilesSpinner[2].setBounds(265, 150, 75, 30);
    findAllFilesSpinner[2].setValue(0);
    findAllFilesPanel[2].add(findAllFilesSpinner[2]);
    findAllFilesText[8] = new JLabel("KB");
    findAllFilesText[8].setBounds(375, 150, 30, 30);
    findAllFilesPanel[2].add(findAllFilesText[8]);
    for (int i = 0; i < 4; i++) {
      findAllFilesComboBox[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 9; i++) {
      findAllFilesText[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 3; i++) {
      findAllFilesSpinner[i].setFont(MSSansSerif16);
      findAllFilesTextField[i].setFont(MSSansSerif16);
    }
  }

  public void startMenuHelpMethod() {
    // Start Menu Help Topics: Windows Help
    helpPath = new TreePath[10];
    helpTopicsWindowsHelp = new JDialog();
    helpTopicsWindowsHelp.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        findSetupWizard.dispose();
        helpTopicsTree.setSelectionRow(0);
        helpIndexList.clearSelection();
        for (int i = 0; i < 6; i++) {
          helpPath[0] = new TreePath(helpTopicsNode[i].getPath());
        }
        for (int i = 0; i < 10; i++) {
          helpTopicsTree.collapsePath(helpPath[i]);
        }
      }
    });
    helpTopicsWindowsHelp.setAlwaysOnTop(true);
    helpTopicsWindowsHelp.setBounds(100, 0, 650, 638);
    helpTopicsWindowsHelp.setLayout(null);
    helpTopicsWindowsHelp.setResizable(false);
    helpTopicsWindowsHelp.setTitle("Help Topics: Windows Help");
    // Contents Tab
    helpText = new JLabel[3];
    helpText[0] = new JLabel(
      "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
    helpText[0].setBackground(gray);
    helpText[0].setBounds(25, 20, 550, 30);
    helpText[0].setOpaque(true);
    helpContents = new JPanel();
    helpContents.setBackground(white);
    helpContents.setBounds(100, 50, 600, 400);
    helpContents.setLayout(new BorderLayout());
    helpContents.add(helpText[0], BorderLayout.NORTH);
    helpScrollPane = new JScrollPane[3];
    helpScrollPane[0] = new JScrollPane(helpContents);
    helpRenderer = new DefaultTreeCellRenderer();
    helpRenderer.setBackgroundSelectionColor(win95Blue);
    helpRenderer.setBorderSelectionColor(nodeBorderYellow);
    helpRenderer.setTextSelectionColor(white);
    helpRenderer.setFont(MSSansSerif16);
    // If the following code snippet is executed, the exported program would result
    // in an unrunnable exe file
    /*
     * helpBookClosedIcon=new
     * ImageIcon(getClass().getClassLoader().getResource("HelpBookClosedIcon.png"));
     * helpBookOpenIcon=new
     * ImageIcon(getClass().getClassLoader().getResource("HelpBookOpenIcon.png"));
     * helpQuestionMarkIcon=new
     * ImageIcon(getClass().getClassLoader().getResource("HelpQuestionMarkIcon.png")
     * ); helpRenderer.setClosedIcon(helpBookClosedIcon);
     * helpRenderer.setLeafIcon(helpQuestionMarkIcon);
     * helpRenderer.setOpenIcon(helpBookOpenIcon);
     */
    helpTopicsNode = new DefaultMutableTreeNode[7];
    helpTopicsNode[0] = new DefaultMutableTreeNode("Tour: Ten minutes to using Windows");
    helpTopicsNode[1] = new DefaultMutableTreeNode("If you've used Windows before");
    helpTopicsNode[2] = new DefaultMutableTreeNode("Introducing Windows");
    helpTopicsNode[3] = new DefaultMutableTreeNode("How To...");
    helpTopicsNode[4] = new DefaultMutableTreeNode("Tips and Tricks");
    helpTopicsNode[5] = new DefaultMutableTreeNode("Troubleshooting");
    helpTopicsNode[6] = new DefaultMutableTreeNode("Invisible Root Node");
    for (int i = 0; i < 6; i++) {
      helpTopicsNode[6].add(helpTopicsNode[i]);
    }
    helpTopicsTree = new JTree(helpTopicsNode[6]);
    helpTopicsTree.putClientProperty("JTree.lineStyle", "None");
    helpTopicsTree.setBackground(white);
    helpTopicsTree.setCellRenderer(helpRenderer);
    helpTopicsTree.setSelectionRow(0);
    helpTopicsTree.setRootVisible(false);
    helpScrollPane[1] = new JScrollPane(helpTopicsTree);
    helpContents.add(helpScrollPane[1]);
    introducingWindowsNode = new DefaultMutableTreeNode[2];
    introducingWindowsNode[0] = new DefaultMutableTreeNode("Welcome");
    introducingWindowsNode[1] = new DefaultMutableTreeNode("Using Windows Accessories");
    for (int i = 0; i < 2; i++) {
      helpTopicsNode[2].add(introducingWindowsNode[i]);
    }
    welcomeNode = new DefaultMutableTreeNode[3];
    welcomeNode[0] = new DefaultMutableTreeNode("Registering Windows 95 online");
    welcomeNode[1] = new DefaultMutableTreeNode("License agreement questions and answers");
    welcomeNode[2] = new DefaultMutableTreeNode("A List of What's New");
    for (int i = 0; i < 3; i++) {
      introducingWindowsNode[0].add(welcomeNode[i]);
    }
    aListOfWhatsNewNode = new DefaultMutableTreeNode[6];
    aListOfWhatsNewNode[0] = new DefaultMutableTreeNode("A new look and feel");
    aListOfWhatsNewNode[1] = new DefaultMutableTreeNode("Faster ways to get your work done");
    aListOfWhatsNewNode[2] = new DefaultMutableTreeNode("More ways to customize Windows");
    aListOfWhatsNewNode[3] = new DefaultMutableTreeNode("New programs and accessories");
    aListOfWhatsNewNode[4] = new DefaultMutableTreeNode("Support for portable computers");
    aListOfWhatsNewNode[5] = new DefaultMutableTreeNode("Improved networking");
    for (int i = 0; i < 6; i++) {
      welcomeNode[2].add(aListOfWhatsNewNode[i]);
    }
    usingWindowsAccessoriesNode = new DefaultMutableTreeNode[6];
    usingWindowsAccessoriesNode[0] = new DefaultMutableTreeNode("For General Use");
    usingWindowsAccessoriesNode[1] = new DefaultMutableTreeNode("For Writing and Drawing");
    usingWindowsAccessoriesNode[2] = new DefaultMutableTreeNode("For Communicating with Others");
    usingWindowsAccessoriesNode[3] = new DefaultMutableTreeNode("For Sound and Video");
    usingWindowsAccessoriesNode[4] = new DefaultMutableTreeNode("For Using with Two Computers");
    usingWindowsAccessoriesNode[5] = new DefaultMutableTreeNode("For Maintaining Your Computer");
    for (int i = 0; i < 6; i++) {
      introducingWindowsNode[1].add(usingWindowsAccessoriesNode[i]);
    }
    forGeneralUseNode = new DefaultMutableTreeNode[3];
    forGeneralUseNode[0] = new DefaultMutableTreeNode("Windows games");
    forGeneralUseNode[1] = new DefaultMutableTreeNode("Calculator: for making calculations");
    forGeneralUseNode[2] = new DefaultMutableTreeNode("Microsoft Exposition: a catalog of Microsoft products");
    for (int i = 0; i < 3; i++) {
      usingWindowsAccessoriesNode[0].add(forGeneralUseNode[i]);
    }
    forWritingAndDrawingNode = new DefaultMutableTreeNode[3];
    forWritingAndDrawingNode[0] = new DefaultMutableTreeNode("Paint: for creating a picture");
    forWritingAndDrawingNode[1] = new DefaultMutableTreeNode("WordPad: for writing and formatting documents");
    forWritingAndDrawingNode[2] = new DefaultMutableTreeNode("NotePad: for writing and editing text files");
    for (int i = 0; i < 3; i++) {
      usingWindowsAccessoriesNode[1].add(forWritingAndDrawingNode[i]);
    }
    forCommunicatingWithOthersNode = new DefaultMutableTreeNode[5];
    forCommunicatingWithOthersNode[0] = new DefaultMutableTreeNode(
      "The Microsoft Network: for using the Microsoft online service");
    forCommunicatingWithOthersNode[1] = new DefaultMutableTreeNode("Phone Dialer: for dialing from your computer");
    forCommunicatingWithOthersNode[2] = new DefaultMutableTreeNode(
      "Mirosoft Exchange: for sending and receiving messages");
    forCommunicatingWithOthersNode[3] = new DefaultMutableTreeNode(
      "Microsoft Fax: for sending and receiving fax messages");
    forCommunicatingWithOthersNode[4] = new DefaultMutableTreeNode(
      "HypterTerminal: for connecting to other computers");
    for (int i = 0; i < 5; i++) {
      usingWindowsAccessoriesNode[2].add(forCommunicatingWithOthersNode[i]);
    }
    forSoundAndVideoNode = new DefaultMutableTreeNode[4];
    forSoundAndVideoNode[0] = new DefaultMutableTreeNode("CD Player: for playing compact discs");
    forSoundAndVideoNode[1] = new DefaultMutableTreeNode("Media Player: for playing multimedia files");
    forSoundAndVideoNode[2] = new DefaultMutableTreeNode("Sound Recorder: for creating and playing sound files");
    forSoundAndVideoNode[3] = new DefaultMutableTreeNode("Volume Control: for adjusting sound level");
    for (int i = 0; i < 4; i++) {
      usingWindowsAccessoriesNode[3].add(forSoundAndVideoNode[i]);
    }
    forUsingWithTwoComputersNode = new DefaultMutableTreeNode[3];
    forUsingWithTwoComputersNode[0] = new DefaultMutableTreeNode(
      "Dial-Up Networking for connecting by using a modem");
    forUsingWithTwoComputersNode[1] = new DefaultMutableTreeNode(
      "Direct Cable Connection: for connecting by using a cable");
    forUsingWithTwoComputersNode[2] = new DefaultMutableTreeNode("Briefcase: for synchronizing files");
    for (int i = 0; i < 3; i++) {
      usingWindowsAccessoriesNode[4].add(forUsingWithTwoComputersNode[i]);
    }
    forMaintainingYourComputerNodeA = new DefaultMutableTreeNode[5];
    forMaintainingYourComputerNodeA[0] = new DefaultMutableTreeNode("Backup: for backing up your files");
    forMaintainingYourComputerNodeA[1] = new DefaultMutableTreeNode(
      "Backup Agents: for Netware and Windows NT servers");
    forMaintainingYourComputerNodeA[2] = new DefaultMutableTreeNode("DriveSpace: for increasing disk space");
    forMaintainingYourComputerNodeA[3] = new DefaultMutableTreeNode(
      "Disk Defragmenter: for speeding up your hard disk");
    forMaintainingYourComputerNodeA[4] = new DefaultMutableTreeNode(
      "ScanDisk: for detecting and repairing disk errors");
    for (int i = 0; i < 5; i++) {
      usingWindowsAccessoriesNode[5].add(forMaintainingYourComputerNodeA[i]);
    }
    howToNode = new DefaultMutableTreeNode[12];
    howToNode[0] = new DefaultMutableTreeNode("Run Programs");
    howToNode[1] = new DefaultMutableTreeNode("Work with Files and Folders");
    howToNode[2] = new DefaultMutableTreeNode("Print");
    howToNode[3] = new DefaultMutableTreeNode("Use a Network");
    howToNode[4] = new DefaultMutableTreeNode("Communicate wth Others");
    howToNode[5] = new DefaultMutableTreeNode("Safeguard Your Work");
    howToNode[6] = new DefaultMutableTreeNode("Change Windows Settings");
    howToNode[7] = new DefaultMutableTreeNode("Set Up Hardware");
    howToNode[8] = new DefaultMutableTreeNode("Maintain Your Computer");
    howToNode[9] = new DefaultMutableTreeNode("Use a Portable Computer with Windows");
    howToNode[10] = new DefaultMutableTreeNode("Set Up Windows Accessibility Features");
    howToNode[11] = new DefaultMutableTreeNode("Use Help");
    for (int i = 0; i < 12; i++) {
      helpTopicsNode[3].add(howToNode[i]);
    }
    runProgramsNode = new DefaultMutableTreeNode[8];
    runProgramsNode[0] = new DefaultMutableTreeNode("Starting a program");
    runProgramsNode[1] = new DefaultMutableTreeNode("Switching between programs");
    runProgramsNode[2] = new DefaultMutableTreeNode("Installing a program from a floppy disk or CD-ROM");
    runProgramsNode[3] = new DefaultMutableTreeNode("Installing a program from a network");
    runProgramsNode[4] = new DefaultMutableTreeNode("Removing a program from your computer");
    runProgramsNode[5] = new DefaultMutableTreeNode("Starting an MS-DOS windows");
    runProgramsNode[6] = new DefaultMutableTreeNode("Optimizing MS-DOS programs");
    runProgramsNode[7] = new DefaultMutableTreeNode("Shutting down your computer");
    for (int i = 0; i < 8; i++) {
      howToNode[0].add(runProgramsNode[i]);
    }
    workWithFilesAndFoldersNode = new DefaultMutableTreeNode[10];
    workWithFilesAndFoldersNode[0] = new DefaultMutableTreeNode("Finding a file or folder");
    workWithFilesAndFoldersNode[1] = new DefaultMutableTreeNode("Opening a document you've used recently");
    workWithFilesAndFoldersNode[2] = new DefaultMutableTreeNode("Seeing what's on your computer");
    workWithFilesAndFoldersNode[3] = new DefaultMutableTreeNode("Copying a file or folder");
    workWithFilesAndFoldersNode[4] = new DefaultMutableTreeNode("Moving a file or folder");
    workWithFilesAndFoldersNode[5] = new DefaultMutableTreeNode("Deleting a file or folder");
    workWithFilesAndFoldersNode[6] = new DefaultMutableTreeNode("Retrieving deleted files or shortcuts");
    workWithFilesAndFoldersNode[7] = new DefaultMutableTreeNode("Copying a file to a floppy disk");
    workWithFilesAndFoldersNode[8] = new DefaultMutableTreeNode("Creating a folder");
    workWithFilesAndFoldersNode[9] = new DefaultMutableTreeNode("Changing the name of a file or folder");
    for (int i = 0; i < 10; i++) {
      howToNode[1].add(workWithFilesAndFoldersNode[i]);
    }
    printNode = new DefaultMutableTreeNode[7];
    printNode[0] = new DefaultMutableTreeNode("Setting up a printer");
    printNode[1] = new DefaultMutableTreeNode("Printing a document");
    printNode[2] = new DefaultMutableTreeNode("Viewing documents waiting to be printed");
    printNode[3] = new DefaultMutableTreeNode("Changing printer settings");
    printNode[4] = new DefaultMutableTreeNode("Using a shared printer");
    printNode[5] = new DefaultMutableTreeNode("Sharing your printer");
    printNode[6] = new DefaultMutableTreeNode("Troubleshooting printing problems");
    for (int i = 0; i < 7; i++) {
      howToNode[2].add(printNode[i]);
    }
    useANetworkNode = new DefaultMutableTreeNode[9];
    useANetworkNode[0] = new DefaultMutableTreeNode("Setting up your computer to connect to the network");
    useANetworkNode[1] = new DefaultMutableTreeNode("Finding a computer");
    useANetworkNode[2] = new DefaultMutableTreeNode("Browsing your workgroup");
    useANetworkNode[3] = new DefaultMutableTreeNode("Opening a shared folder on another computer");
    useANetworkNode[4] = new DefaultMutableTreeNode("Sharing a folder or printer");
    useANetworkNode[5] = new DefaultMutableTreeNode("Installing a program from a network");
    useANetworkNode[6] = new DefaultMutableTreeNode("Backing up files over a network");
    useANetworkNode[7] = new DefaultMutableTreeNode("Connecting to a network by using Dial-Up Networking");
    useANetworkNode[8] = new DefaultMutableTreeNode("Connecting to a network by using a cable");
    for (int i = 0; i < 9; i++) {
      howToNode[3].add(useANetworkNode[i]);
    }
    communicateWithOthersNode = new DefaultMutableTreeNode[5];
    communicateWithOthersNode[0] = new DefaultMutableTreeNode("Exchanging mail messages");
    communicateWithOthersNode[1] = new DefaultMutableTreeNode("Exchanging faxes");
    communicateWithOthersNode[2] = new DefaultMutableTreeNode("Dialing from your computer by using Phone Dialer");
    communicateWithOthersNode[3] = new DefaultMutableTreeNode("Setting up a modem");
    communicateWithOthersNode[4] = new DefaultMutableTreeNode("Connecting to The Microsoft Network");
    for (int i = 0; i < 5; i++) {
      howToNode[4].add(communicateWithOthersNode[i]);
    }
    safeguardYourWorkNode = new DefaultMutableTreeNode[5];
    safeguardYourWorkNode[0] = new DefaultMutableTreeNode("Backing up your files");
    safeguardYourWorkNode[1] = new DefaultMutableTreeNode("Setting up a screen saver");
    safeguardYourWorkNode[2] = new DefaultMutableTreeNode("Assigning a screen-saver password");
    safeguardYourWorkNode[3] = new DefaultMutableTreeNode("Shutting down your computer");
    safeguardYourWorkNode[4] = new DefaultMutableTreeNode("Controlling access to a folder or printer");
    for (int i = 0; i < 5; i++) {
      howToNode[5].add(safeguardYourWorkNode[i]);
    }
    changeWindowsSettingsNode = new DefaultMutableTreeNode[8];
    changeWindowsSettingsNode[0] = new DefaultMutableTreeNode("Change How Windows Looks");
    changeWindowsSettingsNode[1] = new DefaultMutableTreeNode("Customize My Computer or Windows Explorer");
    changeWindowsSettingsNode[2] = new DefaultMutableTreeNode("Change Taskbar Settings");
    changeWindowsSettingsNode[3] = new DefaultMutableTreeNode("Add or Remove Fonts");
    changeWindowsSettingsNode[4] = new DefaultMutableTreeNode("Change Keyboard Settings");
    changeWindowsSettingsNode[5] = new DefaultMutableTreeNode("Change Mouse Settings");
    changeWindowsSettingsNode[6] = new DefaultMutableTreeNode("Change Multimedia Settings");
    changeWindowsSettingsNode[7] = new DefaultMutableTreeNode("Set Up Windows for Multiple Users");
    for (int i = 0; i < 8; i++) {
      howToNode[6].add(changeWindowsSettingsNode[i]);
    }
    changeHowWindowsLooksNodeA = new DefaultMutableTreeNode[6];
    changeHowWindowsLooksNodeA[0] = new DefaultMutableTreeNode("Changing the background of the desktop");
    changeHowWindowsLooksNodeA[1] = new DefaultMutableTreeNode("Changing the way items on the desktop look");
    changeHowWindowsLooksNodeA[2] = new DefaultMutableTreeNode("Changing how much you can fit on your screen");
    changeHowWindowsLooksNodeA[3] = new DefaultMutableTreeNode(
      "Chnging the size of the fonts your computer displays");
    changeHowWindowsLooksNodeA[4] = new DefaultMutableTreeNode("Setting up a screen saver");
    changeHowWindowsLooksNodeA[5] = new DefaultMutableTreeNode("Adjusting the rate at which your cursor blinks");
    for (int i = 0; i < 6; i++) {
      changeWindowsSettingsNode[0].add(changeHowWindowsLooksNodeA[i]);
    }
    customizeMyComputerOrWindowsExplorerNode = new DefaultMutableTreeNode[2];
    customizeMyComputerOrWindowsExplorerNode[0] = new DefaultMutableTreeNode(
      "Changing the appearance of items in a folder");
    customizeMyComputerOrWindowsExplorerNode[1] = new DefaultMutableTreeNode(
      "Seeing all files and filename extensions");
    for (int i = 0; i < 2; i++) {
      changeWindowsSettingsNode[1].add(customizeMyComputerOrWindowsExplorerNode[i]);
    }
    changeTaskbarSettingsNode = new DefaultMutableTreeNode[3];
    changeTaskbarSettingsNode[0] = new DefaultMutableTreeNode("Customizing the Start menu");
    changeTaskbarSettingsNode[1] = new DefaultMutableTreeNode("Moving the taskbar");
    changeTaskbarSettingsNode[2] = new DefaultMutableTreeNode("Hiding or displaying the taskbar");
    for (int i = 0; i < 3; i++) {
      changeWindowsSettingsNode[2].add(changeTaskbarSettingsNode[i]);
    }
    addOrRemoveFontsNode = new DefaultMutableTreeNode[5];
    addOrRemoveFontsNode[0] = new DefaultMutableTreeNode("Adding a font to your computer");
    addOrRemoveFontsNode[1] = new DefaultMutableTreeNode("Deleting a font from your computer");
    addOrRemoveFontsNode[2] = new DefaultMutableTreeNode("Viewing a font on your computer");
    addOrRemoveFontsNode[3] = new DefaultMutableTreeNode("Printing a font sample");
    addOrRemoveFontsNode[4] = new DefaultMutableTreeNode("Finding a similar font");
    for (int i = 0; i < 5; i++) {
      changeWindowsSettingsNode[3].add(addOrRemoveFontsNode[i]);
    }
    changeKeyboardSettingsNodeA = new DefaultMutableTreeNode[2];
    changeKeyboardSettingsNodeA[0] = new DefaultMutableTreeNode("Changing the way your keyboard responds");
    changeKeyboardSettingsNodeA[1] = new DefaultMutableTreeNode(
      "Changing the keyboard layout for an installed language");
    for (int i = 0; i < 2; i++) {
      changeWindowsSettingsNode[4].add(changeKeyboardSettingsNodeA[i]);
    }
    changeMouseSettingsNodeA = new DefaultMutableTreeNode[5];
    changeMouseSettingsNodeA[0] = new DefaultMutableTreeNode("Reversing your mouse buttons");
    changeMouseSettingsNodeA[1] = new DefaultMutableTreeNode("Adjusting the double-click speed for your mouse");
    changeMouseSettingsNodeA[2] = new DefaultMutableTreeNode("Adjusting the speed of the mouse pointer");
    changeMouseSettingsNodeA[3] = new DefaultMutableTreeNode("Turning on and adjusting the mouse pointer trail");
    changeMouseSettingsNodeA[4] = new DefaultMutableTreeNode("Changing the appearance of your mouse pointer");
    for (int i = 0; i < 5; i++) {
      changeWindowsSettingsNode[5].add(changeMouseSettingsNodeA[i]);
    }
    changeMultimediaSettingsNode = new DefaultMutableTreeNode[4];
    changeMultimediaSettingsNode[0] = new DefaultMutableTreeNode("Assigning sounds to program events");
    changeMultimediaSettingsNode[1] = new DefaultMutableTreeNode("Adjusting the volume for multimedia devices");
    changeMultimediaSettingsNode[2] = new DefaultMutableTreeNode("Calibrating your joystick");
    changeMultimediaSettingsNode[3] = new DefaultMutableTreeNode("Setting up a MIDI instrument");
    for (int i = 0; i < 4; i++) {
      changeWindowsSettingsNode[6].add(changeMultimediaSettingsNode[i]);
    }
    setUpWindowsForMultipleUsersNodeA = new DefaultMutableTreeNode[2];
    setUpWindowsForMultipleUsersNodeA[0] = new DefaultMutableTreeNode(
      "Enabling multiple users to personalize settings");
    setUpWindowsForMultipleUsersNodeA[1] = new DefaultMutableTreeNode(
      "Logging off of your computer so others can use it");
    for (int i = 0; i < 2; i++) {
      changeWindowsSettingsNode[7].add(setUpWindowsForMultipleUsersNodeA[i]);
    }
    setUpHardwareNode = new DefaultMutableTreeNode[3];
    setUpHardwareNode[0] = new DefaultMutableTreeNode("Setting up a printer");
    setUpHardwareNode[1] = new DefaultMutableTreeNode("Setting up a modem");
    setUpHardwareNode[2] = new DefaultMutableTreeNode("Setting up other hardware");
    for (int i = 0; i < 3; i++) {
      howToNode[7].add(setUpHardwareNode[i]);
    }
    maintainYourComputerNode = new DefaultMutableTreeNode[8];
    maintainYourComputerNode[0] = new DefaultMutableTreeNode("Backing up your hard disk");
    maintainYourComputerNode[1] = new DefaultMutableTreeNode("Compressing disks to create more free space");
    maintainYourComputerNode[2] = new DefaultMutableTreeNode("Speeding up your hard disk");
    maintainYourComputerNode[3] = new DefaultMutableTreeNode("Detectng and repairing disk erros");
    maintainYourComputerNode[4] = new DefaultMutableTreeNode("Formatting disks");
    maintainYourComputerNode[5] = new DefaultMutableTreeNode("Changing your computer's date");
    maintainYourComputerNode[6] = new DefaultMutableTreeNode("Changing your computer's time");
    maintainYourComputerNode[7] = new DefaultMutableTreeNode("Emptying the Recycle Bin");
    for (int i = 0; i < 8; i++) {
      howToNode[8].add(maintainYourComputerNode[i]);
    }
    useAPortableComputerWithWindowsNode = new DefaultMutableTreeNode[6];
    useAPortableComputerWithWindowsNode[0] = new DefaultMutableTreeNode("Checking the level of your power supply");
    useAPortableComputerWithWindowsNode[1] = new DefaultMutableTreeNode(
      "Turning on your portable computer's suspend mode");
    useAPortableComputerWithWindowsNode[2] = new DefaultMutableTreeNode(
      "Using a printer that is not currently connected");
    useAPortableComputerWithWindowsNode[3] = new DefaultMutableTreeNode(
      "Keeping files synchronized using a floppy disk");
    useAPortableComputerWithWindowsNode[4] = new DefaultMutableTreeNode(
      "Separating Briefcase files from the originals");
    useAPortableComputerWithWindowsNode[5] = new DefaultMutableTreeNode(
      "Checking the status of a file or folder in Briefcase");
    for (int i = 0; i < 6; i++) {
      howToNode[9].add(useAPortableComputerWithWindowsNode[i]);
    }
    setUpWindowsAccessibilityFeaturesNode = new DefaultMutableTreeNode[6];
    setUpWindowsAccessibilityFeaturesNode[0] = new DefaultMutableTreeNode("Installing Accessibility components");
    setUpWindowsAccessibilityFeaturesNode[1] = new DefaultMutableTreeNode("Change Keyboard Settings");
    setUpWindowsAccessibilityFeaturesNode[2] = new DefaultMutableTreeNode("Change Mouse Settings");
    setUpWindowsAccessibilityFeaturesNode[3] = new DefaultMutableTreeNode("Change How Windows Looks");
    setUpWindowsAccessibilityFeaturesNode[4] = new DefaultMutableTreeNode("Use Sound");
    setUpWindowsAccessibilityFeaturesNode[5] = new DefaultMutableTreeNode("Set Up Windows for Multiple Users");
    for (int i = 0; i < 6; i++) {
      howToNode[10].add(setUpWindowsAccessibilityFeaturesNode[i]);
    }
    changeKeyboardSettingsNodeB = new DefaultMutableTreeNode[1];
    changeKeyboardSettingsNodeB[0] = new DefaultMutableTreeNode("Changing the way your keyboard responds");
    setUpWindowsAccessibilityFeaturesNode[1].add(changeKeyboardSettingsNodeB[0]);
    changeMouseSettingsNodeB = new DefaultMutableTreeNode[5];
    changeMouseSettingsNodeB[0] = new DefaultMutableTreeNode("Reversing your mouse buttons");
    changeMouseSettingsNodeB[1] = new DefaultMutableTreeNode("Adjusting the double-click speed for your mouse");
    changeMouseSettingsNodeB[2] = new DefaultMutableTreeNode("Adjusting the speed of the mouse pointer");
    changeMouseSettingsNodeB[3] = new DefaultMutableTreeNode("Turning on and adjusting the mouse pointer trail");
    changeMouseSettingsNodeB[4] = new DefaultMutableTreeNode("Changing the appearance of your mouse pointer");
    for (int i = 0; i < 5; i++) {
      setUpWindowsAccessibilityFeaturesNode[2].add(changeMouseSettingsNodeB[i]);
    }
    changeHowWindowsLooksNodeB = new DefaultMutableTreeNode[5];
    changeHowWindowsLooksNodeB[0] = new DefaultMutableTreeNode("Making text more readable");
    changeHowWindowsLooksNodeB[1] = new DefaultMutableTreeNode("Changing the screen colors");
    changeHowWindowsLooksNodeB[2] = new DefaultMutableTreeNode("Changing how much you can fit on your screen");
    changeHowWindowsLooksNodeB[3] = new DefaultMutableTreeNode("Changing the appearance of items on the desktop");
    changeHowWindowsLooksNodeB[4] = new DefaultMutableTreeNode("Adjusting the rate at which your cursor blinks");
    for (int i = 0; i < 5; i++) {
      setUpWindowsAccessibilityFeaturesNode[3].add(changeHowWindowsLooksNodeB[i]);
    }
    useSoundNode = new DefaultMutableTreeNode[1];
    useSoundNode[0] = new DefaultMutableTreeNode("Assigning sounds to program events");
    setUpWindowsAccessibilityFeaturesNode[4].add(useSoundNode[0]);
    setUpWindowsForMultipleUsersNodeB = new DefaultMutableTreeNode[1];
    setUpWindowsForMultipleUsersNodeB[0] = new DefaultMutableTreeNode(
      "Enabling multiple users to personalize settings");
    setUpWindowsAccessibilityFeaturesNode[5].add(setUpWindowsForMultipleUsersNodeB[0]);
    useHelpNode = new DefaultMutableTreeNode[6];
    useHelpNode[0] = new DefaultMutableTreeNode("Finding a topic in Help");
    useHelpNode[1] = new DefaultMutableTreeNode("Getting information on a dialog box setting");
    useHelpNode[2] = new DefaultMutableTreeNode("Copying information from a Help topic");
    useHelpNode[3] = new DefaultMutableTreeNode("Printing a Help topic");
    useHelpNode[4] = new DefaultMutableTreeNode("Changing the font or color in a Help topic");
    useHelpNode[5] = new DefaultMutableTreeNode("Displaying Help for an MS-DOS command");
    for (int i = 0; i < 6; i++) {
      howToNode[11].add(useHelpNode[i]);
    }
    tipsAndTricksNode = new DefaultMutableTreeNode[7];
    tipsAndTricksNode[0] = new DefaultMutableTreeNode("For Setting Up The Desktop Efficiently");
    tipsAndTricksNode[1] = new DefaultMutableTreeNode("For Maintaining Your Computer");
    tipsAndTricksNode[2] = new DefaultMutableTreeNode("For Running Programs");
    tipsAndTricksNode[3] = new DefaultMutableTreeNode("For Working with Files and Folders");
    tipsAndTricksNode[4] = new DefaultMutableTreeNode("For Printing");
    tipsAndTricksNode[5] = new DefaultMutableTreeNode("For Netwoking");
    tipsAndTricksNode[6] = new DefaultMutableTreeNode("Tips of the Day");
    for (int i = 0; i < 7; i++) {
      helpTopicsNode[4].add(tipsAndTricksNode[i]);
    }
    forSettingUpTheDesktopEfficientlyNode = new DefaultMutableTreeNode[7];
    forSettingUpTheDesktopEfficientlyNode[0] = new DefaultMutableTreeNode("Customizing the Start Menu");
    forSettingUpTheDesktopEfficientlyNode[1] = new DefaultMutableTreeNode(
      "Grouping programs so they are easier to find");
    forSettingUpTheDesktopEfficientlyNode[2] = new DefaultMutableTreeNode("Putting shortcuts on the desktop");
    forSettingUpTheDesktopEfficientlyNode[3] = new DefaultMutableTreeNode("Minimizing all open windows");
    forSettingUpTheDesktopEfficientlyNode[4] = new DefaultMutableTreeNode("Viewing all open windows");
    forSettingUpTheDesktopEfficientlyNode[5] = new DefaultMutableTreeNode("Customizing the taskbar");
    forSettingUpTheDesktopEfficientlyNode[6] = new DefaultMutableTreeNode(
      "Keeping separate settings for different users");
    for (int i = 0; i < 7; i++) {
      tipsAndTricksNode[0].add(forSettingUpTheDesktopEfficientlyNode[i]);
    }
    forMaintainingYourComputerNodeB = new DefaultMutableTreeNode[4];
    forMaintainingYourComputerNodeB[0] = new DefaultMutableTreeNode("Backing up your hard disk regularly");
    forMaintainingYourComputerNodeB[1] = new DefaultMutableTreeNode("Defragmenting your hard disk regularly");
    forMaintainingYourComputerNodeB[2] = new DefaultMutableTreeNode("Deleting old files to free up disk space");
    forMaintainingYourComputerNodeB[3] = new DefaultMutableTreeNode("Changing your hard disk for errors");
    for (int i = 0; i < 4; i++) {
      tipsAndTricksNode[1].add(forMaintainingYourComputerNodeB[i]);
    }
    forRunningProgramsNode = new DefaultMutableTreeNode[5];
    forRunningProgramsNode[0] = new DefaultMutableTreeNode("Customizing the Start Menu");
    forRunningProgramsNode[1] = new DefaultMutableTreeNode("Grouping programs so they are easier to find");
    forRunningProgramsNode[2] = new DefaultMutableTreeNode("Putting shortcuts on the desktop");
    forRunningProgramsNode[3] = new DefaultMutableTreeNode("Using the Run command to start programs");
    forRunningProgramsNode[4] = new DefaultMutableTreeNode("Having a program start when you start Windows");
    for (int i = 0; i < 5; i++) {
      tipsAndTricksNode[2].add(forRunningProgramsNode[i]);
    }
    forWorkingWithFilesAndFoldersNode = new DefaultMutableTreeNode[11];
    forWorkingWithFilesAndFoldersNode[0] = new DefaultMutableTreeNode("Dragging icons instead of using menus");
    forWorkingWithFilesAndFoldersNode[1] = new DefaultMutableTreeNode("Using shortcut menus");
    forWorkingWithFilesAndFoldersNode[2] = new DefaultMutableTreeNode("Putting shortcuts on the desktop");
    forWorkingWithFilesAndFoldersNode[3] = new DefaultMutableTreeNode("Putting part of a document on the desktop");
    forWorkingWithFilesAndFoldersNode[4] = new DefaultMutableTreeNode("Creating a shortcut in a folder");
    forWorkingWithFilesAndFoldersNode[5] = new DefaultMutableTreeNode(
      "Using the Run command to open files and folders");
    forWorkingWithFilesAndFoldersNode[6] = new DefaultMutableTreeNode("Quickly sending files to another place");
    forWorkingWithFilesAndFoldersNode[7] = new DefaultMutableTreeNode("Selecting more than one file or folder");
    forWorkingWithFilesAndFoldersNode[8] = new DefaultMutableTreeNode("Previewing a document");
    forWorkingWithFilesAndFoldersNode[9] = new DefaultMutableTreeNode(
      "Changing which program starts when you open a document");
    forWorkingWithFilesAndFoldersNode[10] = new DefaultMutableTreeNode(
      "Having Windows Explorer start when you start Windows");
    for (int i = 0; i < 11; i++) {
      tipsAndTricksNode[3].add(forWorkingWithFilesAndFoldersNode[i]);
    }
    forPrintingNode = new DefaultMutableTreeNode[2];
    forPrintingNode[0] = new DefaultMutableTreeNode("Viewing printing status quickly");
    forPrintingNode[1] = new DefaultMutableTreeNode("Putting a shortcut to a printer on the desktop");
    for (int i = 0; i < 2; i++) {
      tipsAndTricksNode[4].add(forPrintingNode[i]);
    }
    forNetworkingNode = new DefaultMutableTreeNode[2];
    forNetworkingNode[0] = new DefaultMutableTreeNode("Customizing your Network Neighborhood");
    forNetworkingNode[1] = new DefaultMutableTreeNode("Opening a shared folder on another computer");
    for (int i = 0; i < 2; i++) {
      tipsAndTricksNode[5].add(forNetworkingNode[i]);
    }
    tipsOfTheDayNode = new DefaultMutableTreeNode[7];
    tipsOfTheDayNode[0] = new DefaultMutableTreeNode("Using help");
    tipsOfTheDayNode[1] = new DefaultMutableTreeNode("Gettng your work done");
    tipsOfTheDayNode[2] = new DefaultMutableTreeNode("Personalizing Windows");
    tipsOfTheDayNode[3] = new DefaultMutableTreeNode("Printing");
    tipsOfTheDayNode[4] = new DefaultMutableTreeNode("Exploring and maintaining your computer");
    tipsOfTheDayNode[5] = new DefaultMutableTreeNode("Becoming an expert");
    tipsOfTheDayNode[6] = new DefaultMutableTreeNode("Viewing the Welcome screen");
    for (int i = 0; i < 7; i++) {
      tipsAndTricksNode[6].add(tipsOfTheDayNode[i]);
    }
    troubleshootingNode = new DefaultMutableTreeNode[11];
    troubleshootingNode[0] = new DefaultMutableTreeNode("If you have trouble printing");
    troubleshootingNode[1] = new DefaultMutableTreeNode("If you run out of memory");
    troubleshootingNode[2] = new DefaultMutableTreeNode("If you need more disk space");
    troubleshootingNode[3] = new DefaultMutableTreeNode("If you have a hardware conflict");
    troubleshootingNode[4] = new DefaultMutableTreeNode("If you have trouble running MS-DOS programs");
    troubleshootingNode[5] = new DefaultMutableTreeNode("If you have trouble using the network");
    troubleshootingNode[6] = new DefaultMutableTreeNode("If you have trouble using your modem");
    troubleshootingNode[7] = new DefaultMutableTreeNode("If you have trouble using Dial-Up Networking");
    troubleshootingNode[8] = new DefaultMutableTreeNode("If you have trouble using Direct Cable Connection");
    troubleshootingNode[9] = new DefaultMutableTreeNode("If you have trouble using a PC card (PCMCIA)");
    troubleshootingNode[10] = new DefaultMutableTreeNode("If you have trouble starting Windows");
    for (int i = 0; i < 11; i++) {
      helpTopicsNode[5].add(troubleshootingNode[i]);
    }
    helpTopicsTree.addTreeSelectionListener(new TreeSelectionListener() {
      public void valueChanged(TreeSelectionEvent e) {
        helpTopicsNodeSelected = (DefaultMutableTreeNode) helpTopicsTree.getLastSelectedPathComponent();
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == helpTopicsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 2; i < 6; i++) {
          if (helpTopicsNodeSelected == helpTopicsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        // Introducing Windows
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == introducingWindowsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == welcomeNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        if (helpTopicsNodeSelected == welcomeNode[2]) {
          helpText[0].setText(
            "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Open");
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == aListOfWhatsNewNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == usingWindowsAccessoriesNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 3; i++) {
          if (helpTopicsNodeSelected == forGeneralUseNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 3; i++) {
          if (helpTopicsNodeSelected == forWritingAndDrawingNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == forCommunicatingWithOthersNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 4; i++) {
          if (helpTopicsNodeSelected == forSoundAndVideoNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 3; i++) {
          if (helpTopicsNodeSelected == forUsingWithTwoComputersNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == forMaintainingYourComputerNodeA[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        // How To...
        for (int i = 0; i < 12; i++) {
          if (helpTopicsNodeSelected == howToNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 8; i++) {
          if (helpTopicsNodeSelected == runProgramsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 10; i++) {
          if (helpTopicsNodeSelected == workWithFilesAndFoldersNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 7; i++) {
          if (helpTopicsNodeSelected == printNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 9; i++) {
          if (helpTopicsNodeSelected == useANetworkNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == communicateWithOthersNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == safeguardYourWorkNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 8; i++) {
          if (helpTopicsNodeSelected == changeWindowsSettingsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == changeHowWindowsLooksNodeA[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == customizeMyComputerOrWindowsExplorerNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 3; i++) {
          if (helpTopicsNodeSelected == changeTaskbarSettingsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == addOrRemoveFontsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == changeKeyboardSettingsNodeA[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == changeMouseSettingsNodeA[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 4; i++) {
          if (helpTopicsNodeSelected == changeMultimediaSettingsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == setUpWindowsForMultipleUsersNodeA[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 3; i++) {
          if (helpTopicsNodeSelected == setUpHardwareNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 8; i++) {
          if (helpTopicsNodeSelected == maintainYourComputerNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == useAPortableComputerWithWindowsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        if (helpTopicsNodeSelected == setUpWindowsAccessibilityFeaturesNode[0]) {
          helpText[0].setText(
            "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Display");
        }
        if (helpTopicsNodeSelected == changeKeyboardSettingsNodeB[0]) {
          helpText[0].setText(
            "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Display");
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == changeMouseSettingsNodeB[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == changeHowWindowsLooksNodeB[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        if (helpTopicsNodeSelected == useSoundNode[0]) {
          helpText[0].setText(
            "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Display");
        }
        if (helpTopicsNodeSelected == setUpWindowsForMultipleUsersNodeB[0]) {
          helpText[0].setText(
            "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Display");
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == useHelpNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        // Tips and Tricks
        for (int i = 0; i < 7; i++) {
          if (helpTopicsNodeSelected == tipsAndTricksNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 7; i++) {
          if (helpTopicsNodeSelected == forSettingUpTheDesktopEfficientlyNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 4; i++) {
          if (helpTopicsNodeSelected == forMaintainingYourComputerNodeB[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 5; i++) {
          if (helpTopicsNodeSelected == forRunningProgramsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 11; i++) {
          if (helpTopicsNodeSelected == forWorkingWithFilesAndFoldersNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == forPrintingNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == forNetworkingNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        for (int i = 0; i < 7; i++) {
          if (helpTopicsNodeSelected == tipsOfTheDayNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
        // Troubleshooting
        for (int i = 0; i < 11; i++) {
          if (helpTopicsNodeSelected == troubleshootingNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Display");
          }
        }
      }
    });
    helpTopicsTree.addTreeExpansionListener(new TreeExpansionListener() {
      public void treeExpanded(TreeExpansionEvent event) {
        for (int i = 2; i < 6; i++) {
          if (helpTopicsNodeSelected == helpTopicsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == introducingWindowsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
        if (helpTopicsNodeSelected == welcomeNode[2]) {
          helpText[0].setText(
            "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Close");
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == usingWindowsAccessoriesNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
        for (int i = 0; i < 11; i++) {
          if (helpTopicsNodeSelected == howToNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
        for (int i = 0; i < 8; i++) {
          if (helpTopicsNodeSelected == changeWindowsSettingsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
        for (int i = 1; i < 5; i++) {
          if (helpTopicsNodeSelected == setUpWindowsAccessibilityFeaturesNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
        for (int i = 0; i < 7; i++) {
          if (helpTopicsNodeSelected == tipsAndTricksNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a topic, and then click Display. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Close");
          }
        }
      }

      public void treeCollapsed(TreeExpansionEvent event) {
        for (int i = 2; i < 6; i++) {
          if (helpTopicsNodeSelected == helpTopicsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 2; i++) {
          if (helpTopicsNodeSelected == introducingWindowsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        if (helpTopicsNodeSelected == welcomeNode[2]) {
          helpText[0].setText(
            "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
          helpButton[0].setText("Open");
        }
        for (int i = 0; i < 6; i++) {
          if (helpTopicsNodeSelected == usingWindowsAccessoriesNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 11; i++) {
          if (helpTopicsNodeSelected == howToNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 8; i++) {
          if (helpTopicsNodeSelected == changeWindowsSettingsNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 1; i < 5; i++) {
          if (helpTopicsNodeSelected == setUpWindowsAccessibilityFeaturesNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
        for (int i = 0; i < 7; i++) {
          if (helpTopicsNodeSelected == tipsAndTricksNode[i]) {
            helpText[0].setText(
              "<html><br><br>Click a book, and then click Open. Or click another tab, such as Index.<br/><br/><html>");
            helpButton[0].setText("Open");
          }
        }
      }
    });
    // Index Tab
    helpIndex = new JPanel();
    helpIndex.setLayout(null);
    helpText[1] = new JLabel("1 Type the first few letters of the word you're looking for.");
    helpText[1].setBounds(20, 20, 550, 30);
    helpIndexTextField = new JTextField();
    helpIndexTextField.setBounds(20, 55, 550, 25);
    helpIndexTextField.setFont(MSSansSerif15);
    helpIndex.add(helpIndexTextField);
    helpText[2] = new JLabel("2 Click the index entry you want, and then click Display.");
    helpText[2].setBounds(20, 85, 550, 30);
    for (int i = 1; i < 3; i++) {
      helpIndex.add(helpText[i]);
    }
    for (int i = 0; i < 3; i++) {
      helpText[i].setFont(MSSansSerif16);
    }
    helpIndexEntry = new String[300];
    helpIndexEntry[0] = "12-hour clock, changing to";
    helpIndexEntry[1] = "24-hour clock, changing to";
    helpIndexEntry[2] = "32-bit PC card";
    helpIndexEntry[3] = "  disabling support for";
    helpIndexEntry[4] = "  displaying the status indicator";
    helpIndexEntry[5] = "  enabling support for";
    helpIndexEntry[6] = "  Flash memory card, installing support for";
    helpIndexEntry[7] = "  removing a PC card";
    helpIndexEntry[8] = "  slots for PC cards, specifying the number of";
    helpIndexEntry[9] = "  SRAM memory card, installing support for";
    helpIndexEntry[10] = "  troubleshooting";
    helpIndexEntry[11] = "  turning off sound effects";
    helpIndexEntry[12] = "about new features";
    helpIndexEntry[13] = "access control";
    helpIndexEntry[14] = "controlling access to shared resources";
    helpIndexEntry[15] = "folder passwords";
    helpIndexEntry[16] = "NetWare server password";
    helpIndexEntry[17] = "";
    helpIndexEntry[18] = "";
    helpIndexEntry[19] = "";
    helpIndexList = new JList < Object > (helpIndexEntry);
    helpIndexList.setFixedCellHeight(20);
    helpIndexList.setFont(MSSansSerif15);
    helpIndexList.setVisibleRowCount(17);
    helpScrollPane[2] = new JScrollPane(helpIndexList);
    helpScrollPane[2].setBounds(20, 120, 550, 350);
    helpIndex.add(helpScrollPane[2]);
    // Find Tab
    helpFind = new JPanel();
    helpFind.setBackground(gray);
    findSetupWizard = new JDialog();
    findSetupWizard.setAlwaysOnTop(true);
    findSetupWizard.setBounds(100, 50, 675, 475);
    findSetupWizard.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    findSetupWizard.setLayout(null);
    findSetupWizard.setResizable(false);
    findSetupWizardLabel = new JLabel[3];
    findSetupWizardLabel[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FindSetupWizardImage.png")));
    findSetupWizardLabel[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FindSetupWizardText.png")));
    findSetupWizardLabel[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("FindSetupWizardSeparator.png")));
    findSetupWizardLabel[0].setBounds(10, 10, 180, 347);
    findSetupWizardLabel[1].setBounds(200, 20, 410, 181);
    findSetupWizardLabel[2].setBounds(10, 365, 649, 19);
    findSetupWizardRadioButton = new JRadioButton[3];
    findSetupWizardRadioButton[0] = new JRadioButton("Minimize database size (recommended)");
    findSetupWizardRadioButton[1] = new JRadioButton("Maximize search capabilities");
    findSetupWizardRadioButton[2] = new JRadioButton("Customize search capabilities");
    findSetupWizardRadioButton[0].setBounds(200, 240, 300, 30);
    findSetupWizardRadioButton[1].setBounds(200, 275, 300, 30);
    findSetupWizardRadioButton[2].setBounds(200, 310, 300, 30);
    findSetupWizardRadioButton[0].setSelected(true);
    findSetupWizardButtonGroup = new ButtonGroup();
    findSetupWizardButton = new JButton[3];
    findSetupWizardButton[0] = new JButton("< Back");
    findSetupWizardButton[1] = new JButton("Next >");
    findSetupWizardButton[2] = new JButton("Cancel");
    findSetupWizardButton[0].setBounds(270, 400, 110, 33);
    findSetupWizardButton[1].setBounds(380, 400, 110, 33);
    findSetupWizardButton[2].setBounds(500, 400, 110, 33);
    findSetupWizardButton[0].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      findSetupWizardRadioButton[i].addActionListener(this);
      findSetupWizardButton[i].addActionListener(this);
      findSetupWizardButton[i].setFont(MSSansSerif15);
      findSetupWizardRadioButton[i].setFont(MSSansSerif15);
      findSetupWizard.add(findSetupWizardLabel[i]);
      findSetupWizardButtonGroup.add(findSetupWizardRadioButton[i]);
      findSetupWizard.add(findSetupWizardRadioButton[i]);
      findSetupWizard.add(findSetupWizardButton[i]);
    }
    // Help Configuration
    helpButton = new JButton[6];
    helpButton[0] = new JButton("Display");
    helpButton[1] = new JButton("Print...");
    helpButton[2] = new JButton("Cancel");
    helpButton[0].setBounds(280, 560, 110, 33);
    helpButton[1].setBounds(400, 560, 110, 33);
    helpButton[2].setBounds(520, 560, 110, 33);
    helpButton[3] = new JButton();
    helpButton[3].setEnabled(false);
    for (int i = 0; i < 4; i++) {
      helpButton[i].addActionListener(this);
      helpButton[i].setFont(MSSansSerif16);
      helpTopicsWindowsHelp.add(helpButton[i]);
    }
    helpTabbedPane = new JTabbedPane();
    helpTabbedPane.addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent e) {
        if (helpTabbedPane.getSelectedIndex() == 0) {
          try {
            helpTopicsWindowsHelp.getContentPane()
              .setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Thread.sleep(50);
            helpTopicsWindowsHelp.getContentPane()
              .setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          for (int i = 0; i < 3; i++) {
            helpButton[i].setEnabled(true);
          }
        } else if (helpTabbedPane.getSelectedIndex() == 1) {
          try {
            helpTopicsWindowsHelp.getContentPane()
              .setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Thread.sleep(100);
            helpTopicsWindowsHelp.getContentPane()
              .setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          helpButton[1].setEnabled(false);
        } else if (helpTabbedPane.getSelectedIndex() == 2) {
          try {
            helpTopicsWindowsHelp.getContentPane()
              .setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Thread.sleep(200);
            helpTopicsWindowsHelp.getContentPane()
              .setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          helpTopicsWindowsHelp.setAlwaysOnTop(false);
          for (int i = 0; i < 3; i++) {
            helpButton[i].setEnabled(false);
          }
          findSetupWizard.setVisible(true);
        }
      }
    });
    helpTabbedPane.setFont(MSSansSerif16);
    helpTabbedPane.addTab("Contents", helpContents);
    helpTabbedPane.addTab("Index", helpIndex);
    helpTabbedPane.addTab("Find", helpFind);
    helpTopicsWindowsHelp.add(helpTabbedPane, BorderLayout.NORTH);
    helpTopicsPanel = new JPanel();
    helpTopicsPanel.add(helpTabbedPane);
    helpTopicsPanel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
    helpTopicsPanel.setBounds(25, 10, 600, 510);
    helpTopicsPanel.setLayout(new GridLayout());
    helpTopicsWindowsHelp.add(helpTopicsPanel);
  }

  public void shutDownWindowsMethod() {
    /// Shut Down Windows
    shutDownWindowsButton = new JButton[3];
    shutDownWindowsButton[0] = new JButton("Yes");
    shutDownWindowsButton[0].setBounds(110, 200, 110, 33);
    shutDownWindowsButton[1] = new JButton("No");
    shutDownWindowsButton[1].setBounds(230, 200, 110, 33);
    shutDownWindowsButton[2] = new JButton("Help");
    shutDownWindowsButton[2].setBounds(350, 200, 110, 33);
    shutDownWindowsIcon = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ShutDownWindowsIcon.png")));
    shutDownWindowsIcon.setBounds(5, 10, 45, 45);
    shutDownWindowsRadioButton = new JRadioButton[3];
    shutDownWindowsRadioButton[0] = new JRadioButton("Shut down the computer?");
    shutDownWindowsRadioButton[0].setBounds(75, 60, 300, 30);
    shutDownWindowsRadioButton[0].setSelected(true);
    shutDownWindowsRadioButton[1] = new JRadioButton("Restart the computer?");
    shutDownWindowsRadioButton[1].setBounds(75, 90, 300, 30);
    shutDownWindowsRadioButton[2] = new JRadioButton("Restart the computer in MS_DOS mode?");
    shutDownWindowsRadioButton[2].setBounds(75, 120, 400, 30);
    shutDownWindowsButtonGroup = new ButtonGroup();
    shutDownWindowsText = new JLabel("Are you sure you want to:");
    shutDownWindowsText.setBounds(75, 0, 300, 50);
    shutDownWindowsText.setFont(MSSansSerif15);
    shutDownWindowsDialog = new JDialog();
    shutDownWindowsDialog.add(shutDownWindowsIcon);
    shutDownWindowsDialog.add(shutDownWindowsText);
    shutDownWindowsDialog.setAlwaysOnTop(true);
    shutDownWindowsDialog.setBounds(300, 300, 500, 300);
    shutDownWindowsDialog.setLayout(null);
    shutDownWindowsDialog.setTitle("Shut Down Windows");
    for (int i = 0; i < 3; i++) {
      shutDownWindowsButton[i].addActionListener(this);
      shutDownWindowsButton[i].setFont(MSSansSerif15);
      shutDownWindowsButtonGroup.add(shutDownWindowsRadioButton[i]);
      shutDownWindowsRadioButton[i].addActionListener(this);
      shutDownWindowsRadioButton[i].setFont(MSSansSerif15);
      shutDownWindowsRadioButton[i].setOpaque(false);
      shutDownWindowsDialog.add(shutDownWindowsButton[i]);
      shutDownWindowsDialog.add(shutDownWindowsRadioButton[i]);
    }
    shutDownScreen = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ShutDownScreen.png")));
    shutDownDesktop = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ShutDownDesktop.png")));
    safeTurnOff = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SafeTurnOff.png")));
    shutDownDesktop.setBounds(0, 0, 1290, 700);
    // Shut Down Windows, Help Button When Clicked : Windows Help
    shutDownWindowsHelp = new JFrame();
    shutDownWindowsHelp.setAlwaysOnTop(true);
    shutDownWindowsHelp.setBounds(950, 50, 350, 490);
    shutDownWindowsHelp.setTitle("Windows Help");
    shutDownWindowsHelpPanel = new JPanel[2];
    for (int i = 0; i < 2; i++) {
      shutDownWindowsHelpPanel[i] = new JPanel();
    }
    shutDownWindowsHelpPanel[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        shutDownWindowsHelp.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    });
    shutDownWindowsHelpPanel[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        shutDownWindowsHelp.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
      }
    });
    shutDownWindowsHelpPanel[0].setLayout(new FlowLayout(FlowLayout.LEADING));
    shutDownWindowsHelpPanel[1].setLayout(new BorderLayout());
    shutDownWindowsHelpButton = new JButton[7];
    shutDownWindowsHelpButton[0] = new JButton("Help Topics");
    shutDownWindowsHelpButton[1] = new JButton("Back");
    shutDownWindowsHelpButton[1].setEnabled(false);
    shutDownWindowsHelpButton[2] = new JButton("Options");
    for (int i = 3; i < 7; i++) {
      shutDownWindowsHelpButton[i] = new JButton("");
      shutDownWindowsHelpButton[i].addActionListener(this);
      shutDownWindowsHelpButton[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          shutDownWindowsHelp.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
      });
      shutDownWindowsHelpPanel[1].add(shutDownWindowsHelpButton[i]);
    }
    shutDownWindowsHelpButton[3].addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {

      }
    });
    shutDownWindowsHelpButton[4].addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {

      }
    });
    shutDownWindowsHelpButton[5].addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {

      }
    });
    shutDownWindowsHelpButton[6].addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {

      }
    });
    shutDownWindowsHelpButton[3].setBounds(0, 120, 20, 20);
    shutDownWindowsHelpButton[4].setBounds(0, 150, 20, 20);
    shutDownWindowsHelpButton[5].setBounds(0, 180, 20, 20);
    shutDownWindowsHelpButton[6].setBounds(0, 210, 20, 20);
    for (int i = 0; i < 3; i++) {
      shutDownWindowsHelpButton[i].addActionListener(this);
      shutDownWindowsHelpButton[i].setFont(MSSansSerif16);
      shutDownWindowsHelpPanel[0].add(shutDownWindowsHelpButton[i]);
    }
    shutDownWindowsHelp.add(shutDownWindowsHelpPanel[0], BorderLayout.NORTH);
    shutDownWindowsHelp.add(shutDownWindowsHelpPanel[1]);
    shutDownWindowsHelpTextPane = new JTextPane();
    shutDownWindowsHelpTextPane.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        shutDownWindowsHelp.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          shutDownWindowsHelpOptionsPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }

    });
    shutDownWindowsHelpTextPane.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, true);
    // shutDownWindowsHelpTextPane.setBounds(200,200,200,200);
    shutDownWindowsHelpTextPane.setContentType("text/html");
    shutDownWindowsHelpTextPane.setEditable(false);
    shutDownWindowsHelpTextPane.setFont(MSSansSerif16);
    shutDownWindowsHelpTextPane.setText(
      "<html>Using the Shut Down Windows dialog box<br/><br/>For information about the settings in the Shut Down Windows dialog box, click one of the following buttons:" +
      "<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>" +
      "To redisplay the Shut Down Windows dialog box, click the Start button, and then click Shut Down.<html>");;
    shutDownWindowsHelpScrollPane = new JScrollPane(shutDownWindowsHelpTextPane);
    shutDownWindowsHelpScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    shutDownWindowsHelpScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    shutDownWindowsHelpPanel[1].add(shutDownWindowsHelpScrollPane, BorderLayout.CENTER);
    shutDownWindowsHelpText = new JLabel[5];
    shutDownWindowsHelpText[0] = new JLabel("Using the Shut Down Windows dialog box");
    shutDownWindowsHelpText[1] = new JLabel("Shut Down The Computer");
    shutDownWindowsHelpText[2] = new JLabel("Restart The Computer");
    shutDownWindowsHelpText[3] = new JLabel("<html>Restart The Computer in MS-DOS<br/> Mode<html>");
    shutDownWindowsHelpText[4] = new JLabel("<html>Close All Programs And Log On As<br/> A Diferent User<html>");
    shutDownWindowsHelpText[1].setBounds(20, 120, 300, 30);
    shutDownWindowsHelpText[2].setBounds(20, 150, 300, 30);
    shutDownWindowsHelpText[3].setBounds(20, 180, 300, 30);
    shutDownWindowsHelpText[4].setBounds(20, 210, 300, 30);
    for (int i = 1; i < 5; i++) {
      shutDownWindowsHelpText[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          shutDownWindowsHelp.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
      });
      shutDownWindowsHelpText[i].setFont(MSSansSerif16);
      // shutDownWindowsHelpPanel[1].add(shutDownWindowsHelpText[i]);
    }
    shutDownWindowsHelpOptionsPopup = new JPopupMenu();
    shutDownWindowsHelpButton[2].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          shutDownWindowsHelpOptionsPopup.show(e.getComponent(), -140, 10);
        }
        if (e.getClickCount() == 2) {
          shutDownWindowsHelpOptionsPopup.setVisible(false);
        }
      }
    });
    shutDownWindowsHelpOptionsMenuItem = new JMenuItem[4];
    shutDownWindowsHelpOptionsMenuItem[0] = new JMenuItem("Annotate...");
    shutDownWindowsHelpOptionsMenuItem[1] = new JMenuItem("Copy");
    shutDownWindowsHelpOptionsMenuItem[2] = new JMenuItem("Print Topic...");
    for (int i = 0; i < 3; i++) {
      shutDownWindowsHelpOptionsPopup.add(shutDownWindowsHelpOptionsMenuItem[i]);
    }
    for (int i = 0; i < 3; i++) {
      shutDownWindowsHelpOptionsMenuItem[i].addActionListener(this);
      shutDownWindowsHelpOptionsMenuItem[i].setFont(MSSansSerif16);
    }
    shutDownWindowsHelpOptionsMenu = new JMenu[2];
    shutDownWindowsHelpOptionsMenu[0] = new JMenu("Font");
    shutDownWindowsHelpOptionsMenu[1] = new JMenu("Keep Help on Top");
    for (int i = 0; i < 2; i++) {
      shutDownWindowsHelpOptionsMenu[i].setFont(MSSansSerif16);
      shutDownWindowsHelpOptionsPopup.add(shutDownWindowsHelpOptionsMenu[i]);
    }
    shutDownWindowsHelpOptionsCheckBoxMenuItem = new JCheckBoxMenuItem[7];
    shutDownWindowsHelpOptionsCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Small");
    shutDownWindowsHelpOptionsCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Normal");
    shutDownWindowsHelpOptionsCheckBoxMenuItem[2] = new JCheckBoxMenuItem("Large");
    shutDownWindowsHelpOptionsCheckBoxMenuItem[1].setSelected(true);
    for (int i = 0; i < 3; i++) {
      shutDownWindowsHelpOptionsMenu[0].add(shutDownWindowsHelpOptionsCheckBoxMenuItem[i]);
    }
    shutDownWindowsHelpOptionsCheckBoxMenuItem[3] = new JCheckBoxMenuItem("Default");
    shutDownWindowsHelpOptionsCheckBoxMenuItem[4] = new JCheckBoxMenuItem("On Top");
    shutDownWindowsHelpOptionsCheckBoxMenuItem[5] = new JCheckBoxMenuItem("Not On Top");
    shutDownWindowsHelpOptionsCheckBoxMenuItem[3].setSelected(true);
    for (int i = 3; i < 6; i++) {
      shutDownWindowsHelpOptionsMenu[1].add(shutDownWindowsHelpOptionsCheckBoxMenuItem[i]);
    }
    shutDownWindowsHelpOptionsCheckBoxMenuItem[6] = new JCheckBoxMenuItem("Use System Colors");
    shutDownWindowsHelpOptionsPopup.add(shutDownWindowsHelpOptionsCheckBoxMenuItem[6]);
    for (int i = 0; i < 7; i++) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[i].addActionListener(this);
      shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setFont(MSSansSerif16);
    }
    // Annotate... in Options in Shut Down Windows Help
    annotateDialog = new JDialog();
    annotateDialog.setAlwaysOnTop(true);
    annotateDialog.setBounds(800, 125, 475, 370);
    annotateDialog.setLayout(null);
    annotateDialog.setResizable(false);
    annotateDialog.setTitle("Annotate");
    annotateText = new JLabel("Current annotation:");
    annotateText.setBounds(10, 15, 300, 20);
    annotateText.setFont(MSSansSerif16);
    annotateDialog.add(annotateText);
    annotateButton = new JButton[5];
    annotateButton[0] = new JButton("Save");
    annotateButton[1] = new JButton("Cancel");
    annotateButton[2] = new JButton("Delete");
    annotateButton[3] = new JButton("Copy");
    annotateButton[4] = new JButton("Paste");
    annotateButton[0].setBounds(380, 40, 75, 30);
    annotateButton[1].setBounds(380, 80, 75, 30);
    annotateButton[2].setBounds(380, 120, 75, 30);
    annotateButton[3].setBounds(380, 200, 75, 30);
    annotateButton[4].setBounds(380, 240, 75, 30);
    for (int i = 0; i < 5; i++) {
      if (i == 1) {
        continue;
      }
      annotateButton[i].setEnabled(false);
    }
    for (int i = 0; i < 5; i++) {
      annotateButton[i].addActionListener(this);
      annotateButton[i].setFont(MSSansSerif11);
      annotateDialog.add(annotateButton[i]);
    }
    annotateTextArea = new JTextArea();
    annotateTextArea.setBounds(10, 40, 360, 270);
    annotateTextArea.setFont(MSSansSerif16);
    annotateScrollPane = new JScrollPane(annotateTextArea);
    annotateScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    annotateDialog.getContentPane().add(annotateScrollPane);
    annotateDialog.add(annotateTextArea);
  }

  public void taskbarMethod() {
    // Taskbar
    taskbar = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Taskbar.png")));
    /*taskbar.addMouseListener(new MouseAdapter() {
    	public void mousePressed(MouseEvent e) {
    		startMenuButtonUnclickMethod();
    		desktop.add(startMenuButtonClickedTwice);
    		desktop.revalidate();
    		desktop.repaint();
    	}
    });*/
    taskbar.setBounds(76, 581, 1080, 213);
    // Taskbar when Start Menu is Open
    taskbarOpen = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("TaskbarOpen.png")));
    taskbarOpen.setBounds(25, 581, 1130, 213);
    // Volume
    volume = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Volume.png")));
    volume.setBounds(1155, 661, 31, 40);
    volume.setToolTipText("Volume");
    // Date/Time
    time = new JLabel();
    SES1 = Executors.newScheduledThreadPool(1);
    SES1.scheduleWithFixedDelay(new Runnable() {
      public void run() {
        try {
          zoneId = ZoneId.of("PRC");
          locale = Locale.US;
          formatDate = DateTimeFormatter.ofPattern("EEEE, MMMM dd, yyyy", locale);
          dateToday = ZonedDateTime.now(zoneId);
          formattedDateToday = dateToday.format(formatDate);
          formatTime = DateTimeFormatter.ofPattern("hh:mm a", locale);
          timeNow = ZonedDateTime.now(zoneId);
          formattedTimeNow = timeNow.format(formatTime);
          time.setBackground(gray);
          time.setBounds(1186, 668, 90, 30);
          time.setFont(MSSansSerif18);
          time.setOpaque(true);
          time.setText(formattedTimeNow);
          time.setToolTipText(formattedDateToday);
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }

    }, 0, 1, TimeUnit.SECONDS);
    // Time Horizontal Border
    timeHorizontalBorder = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TimeHorizontalBorder.png")));
    timeHorizontalBorder.setBounds(1186, 660, 100, 9);
    // Time Vertical Border
    timeVerticalBorder = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TimeVerticalBorder.png")));
    timeVerticalBorder.setBounds(1226, 665, 100, 50);
    // Setting up Date/Time Properties
    dateTimeProperties = new JDialog();
    dateTimeProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        dateTimePropertiesTabbedPane.setSelectedIndex(0);
        switch (currentMonth) {
        case "January":
          dateTimePropertiesMonth.setSelectedIndex(0);
          break;
        case "February":
          dateTimePropertiesMonth.setSelectedIndex(1);
          break;
        case "March":
          dateTimePropertiesMonth.setSelectedIndex(2);
          break;
        case "April":
          dateTimePropertiesMonth.setSelectedIndex(3);
          break;
        case "May":
          dateTimePropertiesMonth.setSelectedIndex(4);
          break;
        case "June":
          dateTimePropertiesMonth.setSelectedIndex(5);
          break;
        case "July":
          dateTimePropertiesMonth.setSelectedIndex(6);
          break;
        case "August":
          dateTimePropertiesMonth.setSelectedIndex(7);
          break;
        case "September":
          dateTimePropertiesMonth.setSelectedIndex(8);
          break;
        case "October":
          dateTimePropertiesMonth.setSelectedIndex(9);
          break;
        case "November":
          dateTimePropertiesMonth.setSelectedIndex(10);
          break;
        case "December":
          dateTimePropertiesMonth.setSelectedIndex(11);
          break;
        }
        dateTimePropertiesTime.setEditor(dateTimePropertiesTimeEditor);
        dateTimePropertiesTimeZone.setSelectedIndex(6);
        dateTimePropertiesCheckBox.setSelected(false);
      }
    });
    dateTimeProperties.setAlwaysOnTop(true);
    dateTimeProperties.setBounds(50, 0, 550, 475);
    dateTimeProperties.setLayout(null);
    dateTimeProperties.setResizable(false);
    dateTimeProperties.setTitle("Date/Time Properties");
    dateTimeProperties.getContentPane().setBackground(gray);
    dateTimePropertiesPanel = new JPanel[3];
    for (int i = 0; i < 2; i++) {
      dateTimePropertiesPanel[i] = new JPanel();
      dateTimePropertiesPanel[i].setLayout(null);
      dateTimePropertiesPanel[i].setSize(520, 375);
    }
    dateTimePropertiesTabbedPane = new JTabbedPane(JTabbedPane.TOP);
    dateTimePropertiesTabbedPane.addTab("Date & Time", dateTimePropertiesPanel[0]);
    dateTimePropertiesTabbedPane.addTab("Time Zone", dateTimePropertiesPanel[1]);
    dateTimePropertiesTabbedPane.setFont(MSSansSerif16);
    dateTimePropertiesPanel[2] = new JPanel();
    dateTimePropertiesPanel[2].add(dateTimePropertiesTabbedPane);
    dateTimePropertiesPanel[2].setBorder(BorderFactory.createRaisedBevelBorder());
    dateTimePropertiesPanel[2].setBounds(10, 15, 520, 375);
    dateTimePropertiesPanel[2].setLayout(new GridLayout());
    dateTimeProperties.add(dateTimePropertiesPanel[2]);
    dateTimePropertiesButton = new JButton[3];
    dateTimePropertiesButton[0] = new JButton("OK");
    dateTimePropertiesButton[1] = new JButton("Cancel");
    dateTimePropertiesButton[2] = new JButton("Apply");
    dateTimePropertiesButton[0].setBounds(160, 400, 120, 33);
    dateTimePropertiesButton[1].setBounds(290, 400, 120, 33);
    dateTimePropertiesButton[2].setBounds(420, 400, 120, 33);
    dateTimePropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      dateTimePropertiesButton[i].addActionListener(this);
      dateTimePropertiesButton[i].setFont(MSSansSerif15);
      dateTimeProperties.add(dateTimePropertiesButton[i]);
    }
    // Date & Time Tab
    dateTimePropertiesText = new JLabel[3];
    dateTimePropertiesText[0] = new JLabel("Date");
    dateTimePropertiesMonth = new JComboBox < String > ();
    dateTimePropertiesMonth.setBounds(50, 50, 120, 30);
    dateTimePropertiesMonth.setFont(MSSansSerif15);
    dateTimePropertiesPanel[0].add(dateTimePropertiesMonth);
    month = new String[15];
    month[1] = "January";
    month[2] = "February";
    month[3] = "March";
    month[4] = "April";
    month[5] = "May";
    month[6] = "June";
    month[7] = "July";
    month[8] = "August";
    month[9] = "September";
    month[10] = "October";
    month[11] = "November";
    month[12] = "December";
    for (int i = 1; i < 13; i++) {
      dateTimePropertiesMonth.addItem(month[i]);
    }
    dateTimePropertiesCalendar = Calendar.getInstance();
    dateTimePropertiesFormat = new SimpleDateFormat[4];
    dateTimePropertiesFormat[0] = new SimpleDateFormat("MMMMM", Locale.US);
    currentMonth = dateTimePropertiesFormat[0].format(dateTimePropertiesCalendar.getTime());
    switch (currentMonth) {
    case "January":
      dateTimePropertiesMonth.setSelectedIndex(0);
      break;
    case "February":
      dateTimePropertiesMonth.setSelectedIndex(1);
      break;
    case "March":
      dateTimePropertiesMonth.setSelectedIndex(2);
      break;
    case "April":
      dateTimePropertiesMonth.setSelectedIndex(3);
      break;
    case "May":
      dateTimePropertiesMonth.setSelectedIndex(4);
      break;
    case "June":
      dateTimePropertiesMonth.setSelectedIndex(5);
      break;
    case "July":
      dateTimePropertiesMonth.setSelectedIndex(6);
      break;
    case "August":
      dateTimePropertiesMonth.setSelectedIndex(7);
      break;
    case "September":
      dateTimePropertiesMonth.setSelectedIndex(8);
      break;
    case "October":
      dateTimePropertiesMonth.setSelectedIndex(9);
      break;
    case "November":
      dateTimePropertiesMonth.setSelectedIndex(10);
      break;
    case "December":
      dateTimePropertiesMonth.setSelectedIndex(11);
      break;
    }
    dateTimePropertiesFormat[1] = new SimpleDateFormat("YYYY");
    currentYear = dateTimePropertiesFormat[1].format(dateTimePropertiesCalendar.getTime());
    dateTimePropertiesFormat[2] = new SimpleDateFormat("dd");
    currentDayOfDate = dateTimePropertiesFormat[2].format(dateTimePropertiesCalendar.getTime());
    dateTimePropertiesFormat[3] = new SimpleDateFormat("h:mm:ss a");
    String currentTimeHMS = dateTimePropertiesFormat[3].format(dateTimePropertiesCalendar.getTime());
    // Day of Week
    currentDayOfWeekNumber = dateTimePropertiesCalendar.get(Calendar.DAY_OF_WEEK);
    switch (currentDayOfWeekNumber) {
    case 1:
      currentDayOfWeek = "S";
      break;
    case 2:
      currentDayOfWeek = "M";
      break;
    case 3:
      currentDayOfWeek = "T";
      break;
    case 4:
      currentDayOfWeek = "W";
      break;
    case 5:
      currentDayOfWeek = "T";
      break;
    case 6:
      currentDayOfWeek = "F";
      break;
    case 7:
      currentDayOfWeek = "S";
      break;
    }
    dateTimePropertiesSpinnerModel = new SpinnerModel[5];
    dateTimePropertiesSpinnerModel[0] = new SpinnerNumberModel(Integer.parseInt(currentYear), 1980, 2099, 1);
    dateTimePropertiesYear = new JSpinner(dateTimePropertiesSpinnerModel[0]);
    dateTimePropertiesYear.setBounds(175, 50, 120, 30);
    dateTimePropertiesYear.setFont(MSSansSerif15);
    dateTimePropertiesYearEditor = new NumberEditor(dateTimePropertiesYear, "#");
    dateTimePropertiesYear.setEditor(dateTimePropertiesYearEditor);
    dateTimePropertiesPanel[0].add(dateTimePropertiesYear);
    Date currentTime1 = null;
    try {
      currentTime1 = new SimpleDateFormat("h:mm:ss a").parse(currentTimeHMS);
    } catch (ParseException e1) {
      e1.printStackTrace();
    }
    dateTimePropertiesSpinnerModel[1] = new SpinnerDateModel(currentTime1, null, null, Calendar.SECOND);
    SES2 = Executors.newScheduledThreadPool(1);
    SES2.scheduleWithFixedDelay(new Runnable() {
      public void run() {
        try {
          zoneId = ZoneId.of("PRC");
          locale = Locale.US;
          dateTimePropertiesTime = new JSpinner(dateTimePropertiesSpinnerModel[1]);
          dateTimePropertiesTime.setBounds(300, 200, 150, 30);
          dateTimePropertiesTime.setFont(MSSansSerif15);
          dateTimePropertiesTime.setLocale(Locale.US);
          dateTimePropertiesTimeEditor = new DateEditor(dateTimePropertiesTime, "h:mm:ss a");
          dateTimePropertiesPanel[0].add(dateTimePropertiesTime);
          dateTimePropertiesTime.setEditor(dateTimePropertiesTimeEditor);
          dateTimePropertiesTime.setModel(dateTimePropertiesSpinnerModel[1]);
          // dateTimePropertiesTime.setValue();
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }, 0, 1, TimeUnit.SECONDS);
    // Time Zone Tab
    dateTimePropertiesTimeZone = new JComboBox < String > ();
    timeZone = new String[51];
    timeZone[0] = "(GMT -12:00) Eriwetok, Kwajalein";
    timeZone[1] = "(GMT -11:00) Midway Island, Samoa";
    timeZone[2] = "(GMT -10:00) Hawaii";
    timeZone[3] = "(GMT -09:00) Alaska";
    timeZone[4] = "(GMT -08:00) Pacific Time (US & Canada); Tijuana";
    timeZone[5] = "(GMT -07:00) Arizona";
    timeZone[6] = "(GMT -07:00) Mountain Time (US & Canada)";
    timeZone[7] = "(GMT -06:00) Central Time (US & Canada)";
    timeZone[8] = "(GMT -06:00) Mexico City (Tegucigalpa)";
    timeZone[9] = "(GMT -06:00) Saskatchewan";
    timeZone[10] = "(GMT -05:00) Bogota, Lima, Quito";
    timeZone[11] = "(GMT -05:00) Eastern Time (US & Canada)";
    timeZone[12] = "(GMT -05:00) Indiana (East)";
    timeZone[13] = "(GMT -04:00) Atlantic Time (Canada)";
    timeZone[14] = "(GMT -04:00) Caracas, La Paz";
    timeZone[15] = "(GMT -03:30) Newfoundland";
    timeZone[16] = "(GMT -03:00) Brasilia";
    timeZone[17] = "(GMT -03:00) Buenos Aries, Georgetown";
    timeZone[18] = "(GMT -02:00) Mid-Atlantic";
    timeZone[19] = "(GMT -01:00) Azores, Cape Verde Is.";
    timeZone[20] = "(GMT) Greenwich Mean Time: Dublin, Edinburgh, London";
    timeZone[21] = "(GMT) Monrovia, Casablanca";
    timeZone[22] = "(GMT +01:00) Berlin, Stockholm, Rome, Bern, Brussels, Vienna, Amsterdam";
    timeZone[23] = "(GMT +01:00) Lisbon, Warsaw";
    timeZone[24] = "(GMT +01:00) Paris, Madrid";
    timeZone[25] = "(GMT +01:00) Prague";
    timeZone[26] = "(GMT +02:00) Athens, Helsinki, Istanbul";
    timeZone[27] = "(GMT +02:00) Cairo";
    timeZone[28] = "(GMT +02:00) Eastern Europe";
    timeZone[29] = "(GMT +02:00) Harare, Pretoria";
    timeZone[30] = "(GMT +02:00) Israel";
    timeZone[31] = "(GMT +03:00) Baghdad, Kuwait, Nairobi, Riyadh";
    timeZone[32] = "(GMT +03:00) Moscow, St. Petersburg";
    timeZone[33] = "(GMT +03:30) Tehran";
    timeZone[34] = "(GMT +04:00) Abu Dhabi, Muscat, Tbilisi, Kazan, Volograd";
    timeZone[35] = "(GMT +04:30) Kabul";
    timeZone[36] = "(GMT +05:00) Islamabad, Karachi, Ekaterinburg, Tashkent";
    timeZone[37] = "(GMT +05:30) Bombay, Calcutta, Madras, New Delhi, Colombo";
    timeZone[38] = "(GMT +06:00) Almaty, Dhaka";
    timeZone[39] = "(GMT +07:00) Bangkok, Jakarta, Hanoi";
    timeZone[40] = "(GMT +08:00) Beijing, Chongqing, Urumqi";
    timeZone[41] = "(GMT +08:00) Hong Kong, Perth, Singapore, Taipei";
    timeZone[42] = "(GMT +09:00) Tokyo, Osaka, Sapporo, Seoul, Yakutsk";
    timeZone[43] = "(GMT +09:30) Adelaide";
    timeZone[44] = "(GMT +09:30) Darwin";
    timeZone[45] = "(GMT +10:00) Brisbane, Melbourne, Sydney";
    timeZone[46] = "(GMT +10:00) Guam, Port Moresby, Vladivostok";
    timeZone[47] = "(GMT +10:00) Hobart";
    timeZone[48] = "(GMT +11:00) Magadan, Solomon Is., New Caledonia";
    timeZone[49] = "(GMT +12:00) Fiji, Kamchatka, Marshall Is.";
    timeZone[50] = "(GMT +12:00) Wellington, Auckland";
    for (int i = 0; i < 51; i++) {
      dateTimePropertiesTimeZone.addItem(timeZone[i]);
    }
    dateTimePropertiesTimeZone.setBounds(10, 5, 450, 30);
    dateTimePropertiesTimeZone.setFont(MSSansSerif15);
    dateTimePropertiesTimeZone.setSelectedIndex(6);
    dateTimePropertiesPanel[1].add(dateTimePropertiesTimeZone);
    dateTimePropertiesWorldMap = new JLabel[51];
    dateTimePropertiesWorldMap[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DateTimePropertiesWorldMapMountainTime.png")));
    dateTimePropertiesWorldMap[0].setBounds(10, 40, 497, 259);
    dateTimePropertiesPanel[1].add(dateTimePropertiesWorldMap[0]);
    dateTimePropertiesCheckBox = new JCheckBox("Automatically adjust clock for daylight saving changes");
    dateTimePropertiesCheckBox.setBounds(10, 300, 400, 50);
    dateTimePropertiesCheckBox.setFont(MSSansSerif15);
    dateTimePropertiesPanel[1].add(dateTimePropertiesCheckBox);
  }
  public void startMenuButtonUnclickMethod() {
    if (startMenuButtonClickedTwice.getParent() != null) {
      desktop.remove(startMenuButtonClickedTwice);
      desktop.add(startMenuButton);
      desktop.revalidate();
      desktop.repaint();
      if (taskbar.getParent() != null) {
        desktop.remove(taskbar);
        desktop.add(taskbarOpen);
        desktop.revalidate();
        desktop.repaint();
      } else if (taskbarOpen.getParent() != null) {
        desktop.remove(taskbarOpen);
        desktop.add(taskbar);
        desktop.revalidate();
        desktop.repaint();
      }
    }
  }
  public void startMenuAllObjectsSetInvisibleMethod() {
    desktop.remove(startMenuPrograms);
    desktop.remove(startMenuProgramsDisplayed);
    desktop.remove(startMenuProgramsSelected);
    desktop.remove(programsAccessories);
    desktop.remove(programsAccessoriesDisplayed);
    desktop.remove(programsAccessoriesSelected);
    desktop.remove(programsStartUp);
    desktop.remove(programsStartUpDisplayed);
    desktop.remove(programsStartUpSelected);
    desktop.remove(startUpEmpty);
    desktop.remove(startUpEmptySelected);
    desktop.remove(programsMS_DOS_Prompt);
    desktop.remove(programsMS_DOS_PromptSelected);
    desktop.remove(programsWindowsExplorer);
    desktop.remove(programsWindowsExplorerSelected);
    desktop.remove(games);
    desktop.remove(gamesSelected);
    desktop.remove(gamesDisplayed);
    desktop.remove(gamesFreeCell);
    desktop.remove(gamesHearts);
    desktop.remove(gamesMinesweeper);
    desktop.remove(gamesSolitaire);
    desktop.remove(gamesFreeCellSelected);
    desktop.remove(gamesHeartsSelected);
    desktop.remove(gamesMinesweeperSelected);
    desktop.remove(gamesSolitaireSelected);
    desktop.remove(internetTools);
    desktop.remove(internetToolsSelected);
    desktop.remove(internetToolsDisplayed);
    desktop.remove(internetToolsInternetExplorer);
    desktop.remove(internetToolsInternetSetupWizard);
    desktop.remove(internetToolsInternetExplorerSelected);
    desktop.remove(internetToolsInternetSetupWizardSelected);
    desktop.remove(accessoriesMultimedia);
    desktop.remove(accessoriesMultimediaDisplayed);
    desktop.remove(accessoriesMultimediaSelected);
    desktop.remove(multimediaMediaPlayer);
    desktop.remove(multimediaSoundRecorder);
    desktop.remove(multimediaVolumeControl);
    desktop.remove(multimediaMediaPlayerSelected);
    desktop.remove(multimediaSoundRecorderSelected);
    desktop.remove(multimediaVolumeControlSelected);
    desktop.remove(systemToolsDisplayed);
    desktop.remove(systemToolsScanDisk);
    desktop.remove(systemToolsScanDiskSelected);
    desktop.remove(accessoriesCalculator);
    desktop.remove(accessoriesNotepad);
    desktop.remove(accessoriesOnlineRegistration);
    desktop.remove(accessoriesPaint);
    desktop.remove(accessoriesWordPad);
    desktop.remove(accessoriesCalculatorSelected);
    desktop.remove(accessoriesNotepadSelected);
    desktop.remove(accessoriesOnlineRegistrationSelected);
    desktop.remove(accessoriesPaintSelected);
    desktop.remove(accessoriesWordPadSelected);
    desktop.remove(startMenuPrograms);
    desktop.remove(startMenuDocuments);
    desktop.remove(startMenuDocumentsCovered);
    desktop.remove(startMenuSettings);
    desktop.remove(startMenuFind);
    desktop.remove(startMenuHelp);
    desktop.remove(startMenuRun);
    desktop.remove(startMenuShutDown);
    desktop.remove(startMenuProgramsSelected);
    desktop.remove(startMenuProgramsDisplayed);
    desktop.remove(startMenuDocumentsSelected);
    desktop.remove(startMenuDocumentsDisplayed);
    desktop.remove(startMenuDocumentsCovered);
    desktop.remove(startMenuSettingsSelected);
    desktop.remove(startMenuSettingsDisplayed);
    desktop.remove(startMenuFindSelected);
    desktop.remove(startMenuHelpSelected);
    desktop.remove(startMenuRunSelected);
    desktop.remove(startMenuShutDownSelected);
    desktop.remove(startMenuButtonClicked);
    desktop.revalidate();
    desktop.repaint();
  }
  public void desktopAddComponentsMethod() {
    // Adding components to Desktop
    desktop.add(myComputer);
    desktop.add(inbox);
    desktop.add(recycleBin);
    desktop.add(theInternet);
    desktop.add(MSN);
    desktop.add(startMenuButton);
    desktop.add(taskbar);
    desktop.add(volume);
    desktop.add(time);
    desktop.add(timeHorizontalBorder);
    desktop.add(timeVerticalBorder);
  }

  public void desktopPopupMethod() {
    // Desktop Popup Menu
    desktopPopup = new JPopupMenu();
    menu = new JMenu[10];
    menuItem = new JMenuItem[100];
    menu[0] = new JMenu("Arrange Icons");
    menuItem[0] = new JMenuItem("by Name");
    menuItem[1] = new JMenuItem("by Type");
    menuItem[2] = new JMenuItem("by Size");
    menuItem[3] = new JMenuItem("by Date");
    menuItem[4] = new JMenuItem("Auto Arrange");
    for (int i = 0; i < 5; i++) {
      menu[0].add(menuItem[i]);
    }
    menuItem[5] = new JMenuItem("Line up Icons");
    menuItem[6] = new JMenuItem("Paste");
    menuItem[7] = new JMenuItem("Paste Shortcut");
    menu[1] = new JMenu("New");
    menuItem[8] = new JMenuItem("Folder");
    menuItem[9] = new JMenuItem("Shortcut");
    menuItem[10] = new JMenuItem("Wave Sound");
    menuItem[11] = new JMenuItem("Text Document");
    menuItem[12] = new JMenuItem("WordPad Document");
    menuItem[13] = new JMenuItem("Bitmap Image");
    menuItem[14] = new JMenuItem("Properties");
    for (int i = 8; i < 10; i++) {
      menu[1].add(menuItem[i]);
    }
    for (int i = 9; i < 11; i++) {
      menuItem[i].setEnabled(false);
    }
    menu[1].add(separator[0]);
    for (int i = 10; i < 14; i++) {
      menu[1].add(menuItem[i]);
    }
    desktopPopup.add(menu[0]);
    desktopPopup.add(menuItem[5]);
    desktopPopup.add(separator[1]);
    for (int i = 6; i < 8; i++) {
      desktopPopup.add(menuItem[i]);
      menuItem[i].setEnabled(false);
    }
    desktopPopup.add(separator[2]);
    desktopPopup.add(menu[1]);
    desktopPopup.add(menuItem[14]);
    // Start Menu Popup Menu
    startMenuPopup = new JPopupMenu();
    menuItem[15] = new JMenuItem("Open");
    menuItem[16] = new JMenuItem("Explore");
    menuItem[17] = new JMenuItem("Find...");
    for (int i = 15; i < 18; i++) {
      startMenuPopup.add(menuItem[i]);
    }
    // Taskbar Popup Menu
    taskbarPopup = new JPopupMenu();
    menuItem[18] = new JMenuItem("Cascade");
    menuItem[19] = new JMenuItem("Tile Horizontally");
    menuItem[20] = new JMenuItem("Tile Vertically");
    menuItem[21] = new JMenuItem("Minimize All Windows");
    menuItem[22] = new JMenuItem("Properties");
    for (int i = 18; i < 23; i++) {
      taskbarPopup.add(menuItem[i]);
    }
    taskbarPopup.add(separator[3]);
    taskbarPopup.add(menuItem[21]);
    taskbarPopup.add(separator[4]);
    taskbarPopup.add(menuItem[22]);
    for (int i = 18; i < 22; i++) {
      menuItem[i].setEnabled(false);
    }
    // Volume Popup Menu
    volumePopup = new JPopupMenu();
    menuItem[23] = new JMenuItem("Volume Controls");
    menuItem[24] = new JMenuItem("Adjust Audio Properties");
    for (int i = 23; i < 25; i++) {
      volumePopup.add(menuItem[i]);
    }
    // Time Popup Menu
    timePopup = new JPopupMenu();
    menuItem[25] = new JMenuItem("Adjust Date/Time");
    menuItem[26] = new JMenuItem("Cascade");
    menuItem[27] = new JMenuItem("Tile Horizontally");
    menuItem[28] = new JMenuItem("Tile Vertically");
    menuItem[29] = new JMenuItem("Minimize All Windows");
    menuItem[30] = new JMenuItem("Properties");
    for (int i = 25; i < 29; i++) {
      timePopup.add(menuItem[i]);
    }
    timePopup.add(separator[5]);
    timePopup.add(menuItem[29]);
    menuItem[29].setEnabled(false);
    timePopup.add(separator[6]);
    timePopup.add(menuItem[30]);
    // My Computer Popup Menu
    myComputerPopup = new JPopupMenu();
    menuItem[31] = new JMenuItem("Open");
    menuItem[32] = new JMenuItem("Explore");
    menuItem[33] = new JMenuItem("Find...");
    menuItem[34] = new JMenuItem("Create Shortcut");
    menuItem[35] = new JMenuItem("Rename");
    menuItem[36] = new JMenuItem("Properties");
    for (int i = 31; i <= 34; i++) {
      myComputerPopup.add(menuItem[i]);
    }
    myComputerPopup.add(separator[7]);
    for (int i = 35; i < 37; i++) {
      myComputerPopup.add(menuItem[i]);
    }
    myComputerPopup.add(separator[8]);
    myComputerPopup.add(menuItem[36]);
    // Inbox Popup Menu
    inboxPopup = new JPopupMenu();
    menuItem[37] = new JMenuItem("Open");
    menuItem[38] = new JMenuItem("Explore");
    menuItem[39] = new JMenuItem("Cut");
    menuItem[40] = new JMenuItem("Create Shortcut");
    menuItem[41] = new JMenuItem("Delete");
    menuItem[42] = new JMenuItem("Rename");
    menuItem[43] = new JMenuItem("Properties");
    for (int i = 37; i < 39; i++) {
      inboxPopup.add(menuItem[i]);
    }
    inboxPopup.add(separator[9]);
    inboxPopup.add(menuItem[39]);
    inboxPopup.add(separator[10]);
    for (int i = 40; i < 43; i++) {
      inboxPopup.add(menuItem[i]);
    }
    inboxPopup.add(separator[11]);
    inboxPopup.add(menuItem[43]);
    // Recycle Bin Popup Menu
    recycleBinPopup = new JPopupMenu();
    menuItem[44] = new JMenuItem("Open");
    menuItem[45] = new JMenuItem("Explore");
    menuItem[46] = new JMenuItem("Empty Recycle Bin");
    menuItem[47] = new JMenuItem("Create Shortcut");
    menuItem[48] = new JMenuItem("Properties");
    for (int i = 44; i < 47; i++) {
      recycleBinPopup.add(menuItem[i]);
    }
    menuItem[46].setEnabled(false);
    recycleBinPopup.add(separator[12]);
    recycleBinPopup.add(menuItem[47]);
    recycleBinPopup.add(separator[13]);
    recycleBinPopup.add(menuItem[48]);
    // the Internet Popup Menu
    theInternetPopup = new JPopupMenu();
    menuItem[49] = new JMenuItem("Open");
    menuItem[50] = new JMenuItem("Create Shortcut");
    menuItem[51] = new JMenuItem("Delete");
    menuItem[52] = new JMenuItem("Rename");
    menuItem[53] = new JMenuItem("Properties");
    theInternetPopup.add(menuItem[49]);
    theInternetPopup.add(separator[14]);
    for (int i = 50; i < 53; i++) {
      theInternetPopup.add(menuItem[i]);
    }
    theInternetPopup.add(separator[15]);
    theInternetPopup.add(menuItem[53]);
    // MSN Popup Menu
    MSN_Popup = new JPopupMenu();
    menuItem[54] = new JMenuItem("Open");
    menu[2] = new JMenu("Send To");
    menuItem[55] = new JMenuItem("Removable Disk [A]");
    menu[2].add(menuItem[55]);
    menuItem[56] = new JMenuItem("Cut");
    menuItem[57] = new JMenuItem("Copy");
    menuItem[58] = new JMenuItem("Create Shortcut");
    menuItem[59] = new JMenuItem("Delete");
    menuItem[60] = new JMenuItem("Rename");
    menuItem[61] = new JMenuItem("Properties");
    MSN_Popup.add(menuItem[54]);
    MSN_Popup.add(separator[16]);
    MSN_Popup.add(menu[2]);
    MSN_Popup.add(separator[17]);
    for (int i = 56; i < 58; i++) {
      MSN_Popup.add(menuItem[i]);
    }
    MSN_Popup.add(separator[18]);
    for (int i = 58; i < 61; i++) {
      MSN_Popup.add(menuItem[i]);
    }
    MSN_Popup.add(separator[19]);
    MSN_Popup.add(menuItem[61]);
    // Setting Font and Size for All Menus and Menu Items
    for (int i = 0; i < 3; i++) {
      menu[i].addActionListener(this);
      menu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 62; i++) {
      menuItem[i].addActionListener(this);
      menuItem[i].setFont(MSSansSerif15);
    }
    menuItem[15].setFont(MSSansSerif16Bold);
    menuItem[23].setFont(MSSansSerif16Bold);
    menuItem[25].setFont(MSSansSerif16Bold);
    menuItem[31].setFont(MSSansSerif16Bold);
    menuItem[37].setFont(MSSansSerif16Bold);
    menuItem[44].setFont(MSSansSerif16Bold);
    menuItem[49].setFont(MSSansSerif16Bold);
    menuItem[54].setFont(MSSansSerif16Bold);
  }

  public void myComputerObjectsPopupMenuMethod() {
    // Removable Disk (A:) Popup Menu
    removableDiskA_Popup = new JPopupMenu();
    removableDiskA_PopupMenuItem = new JMenuItem[7];
    removableDiskA_PopupMenuItem[0] = new JMenuItem("Open");
    removableDiskA_PopupMenuItem[1] = new JMenuItem("Explore");
    removableDiskA_PopupMenuItem[2] = new JMenuItem("Find...");
    for (int i = 0; i < 3; i++) {
      removableDiskA_Popup.add(removableDiskA_PopupMenuItem[i]);
    }
    removableDiskA_Popup.add(separator[20]);
    removableDiskA_PopupMenuItem[3] = new JMenuItem("Copy Disk...");
    removableDiskA_Popup.add(removableDiskA_PopupMenuItem[3]);
    removableDiskA_Popup.add(separator[21]);
    removableDiskA_PopupMenuItem[4] = new JMenuItem("Format...");
    removableDiskA_Popup.add(removableDiskA_PopupMenuItem[4]);
    removableDiskA_Popup.add(separator[22]);
    removableDiskA_PopupMenuItem[5] = new JMenuItem("Create Shortcut");
    removableDiskA_Popup.add(separator[23]);
    removableDiskA_Popup.add(removableDiskA_PopupMenuItem[5]);
    removableDiskA_PopupMenuItem[6] = new JMenuItem("Properties");
    removableDiskA_Popup.add(removableDiskA_PopupMenuItem[6]);
    for (int i = 0; i < 7; i++) {
      removableDiskA_PopupMenuItem[i].addActionListener(this);
      removableDiskA_PopupMenuItem[i].setFont(MSSansSerif15);
    }
    removableDiskA_PopupMenuItem[0].setFont(MSSansSerif16Bold);
    // Play Dos Game (C:) Popup Menu
    playDosGameC_Popup = new JPopupMenu();
    playDosGameC_PopupMenuItem = new JMenuItem[6];
    playDosGameC_PopupMenuItem[0] = new JMenuItem("Open");
    playDosGameC_PopupMenuItem[1] = new JMenuItem("Explore");
    playDosGameC_PopupMenuItem[2] = new JMenuItem("Find...");
    for (int i = 0; i < 3; i++) {
      playDosGameC_Popup.add(playDosGameC_PopupMenuItem[i]);
    }
    playDosGameC_Popup.add(separator[24]);
    playDosGameC_PopupMenuItem[3] = new JMenuItem("Format...");
    playDosGameC_Popup.add(playDosGameC_PopupMenuItem[3]);
    playDosGameC_Popup.add(separator[25]);
    playDosGameC_PopupMenuItem[4] = new JMenuItem("Create Shortcut");
    playDosGameC_Popup.add(playDosGameC_PopupMenuItem[4]);
    playDosGameC_Popup.add(separator[26]);
    playDosGameC_PopupMenuItem[5] = new JMenuItem("Properties");
    playDosGameC_Popup.add(playDosGameC_PopupMenuItem[5]);
    for (int i = 0; i < 6; i++) {
      playDosGameC_PopupMenuItem[i].addActionListener(this);
      playDosGameC_PopupMenuItem[i].setFont(MSSansSerif16);
    }
    playDosGameC_PopupMenuItem[0].setFont(MSSansSerif16Bold);
    controlPanelObjectsMethod();
    // Printers Popup Menu
    printersPopup = new JPopupMenu();
    printersPopupMenuItem = new JMenuItem[4];
    printersPopupMenuItem[0] = new JMenuItem("Open");
    printersPopupMenuItem[1] = new JMenuItem("Explore");
    for (int i = 0; i < 2; i++) {
      printersPopup.add(printersPopupMenuItem[i]);
    }
    printersPopup.add(separator[29]);
    printersPopupMenuItem[2] = new JMenuItem("Create Shortcut");
    printersPopup.add(printersPopupMenuItem[2]);
    printersPopup.add(separator[30]);
    printersPopupMenuItem[3] = new JMenuItem("Properties");
    printersPopupMenuItem[3].setEnabled(false);
    printersPopup.add(printersPopupMenuItem[3]);
    for (int i = 0; i < 4; i++) {
      printersPopupMenuItem[i].addActionListener(this);
      printersPopupMenuItem[i].setFont(MSSansSerif15);
    }
    printersPopupMenuItem[0].setFont(MSSansSerif16Bold);
  }

  // Unselect All My Computer Objects except for Removable Disk (A:)
  public void myComputerUnselectMethodA() {
    if (playDosGameCSelected.getParent() != null) {
      myComputerPanel.remove(playDosGameCSelected);
      myComputerPanel.add(playDosGameC);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (controlPanelSelected.getParent() != null) {
      myComputerPanel.remove(controlPanelSelected);
      myComputerPanel.add(controlPanel);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (printersSelected.getParent() != null) {
      myComputerPanel.remove(printersSelected);
      myComputerPanel.add(printers);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
  }

  // Unselect All My Computer Objects except for Playdosgame (C:)
  public void myComputerUnselectMethodB() {
    if (removableDiskASelected.getParent() != null) {
      myComputerPanel.remove(removableDiskASelected);
      myComputerPanel.add(removableDiskA);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (controlPanelSelected.getParent() != null) {
      myComputerPanel.remove(controlPanelSelected);
      myComputerPanel.add(controlPanel);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (printersSelected.getParent() != null) {
      myComputerPanel.remove(printersSelected);
      myComputerPanel.add(printers);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
  }

  // Unselect All My Computer Objects except for Control Panel
  public void myComputerUnselectMethodC() {
    if (removableDiskASelected.getParent() != null) {
      myComputerPanel.remove(removableDiskASelected);
      myComputerPanel.add(removableDiskA);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (playDosGameCSelected.getParent() != null) {
      myComputerPanel.remove(playDosGameCSelected);
      myComputerPanel.add(playDosGameC);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (printersSelected.getParent() != null) {
      myComputerPanel.remove(printersSelected);
      myComputerPanel.add(printers);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
  }

  // Unselect All My Computer Objects except for Printers
  public void myComputerUnselectMethodD() {
    if (removableDiskASelected.getParent() != null) {
      myComputerPanel.remove(removableDiskASelected);
      myComputerPanel.add(removableDiskA);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (playDosGameCSelected.getParent() != null) {
      myComputerPanel.remove(playDosGameCSelected);
      myComputerPanel.add(playDosGameC);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
    if (controlPanelSelected.getParent() != null) {
      myComputerPanel.remove(controlPanelSelected);
      myComputerPanel.add(controlPanel);
      myComputerPanel.revalidate();
      myComputerPanel.repaint();
    }
  }

  public void controlPanelObjectsMethod() {
    // Control Panel Objects
    addNewHardware = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AddNewHardware.png")));
    addRemovePrograms = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AddRemovePrograms.png")));
    dateTime = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DateTime.png")));
    display = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Display.png")));
    fonts = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Fonts.png")));
    internet = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Internet.png")));
    joystick = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Joystick.png")));
    keyboard = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Keyboard.png")));
    modems = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Modems.png")));
    mouse = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Mouse.png")));
    multimedia = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Multimedia.png")));
    network = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Network.png")));
    passwords = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Passwords.png")));
    controlPanelPrinters = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ControlPanelPrinters.png")));
    regionalSettings = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("RegionalSettings.png")));
    sounds = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Sounds.png")));
    system = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("System.png")));
    addNewHardware.setBounds(10, 0, 75, 75);
    addRemovePrograms.setBounds(110, 0, 75, 75);
    dateTime.setBounds(210, 0, 75, 75);
    display.setBounds(310, 0, 75, 75);
    fonts.setBounds(410, 0, 75, 75);
    internet.setBounds(10, 110, 75, 75);
    joystick.setBounds(110, 110, 75, 75);
    keyboard.setBounds(210, 110, 75, 75);
    modems.setBounds(310, 110, 75, 75);
    mouse.setBounds(410, 110, 75, 75);
    multimedia.setBounds(10, 210, 75, 75);
    network.setBounds(110, 210, 75, 75);
    passwords.setBounds(210, 210, 75, 75);
    controlPanelPrinters.setBounds(310, 210, 75, 75);
    regionalSettings.setBounds(410, 210, 75, 75);
    sounds.setBounds(10, 310, 75, 75);
    system.setBounds(110, 310, 75, 75);
    ///// Control Panel Objects Selected
    addNewHardwareSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareSelected.png")));
    addRemoveProgramsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddRemoveProgramsSelected.png")));
    dateTimeSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DateTimeSelected.png")));
    displaySelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("DisplaySelected.png")));
    fontsSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("FontsSelected.png")));
    internetSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("InternetSelected.png")));
    joystickSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("JoystickSelected.png")));
    keyboardSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("KeyboardSelected.png")));
    modemsSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("ModemsSelected.png")));
    mouseSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MouseSelected.png")));
    multimediaSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaSelected.png")));
    networkSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("NetworkSelected.png")));
    passwordsSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("PasswordsSelected.png")));
    controlPanelPrintersSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ControlPanelPrintersSelected.png")));
    regionalSettingsSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("RegionalSettingsSelected.png")));
    soundsSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SoundsSelected.png")));
    systemSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SystemSelected.png")));
    addNewHardwareSelected.setBounds(10, 0, 75, 75);
    addRemoveProgramsSelected.setBounds(110, 0, 75, 75);
    dateTimeSelected.setBounds(210, 0, 75, 75);
    displaySelected.setBounds(310, 0, 75, 75);
    fontsSelected.setBounds(410, 0, 75, 75);
    internetSelected.setBounds(10, 110, 75, 75);
    joystickSelected.setBounds(110, 110, 75, 75);
    keyboardSelected.setBounds(210, 110, 75, 75);
    modemsSelected.setBounds(310, 110, 75, 75);
    mouseSelected.setBounds(410, 110, 75, 75);
    multimediaSelected.setBounds(10, 210, 75, 75);
    networkSelected.setBounds(110, 210, 75, 75);
    passwordsSelected.setBounds(210, 210, 75, 75);
    controlPanelPrintersSelected.setBounds(310, 210, 75, 75);
    regionalSettingsSelected.setBounds(410, 210, 75, 75);
    soundsSelected.setBounds(10, 310, 75, 75);
    systemSelected.setBounds(110, 310, 75, 75);
    // Control Panel Popup Menu
    controlPanelPopup = new JPopupMenu();
    controlPanelPopupMenuItem = new JMenuItem[4];
    controlPanelPopupMenuItem[0] = new JMenuItem("Open");
    controlPanelPopupMenuItem[1] = new JMenuItem("Explore");
    for (int i = 0; i < 2; i++) {
      controlPanelPopup.add(controlPanelPopupMenuItem[i]);
    }
    controlPanelPopup.add(separator[27]);
    controlPanelPopupMenuItem[2] = new JMenuItem("Create Shortcut");
    controlPanelPopup.add(controlPanelPopupMenuItem[2]);
    controlPanelPopup.add(separator[28]);
    controlPanelPopupMenuItem[3] = new JMenuItem("Properties");
    controlPanelPopupMenuItem[3].setEnabled(false);
    controlPanelPopup.add(controlPanelPopupMenuItem[3]);
    for (int i = 0; i < 4; i++) {
      controlPanelPopupMenuItem[i].addActionListener(this);
      controlPanelPopupMenuItem[i].setFont(MSSansSerif15);
    }
    controlPanelPopupMenuItem[0].setFont(MSSansSerif16Bold);
    // Control Panel Objects Popup Menus
    controlPanelOpenPopup = new JPopupMenu();
    controlPanelOpenPopupSeparator = new JSeparator[3];
    for (int i = 0; i < 3; i++) {
      controlPanelOpenPopupSeparator[i] = new JSeparator();
    }
    controlPanelOpenPopupMenu = new JMenu[2];
    controlPanelOpenPopupMenuItem = new JMenuItem[10];
    controlPanelOpenPopupMenu[0] = new JMenu("View");
    controlPanelOpenPopup.add(controlPanelOpenPopupMenu[0]);
    controlPanelOpenPopupMenuItem[0] = new JMenuItem("Large Icons");
    controlPanelOpenPopupMenuItem[1] = new JMenuItem("Small Icons");
    controlPanelOpenPopupMenuItem[2] = new JMenuItem("List");
    controlPanelOpenPopupMenuItem[3] = new JMenuItem("Details");
    for (int i = 0; i < 4; i++) {
      controlPanelOpenPopupMenu[0].add(controlPanelOpenPopupMenuItem[i]);
    }
    controlPanelOpenPopup.add(controlPanelOpenPopupSeparator[0]);
    controlPanelOpenPopupMenu[1] = new JMenu("Arrange Icons");
    controlPanelOpenPopup.add(controlPanelOpenPopupMenu[1]);
    controlPanelOpenPopupMenuItem[4] = new JMenuItem("by Name");
    controlPanelOpenPopupMenuItem[5] = new JMenuItem("by Description");
    for (int i = 4; i < 6; i++) {
      controlPanelOpenPopupMenu[1].add(controlPanelOpenPopupMenuItem[i]);
    }
    controlPanelOpenPopupMenu[1].add(controlPanelOpenPopupSeparator[1]);
    controlPanelOpenPopupMenuItem[6] = new JMenuItem("Auto Arrange");
    controlPanelOpenPopupMenu[1].add(controlPanelOpenPopupMenuItem[6]);
    controlPanelOpenPopupMenuItem[7] = new JMenuItem("Line up Icons");
    controlPanelOpenPopup.add(controlPanelOpenPopupMenuItem[7]);
    controlPanelOpenPopup.add(controlPanelOpenPopupSeparator[2]);
    controlPanelOpenPopupMenuItem[8] = new JMenuItem("Paste");
    controlPanelOpenPopupMenuItem[9] = new JMenuItem("Paste Shortcut");
    for (int i = 8; i < 10; i++) {
      controlPanelOpenPopupMenuItem[i].setEnabled(false);
      controlPanelOpenPopup.add(controlPanelOpenPopupMenuItem[i]);
    }
    for (int i = 0; i < 2; i++) {
      controlPanelOpenPopupMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 10; i++) {
      controlPanelOpenPopupMenuItem[i].addActionListener(this);
      controlPanelOpenPopupMenuItem[i].setFont(MSSansSerif16);
    }
    controlPanelObjectPopupSeparator = new JSeparator[34];
    for (int i = 0; i < 34; i++) {
      controlPanelObjectPopupSeparator[i] = new JSeparator();
    }
    // Add New Hardware Popup Menu
    addNewHardwarePopup = new JPopupMenu();
    addNewHardwarePopupMenuItem = new JMenuItem[3];
    addNewHardwarePopupMenuItem[0] = new JMenuItem("Open");
    addNewHardwarePopupMenuItem[0].setFont(MSSansSerif16Bold);
    addNewHardwarePopup.add(addNewHardwarePopupMenuItem[0]);
    addNewHardwarePopup.add(controlPanelObjectPopupSeparator[0]);
    addNewHardwarePopupMenuItem[1] = new JMenuItem("Create Shortcut");
    addNewHardwarePopup.add(addNewHardwarePopupMenuItem[1]);
    addNewHardwarePopup.add(controlPanelObjectPopupSeparator[1]);
    addNewHardwarePopupMenuItem[2] = new JMenuItem("Properties");
    addNewHardwarePopupMenuItem[2].setEnabled(false);
    addNewHardwarePopup.add(addNewHardwarePopupMenuItem[2]);
    // Add/Remove Programs Popup Menu
    addRemoveProgramsPopup = new JPopupMenu();
    addRemoveProgramsPopupMenuItem = new JMenuItem[3];
    addRemoveProgramsPopupMenuItem[0] = new JMenuItem("Open");
    addRemoveProgramsPopupMenuItem[0].setFont(MSSansSerif16Bold);
    addRemoveProgramsPopup.add(addRemoveProgramsPopupMenuItem[0]);
    addRemoveProgramsPopup.add(controlPanelObjectPopupSeparator[2]);
    addRemoveProgramsPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    addRemoveProgramsPopup.add(addRemoveProgramsPopupMenuItem[1]);
    addRemoveProgramsPopup.add(controlPanelObjectPopupSeparator[3]);
    addRemoveProgramsPopupMenuItem[2] = new JMenuItem("Properties");
    addRemoveProgramsPopupMenuItem[2].setEnabled(false);
    addRemoveProgramsPopup.add(addRemoveProgramsPopupMenuItem[2]);
    // Date/Time Popup Menu
    dateTimePopup = new JPopupMenu();
    dateTimePopupMenuItem = new JMenuItem[3];
    dateTimePopupMenuItem[0] = new JMenuItem("Open");
    dateTimePopupMenuItem[0].setFont(MSSansSerif16Bold);
    dateTimePopup.add(dateTimePopupMenuItem[0]);
    dateTimePopup.add(controlPanelObjectPopupSeparator[4]);
    dateTimePopupMenuItem[1] = new JMenuItem("Create Shortcut");
    dateTimePopup.add(dateTimePopupMenuItem[1]);
    dateTimePopup.add(controlPanelObjectPopupSeparator[5]);
    dateTimePopupMenuItem[2] = new JMenuItem("Properties");
    dateTimePopupMenuItem[2].setEnabled(false);
    dateTimePopup.add(dateTimePopupMenuItem[2]);
    // Display Popup Menu
    displayPopup = new JPopupMenu();
    displayPopupMenuItem = new JMenuItem[3];
    displayPopupMenuItem[0] = new JMenuItem("Open");
    displayPopupMenuItem[0].setFont(MSSansSerif16Bold);
    displayPopup.add(displayPopupMenuItem[0]);
    displayPopup.add(controlPanelObjectPopupSeparator[6]);
    displayPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    displayPopup.add(displayPopupMenuItem[1]);
    displayPopup.add(controlPanelObjectPopupSeparator[7]);
    displayPopupMenuItem[2] = new JMenuItem("Properties");
    displayPopupMenuItem[2].setEnabled(false);
    displayPopup.add(displayPopupMenuItem[2]);
    // Fonts Popup Menu
    fontsPopup = new JPopupMenu();
    controlPanelFontsPopupMenuItem = new JMenuItem[3];
    controlPanelFontsPopupMenuItem[0] = new JMenuItem("Open");
    controlPanelFontsPopupMenuItem[0].setFont(MSSansSerif16Bold);
    fontsPopup.add(controlPanelFontsPopupMenuItem[0]);
    fontsPopup.add(controlPanelObjectPopupSeparator[8]);
    controlPanelFontsPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    fontsPopup.add(controlPanelFontsPopupMenuItem[1]);
    fontsPopup.add(controlPanelObjectPopupSeparator[9]);
    controlPanelFontsPopupMenuItem[2] = new JMenuItem("Properties");
    controlPanelFontsPopupMenuItem[2].setEnabled(false);
    fontsPopup.add(controlPanelFontsPopupMenuItem[2]);
    // Internet Popup Menu
    internetPopup = new JPopupMenu();
    internetPopupMenuItem = new JMenuItem[3];
    internetPopupMenuItem[0] = new JMenuItem("Open");
    internetPopupMenuItem[0].setFont(MSSansSerif16Bold);
    internetPopup.add(internetPopupMenuItem[0]);
    internetPopup.add(controlPanelObjectPopupSeparator[10]);
    internetPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    internetPopup.add(internetPopupMenuItem[1]);
    internetPopup.add(controlPanelObjectPopupSeparator[11]);
    internetPopupMenuItem[2] = new JMenuItem("Properties");
    internetPopupMenuItem[2].setEnabled(false);
    internetPopup.add(internetPopupMenuItem[2]);
    // Joystick Popup Menu
    joystickPopup = new JPopupMenu();
    joystickPopupMenuItem = new JMenuItem[3];
    joystickPopupMenuItem[0] = new JMenuItem("Open");
    joystickPopupMenuItem[0].setFont(MSSansSerif16Bold);
    joystickPopup.add(joystickPopupMenuItem[0]);
    joystickPopup.add(controlPanelObjectPopupSeparator[12]);
    joystickPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    joystickPopup.add(joystickPopupMenuItem[1]);
    joystickPopup.add(controlPanelObjectPopupSeparator[13]);
    joystickPopupMenuItem[2] = new JMenuItem("Properties");
    joystickPopupMenuItem[2].setEnabled(false);
    joystickPopup.add(joystickPopupMenuItem[2]);
    // Keyboard Popup Menu
    keyboardPopup = new JPopupMenu();
    keyboardPopupMenuItem = new JMenuItem[3];
    keyboardPopupMenuItem[0] = new JMenuItem("Open");
    keyboardPopupMenuItem[0].setFont(MSSansSerif16Bold);
    keyboardPopup.add(keyboardPopupMenuItem[0]);
    keyboardPopup.add(controlPanelObjectPopupSeparator[14]);
    keyboardPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    keyboardPopup.add(keyboardPopupMenuItem[1]);
    keyboardPopup.add(controlPanelObjectPopupSeparator[15]);
    keyboardPopupMenuItem[2] = new JMenuItem("Properties");
    keyboardPopupMenuItem[2].setEnabled(false);
    keyboardPopup.add(keyboardPopupMenuItem[2]);
    // Modems Popup Men
    modemsPopup = new JPopupMenu();
    modemsPopupMenuItem = new JMenuItem[3];
    modemsPopupMenuItem[0] = new JMenuItem("Open");
    modemsPopupMenuItem[0].setFont(MSSansSerif16Bold);
    modemsPopup.add(modemsPopupMenuItem[0]);
    modemsPopup.add(controlPanelObjectPopupSeparator[16]);
    modemsPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    modemsPopup.add(modemsPopupMenuItem[1]);
    modemsPopup.add(controlPanelObjectPopupSeparator[17]);
    modemsPopupMenuItem[2] = new JMenuItem("Properties");
    modemsPopupMenuItem[2].setEnabled(false);
    modemsPopup.add(modemsPopupMenuItem[2]);
    // Mouse Popup Menu
    mousePopup = new JPopupMenu();
    mousePopupMenuItem = new JMenuItem[3];
    mousePopupMenuItem[0] = new JMenuItem("Open");
    mousePopupMenuItem[0].setFont(MSSansSerif16Bold);
    mousePopup.add(mousePopupMenuItem[0]);
    mousePopup.add(controlPanelObjectPopupSeparator[18]);
    mousePopupMenuItem[1] = new JMenuItem("Create Shortcut");
    mousePopup.add(mousePopupMenuItem[1]);
    mousePopup.add(controlPanelObjectPopupSeparator[19]);
    mousePopupMenuItem[2] = new JMenuItem("Properties");
    mousePopupMenuItem[2].setEnabled(false);
    mousePopup.add(mousePopupMenuItem[2]);
    // Multimedia Popup Menu
    multimediaPopup = new JPopupMenu();
    multimediaPopupMenuItem = new JMenuItem[3];
    multimediaPopupMenuItem[0] = new JMenuItem("Open");
    multimediaPopupMenuItem[0].setFont(MSSansSerif16Bold);
    multimediaPopup.add(multimediaPopupMenuItem[0]);
    multimediaPopup.add(controlPanelObjectPopupSeparator[20]);
    multimediaPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    multimediaPopup.add(multimediaPopupMenuItem[1]);
    multimediaPopup.add(controlPanelObjectPopupSeparator[21]);
    multimediaPopupMenuItem[2] = new JMenuItem("Properties");
    multimediaPopupMenuItem[2].setEnabled(false);
    multimediaPopup.add(multimediaPopupMenuItem[2]);
    // Network Popup Menu
    networkPopup = new JPopupMenu();
    networkPopupMenuItem = new JMenuItem[3];
    networkPopupMenuItem[0] = new JMenuItem("Open");
    networkPopupMenuItem[0].setFont(MSSansSerif16Bold);
    networkPopup.add(networkPopupMenuItem[0]);
    networkPopup.add(controlPanelObjectPopupSeparator[22]);
    networkPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    networkPopup.add(networkPopupMenuItem[1]);
    networkPopup.add(controlPanelObjectPopupSeparator[23]);
    networkPopupMenuItem[2] = new JMenuItem("Properties");
    networkPopupMenuItem[2].setEnabled(false);
    networkPopup.add(networkPopupMenuItem[2]);
    // Passwords Popup Menu
    passwordsPopup = new JPopupMenu();
    passwordsPopupMenuItem = new JMenuItem[3];
    passwordsPopupMenuItem[0] = new JMenuItem("Open");
    passwordsPopupMenuItem[0].setFont(MSSansSerif16Bold);
    passwordsPopup.add(passwordsPopupMenuItem[0]);
    passwordsPopup.add(controlPanelObjectPopupSeparator[24]);
    passwordsPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    passwordsPopup.add(passwordsPopupMenuItem[1]);
    passwordsPopup.add(controlPanelObjectPopupSeparator[25]);
    passwordsPopupMenuItem[2] = new JMenuItem("Properties");
    passwordsPopupMenuItem[2].setEnabled(false);
    passwordsPopup.add(passwordsPopupMenuItem[2]);
    // Control Panel Printers Popup Menu
    controlPanelPrintersPopup = new JPopupMenu();
    controlPanelPrintersPopupMenuItem = new JMenuItem[3];
    controlPanelPrintersPopupMenuItem[0] = new JMenuItem("Open");
    controlPanelPrintersPopupMenuItem[0].setFont(MSSansSerif16Bold);
    controlPanelPrintersPopup.add(controlPanelPrintersPopupMenuItem[0]);
    controlPanelPrintersPopup.add(controlPanelObjectPopupSeparator[26]);
    controlPanelPrintersPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    controlPanelPrintersPopup.add(controlPanelPrintersPopupMenuItem[1]);
    controlPanelPrintersPopup.add(controlPanelObjectPopupSeparator[27]);
    controlPanelPrintersPopupMenuItem[2] = new JMenuItem("Properties");
    controlPanelPrintersPopupMenuItem[2].setEnabled(false);
    controlPanelPrintersPopup.add(controlPanelPrintersPopupMenuItem[2]);
    // Regional Settings Popup Menu
    regionalSettingsPopup = new JPopupMenu();
    regionalSettingsPopupMenuItem = new JMenuItem[3];
    regionalSettingsPopupMenuItem[0] = new JMenuItem("Open");
    regionalSettingsPopupMenuItem[0].setFont(MSSansSerif16Bold);
    regionalSettingsPopup.add(regionalSettingsPopupMenuItem[0]);
    regionalSettingsPopup.add(controlPanelObjectPopupSeparator[28]);
    regionalSettingsPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    regionalSettingsPopup.add(regionalSettingsPopupMenuItem[1]);
    regionalSettingsPopup.add(controlPanelObjectPopupSeparator[29]);
    regionalSettingsPopupMenuItem[2] = new JMenuItem("Properties");
    regionalSettingsPopupMenuItem[2].setEnabled(false);
    regionalSettingsPopup.add(regionalSettingsPopupMenuItem[2]);
    // Sounds Popup Menu
    soundsPopup = new JPopupMenu();
    soundsPopupMenuItem = new JMenuItem[3];
    soundsPopupMenuItem[0] = new JMenuItem("Open");
    soundsPopupMenuItem[0].setFont(MSSansSerif16Bold);
    soundsPopup.add(soundsPopupMenuItem[0]);
    soundsPopup.add(controlPanelObjectPopupSeparator[30]);
    soundsPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    soundsPopup.add(soundsPopupMenuItem[1]);
    soundsPopup.add(controlPanelObjectPopupSeparator[31]);
    soundsPopupMenuItem[2] = new JMenuItem("Properties");
    soundsPopupMenuItem[2].setEnabled(false);
    soundsPopup.add(soundsPopupMenuItem[2]);
    // System Popup Menu
    systemPopup = new JPopupMenu();
    systemPopupMenuItem = new JMenuItem[3];
    systemPopupMenuItem[0] = new JMenuItem("Open");
    systemPopupMenuItem[0].setFont(MSSansSerif16Bold);
    systemPopup.add(systemPopupMenuItem[0]);
    systemPopup.add(controlPanelObjectPopupSeparator[32]);
    systemPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    systemPopup.add(systemPopupMenuItem[1]);
    systemPopup.add(controlPanelObjectPopupSeparator[33]);
    systemPopupMenuItem[2] = new JMenuItem("Properties");
    systemPopupMenuItem[2].setEnabled(false);
    systemPopup.add(systemPopupMenuItem[2]);
    for (int i = 0; i < 3; i++) {
      addNewHardwarePopupMenuItem[i].addActionListener(this);
      addRemoveProgramsPopupMenuItem[i].addActionListener(this);
      dateTimePopupMenuItem[i].addActionListener(this);
      displayPopupMenuItem[i].addActionListener(this);
      controlPanelFontsPopupMenuItem[i].addActionListener(this);
      internetPopupMenuItem[i].addActionListener(this);
      joystickPopupMenuItem[i].addActionListener(this);
      keyboardPopupMenuItem[i].addActionListener(this);
      modemsPopupMenuItem[i].addActionListener(this);
      mousePopupMenuItem[i].addActionListener(this);
      multimediaPopupMenuItem[i].addActionListener(this);
      networkPopupMenuItem[i].addActionListener(this);
      passwordsPopupMenuItem[i].addActionListener(this);
      controlPanelPrintersPopupMenuItem[i].addActionListener(this);
      regionalSettingsPopupMenuItem[i].addActionListener(this);
      soundsPopupMenuItem[i].addActionListener(this);
      systemPopupMenuItem[i].addActionListener(this);
    }
    for (int i = 1; i < 3; i++) {
      addNewHardwarePopupMenuItem[i].setFont(MSSansSerif16);
      addRemoveProgramsPopupMenuItem[i].setFont(MSSansSerif16);
      dateTimePopupMenuItem[i].setFont(MSSansSerif16);
      displayPopupMenuItem[i].setFont(MSSansSerif16);
      controlPanelFontsPopupMenuItem[i].setFont(MSSansSerif16);
      internetPopupMenuItem[i].setFont(MSSansSerif16);
      joystickPopupMenuItem[i].setFont(MSSansSerif16);
      keyboardPopupMenuItem[i].setFont(MSSansSerif16);
      modemsPopupMenuItem[i].setFont(MSSansSerif16);
      mousePopupMenuItem[i].setFont(MSSansSerif16);
      multimediaPopupMenuItem[i].setFont(MSSansSerif16);
      networkPopupMenuItem[i].setFont(MSSansSerif16);
      passwordsPopupMenuItem[i].setFont(MSSansSerif16);
      controlPanelPrintersPopupMenuItem[i].setFont(MSSansSerif16);
      regionalSettingsPopupMenuItem[i].setFont(MSSansSerif16);
      soundsPopupMenuItem[i].setFont(MSSansSerif16);
      systemPopupMenuItem[i].setFont(MSSansSerif16);
    }
  }

  // Unselect All Desktop Objects
  public void desktopUnselectMethod() {
    if (myComputerSelected.getParent() != null) {
      desktop.remove(myComputerSelected);
      desktop.add(myComputer);
      desktop.revalidate();
      desktop.repaint();
    }
    if (inboxSelected.getParent() != null) {
      desktop.remove(inboxSelected);
      desktop.add(inbox);
      desktop.revalidate();
      desktop.repaint();
    }
    if (recycleBinSelected.getParent() != null) {
      desktop.remove(recycleBinSelected);
      desktop.add(recycleBin);
      desktop.revalidate();
      desktop.repaint();
    }
    if (theInternetSelected.getParent() != null) {
      desktop.remove(theInternetSelected);
      desktop.add(theInternet);
      desktop.revalidate();
      desktop.repaint();
    }
    if (MSN_Selected.getParent() != null) {
      desktop.remove(MSN_Selected);
      desktop.add(MSN);
      desktop.revalidate();
      desktop.repaint();
    }
  }

  // Unselect All Desktop Objects except for My Computer
  public void desktopUnselectMethodA() {
    if (inboxSelected.getParent() != null) {
      desktop.remove(inboxSelected);
      desktop.add(inbox);
      desktop.revalidate();
      desktop.repaint();
    }
    if (recycleBinSelected.getParent() != null) {
      desktop.remove(recycleBinSelected);
      desktop.add(recycleBin);
      desktop.revalidate();
      desktop.repaint();
    }
    if (theInternetSelected.getParent() != null) {
      desktop.remove(theInternetSelected);
      desktop.add(theInternet);
      desktop.revalidate();
      desktop.repaint();
    }
    if (MSN_Selected.getParent() != null) {
      desktop.remove(MSN_Selected);
      desktop.add(MSN);
      desktop.revalidate();
      desktop.repaint();
    }
  }

  // Unselect All Desktop Objects except for Inbox
  public void desktopUnselectMethodB() {
    if (myComputerSelected.getParent() != null) {
      desktop.remove(myComputerSelected);
      desktop.add(myComputer);
      desktop.revalidate();
      desktop.repaint();
    }
    if (recycleBinSelected.getParent() != null) {
      desktop.remove(recycleBinSelected);
      desktop.add(recycleBin);
      desktop.revalidate();
      desktop.repaint();
    }
    if (theInternetSelected.getParent() != null) {
      desktop.remove(theInternetSelected);
      desktop.add(theInternet);
      desktop.revalidate();
      desktop.repaint();
    }
    if (MSN_Selected.getParent() != null) {
      desktop.remove(MSN_Selected);
      desktop.add(MSN);
      desktop.revalidate();
      desktop.repaint();
    }
  }

  // Unselect All Desktop Objects except for Recycle Bin
  public void desktopUnselectMethodC() {
    if (myComputerSelected.getParent() != null) {
      desktop.remove(myComputerSelected);
      desktop.add(myComputer);
      desktop.revalidate();
      desktop.repaint();
    }
    if (inboxSelected.getParent() != null) {
      desktop.remove(inboxSelected);
      desktop.add(inbox);
      desktop.revalidate();
      desktop.repaint();
    }
    if (theInternetSelected.getParent() != null) {
      desktop.remove(theInternetSelected);
      desktop.add(theInternet);
      desktop.revalidate();
      desktop.repaint();
    }
    if (MSN_Selected.getParent() != null) {
      desktop.remove(MSN_Selected);
      desktop.add(MSN);
      desktop.revalidate();
      desktop.repaint();
    }
  }

  // Unselect All Desktop Objects except for The Internet
  public void desktopUnselectMethodD() {
    if (myComputerSelected.getParent() != null) {
      desktop.remove(myComputerSelected);
      desktop.add(myComputer);
      desktop.revalidate();
      desktop.repaint();
    }
    if (inboxSelected.getParent() != null) {
      desktop.remove(inboxSelected);
      desktop.add(inbox);
      desktop.revalidate();
      desktop.repaint();
    }
    if (recycleBinSelected.getParent() != null) {
      desktop.remove(recycleBinSelected);
      desktop.add(recycleBin);
      desktop.revalidate();
      desktop.repaint();
    }
    if (MSN_Selected.getParent() != null) {
      desktop.remove(MSN_Selected);
      desktop.add(MSN);
      desktop.revalidate();
      desktop.repaint();
    }
  }

  // Unselect All Desktop Objects except for Set Up The Microsoft Network
  public void desktopUnselectMethodE() {
    if (myComputerSelected.getParent() != null) {
      desktop.remove(myComputerSelected);
      desktop.add(myComputer);
      desktop.revalidate();
      desktop.repaint();
    }
    if (inboxSelected.getParent() != null) {
      desktop.remove(inboxSelected);
      desktop.add(inbox);
      desktop.revalidate();
      desktop.repaint();
    }
    if (recycleBinSelected.getParent() != null) {
      desktop.remove(recycleBinSelected);
      desktop.add(recycleBin);
      desktop.revalidate();
      desktop.repaint();
    }
    if (theInternetSelected.getParent() != null) {
      desktop.remove(theInternetSelected);
      desktop.add(theInternet);
      desktop.revalidate();
      desktop.repaint();
    }
  }

  public void desktopPopupMenuFunctionalityMethod() {
    // Adding Functionality to Desktop Popup Menu
    desktop.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktopUnselectMethod();
        //startMenuButtonUnclickMethod();
        if (mediaPlayerLabel[1].getParent() != null) {
          mediaPlayerPanel.remove(mediaPlayerLabel[1]);
          mediaPlayerPanel.add(mediaPlayerLabel[0]);
          mediaPlayerPanel.revalidate();
          mediaPlayerPanel.repaint();
        }
        if (soundRecorderLabel[2].getParent() != null) {
          soundRecorderPanel.remove(soundRecorderLabel[2]);
          soundRecorderPanel.add(soundRecorderLabel[1]);
          soundRecorderPanel.revalidate();
          soundRecorderPanel.repaint();
        }
      }
      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.add(myComputer);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.add(inbox);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && recycleBinSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(recycleBinSelected);
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(theInternetSelected);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(MSN_Selected);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null &&
          recycleBinSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(recycleBinSelected);
          desktop.add(myComputer);
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null &&
          theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(theInternetSelected);
          desktop.add(myComputer);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(MSN_Selected);
          desktop.add(myComputer);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null && recycleBinSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.remove(recycleBin);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null &&
          theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.remove(theInternetSelected);
          desktop.add(inbox);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.remove(MSN_Selected);
          desktop.add(inbox);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && recycleBinSelected.getParent() != null &&
          theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(recycleBinSelected);
          desktop.remove(theInternetSelected);
          desktop.add(recycleBin);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && recycleBinSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(recycleBinSelected);
          desktop.remove(MSN_Selected);
          desktop.add(recycleBin);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && theInternetSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(theInternetSelected);
          desktop.remove(MSN_Selected);
          desktop.add(theInternet);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null &&
          recycleBinSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null &&
          theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.remove(theInternetSelected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null &&
          MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.remove(MSN_Selected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null && recycleBinSelected.getParent() != null &&
          theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.remove(theInternetSelected);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null && recycleBinSelected.getParent() != null &&
          MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.remove(MSN_Selected);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && recycleBinSelected.getParent() != null &&
          theInternetSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(recycleBinSelected);
          desktop.remove(theInternetSelected);
          desktop.remove(MSN_Selected);
          desktop.add(recycleBin);
          desktop.add(theInternet);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null &&
          recycleBinSelected.getParent() != null && theInternetSelected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.remove(theInternetSelected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.add(theInternet);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null &&
          recycleBinSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.remove(MSN_Selected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && inboxSelected.getParent() != null && recycleBinSelected.getParent() != null &&
          theInternetSelected.getParent() != null && MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.remove(theInternetSelected);
          desktop.remove(MSN_Selected);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.add(theInternet);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
        if (e.isPopupTrigger() && myComputerSelected.getParent() != null && inboxSelected.getParent() != null &&
          recycleBinSelected.getParent() != null && theInternetSelected.getParent() != null &&
          MSN_Selected.getParent() != null) {
          desktopPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputerSelected);
          desktop.remove(inboxSelected);
          desktop.remove(recycleBinSelected);
          desktop.remove(theInternetSelected);
          desktop.remove(MSN_Selected);
          desktop.add(myComputer);
          desktop.add(inbox);
          desktop.add(recycleBin);
          desktop.add(theInternet);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    // Adding Functionality to Start Menu Itself and Popup Menu
    startMenuButton.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(startMenuButton);
          desktop.remove(taskbar);
          // Remove Icons Covered by The Start Menu
          desktop.remove(theInternet);
          desktop.remove(theInternetSelected);
          desktop.remove(MSN);
          desktop.remove(MSN_Selected);
          desktop.add(startMenuButtonClicked);
          desktop.add(startMenuPrograms);
          desktop.add(startMenuDocuments);
          desktop.add(startMenuSettings);
          desktop.add(startMenuFind);
          desktop.add(startMenuHelp);
          desktop.add(startMenuRun);
          desktop.add(startMenuShutDown);
          // desktop.add(startMenuPrograms);
          desktop.add(taskbarOpen);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          startMenuPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    // Adding Functionality to Start Menu Open
    startMenuButtonClicked.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(startMenuButtonClicked);
          // Remove Start Menu Items
          desktop.remove(startMenuPrograms);
          desktop.remove(startMenuProgramsSelected);
          desktop.remove(startMenuProgramsDisplayed);
          desktop.remove(programsAccessories);
          desktop.remove(programsAccessoriesSelected);
          desktop.remove(programsAccessoriesDisplayed);
          desktop.remove(games);
          desktop.remove(gamesFreeCell);
          desktop.remove(gamesHearts);
          desktop.remove(gamesMinesweeper);
          desktop.remove(gamesSolitaire);
          desktop.remove(internetTools);
          desktop.remove(internetToolsInternetExplorer);
          desktop.remove(internetToolsInternetSetupWizard);
          desktop.remove(accessoriesMultimedia);
          desktop.remove(multimediaMediaPlayer);
          desktop.remove(multimediaSoundRecorder);
          desktop.remove(multimediaVolumeControl);
          desktop.remove(systemTools);
          desktop.remove(systemToolsScanDisk);
          desktop.remove(accessoriesCalculator);
          desktop.remove(accessoriesNotepad);
          desktop.remove(accessoriesOnlineRegistration);
          desktop.remove(accessoriesPaint);
          desktop.remove(accessoriesWordPad);
          desktop.remove(gamesSelected);
          desktop.remove(gamesFreeCellSelected);
          desktop.remove(gamesHeartsSelected);
          desktop.remove(gamesMinesweeperSelected);
          desktop.remove(gamesSolitaireSelected);
          desktop.remove(internetToolsSelected);
          desktop.remove(internetToolsInternetExplorerSelected);
          desktop.remove(internetToolsInternetSetupWizardSelected);
          desktop.remove(accessoriesMultimediaSelected);
          desktop.remove(multimediaMediaPlayerSelected);
          desktop.remove(multimediaSoundRecorderSelected);
          desktop.remove(multimediaVolumeControlSelected);
          desktop.remove(systemToolsSelected);
          desktop.remove(systemToolsScanDiskSelected);
          desktop.remove(accessoriesCalculatorSelected);
          desktop.remove(accessoriesNotepadSelected);
          desktop.remove(accessoriesOnlineRegistrationSelected);
          desktop.remove(accessoriesPaintSelected);
          desktop.remove(accessoriesWordPadSelected);
          desktop.remove(gamesDisplayed);
          desktop.remove(internetToolsDisplayed);
          desktop.remove(accessoriesMultimediaDisplayed);
          desktop.remove(systemToolsDisplayed);
          desktop.remove(programsStartUp);
          desktop.remove(programsStartUpSelected);
          desktop.remove(programsStartUpDisplayed);
          desktop.remove(startUpEmpty);
          desktop.remove(startUpEmptySelected);
          desktop.remove(programsStartUpCovered);
          desktop.remove(programsMS_DOS_Prompt);
          desktop.remove(programsMS_DOS_PromptSelected);
          desktop.remove(programsMS_DOS_PromptCovered);
          desktop.remove(programsWindowsExplorer);
          desktop.remove(programsWindowsExplorerSelected);
          desktop.remove(programsWindowsExplorerCovered);
          desktop.remove(startMenuDocuments);
          desktop.remove(startMenuDocumentsSelected);
          desktop.remove(startMenuDocumentsDisplayed);
          desktop.remove(startMenuDocumentsCovered);
          desktop.remove(documentsReadme);
          desktop.remove(documentsReadmeSelected);
          desktop.remove(startMenuSettings);
          desktop.remove(startMenuSettingsSelected);
          desktop.remove(startMenuSettingsDisplayed);
          desktop.remove(startMenuSettingsCovered);
          desktop.remove(settingsControlPanel);
          desktop.remove(settingsControlPanelSelected);
          desktop.remove(settingsPrinters);
          desktop.remove(settingsPrintersSelected);
          desktop.remove(settingsTaskbar);
          desktop.remove(settingsTaskbarSelected);
          desktop.remove(startMenuFind);
          desktop.remove(startMenuFindSelected);
          desktop.remove(startMenuFindDisplayed);
          desktop.remove(startMenuFindCovered);
          desktop.remove(findFilesOrFolders);
          desktop.remove(findFilesOrFoldersSelected);
          desktop.remove(startMenuHelp);
          desktop.remove(startMenuHelpSelected);
          desktop.remove(startMenuRun);
          desktop.remove(startMenuRunSelected);
          desktop.remove(startMenuShutDown);
          desktop.remove(startMenuShutDownSelected);
          desktop.remove(taskbarOpen);
          desktop.add(startMenuButtonClickedTwice);
          // Add Icons Covered by The Start Menu
          desktop.add(taskbar);
          desktop.add(theInternet);
          desktop.add(MSN);
          desktop.revalidate();
          desktop.repaint();
        }
      }
    });
    // Adding Functionality to Start Menu Open
    startMenuButtonClickedTwice.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(startMenuButtonClickedTwice);
          desktop.remove(taskbar);
          // Remove Icons Covered by The Start Menu
          desktop.remove(theInternet);
          desktop.remove(theInternetSelected);
          desktop.remove(MSN);
          desktop.remove(MSN_Selected);
          // Remove Start Menu Items
          desktop.add(startMenuButtonClicked);
          desktop.add(startMenuPrograms);
          desktop.add(startMenuDocuments);
          desktop.add(startMenuSettings);
          desktop.add(startMenuFind);
          desktop.add(startMenuHelp);
          desktop.add(startMenuRun);
          desktop.add(startMenuShutDown);
          // desktop.add(startMenuPrograms);
          desktop.add(taskbarOpen);
          desktop.revalidate();
          desktop.repaint();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          startMenuPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    // Adding Functionality to Taskbar Popup Menu
    taskbar.addMouseListener(new MouseAdapter() {
      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          taskbarPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    // Adding Functionality to Volume Double Clicked and Its Popup Menu
    volume.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getClickCount() == 2) {
          volumeControl.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          volumePopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    // Adding Functionality to Time Double Clicked and Its Popup Menu
    time.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getClickCount() == 2) {
          dateTimeProperties.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          timePopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    // Adding Functionality to My Computer and Its Popup Menu
    myComputer.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(myComputer);
          desktop.add(myComputerSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodA();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          myComputerOpen.setVisible(true);
          desktop.remove(myComputer);
          desktop.add(myComputerSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodA();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          myComputerPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(myComputer);
          desktop.add(myComputerSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodA();
        }
      }
    });
    /// Adding Functionality to My Computer Selected and Its Popup Menu
    myComputerSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerOpen.setVisible(true);
          desktopUnselectMethodA();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          myComputerPopup.show(e.getComponent(), e.getX(), e.getY());
          desktopUnselectMethodA();
        }
      }
    });
    // Adding Functionality to Inbox and Its Popup Menu
    inbox.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(inbox);
          desktop.add(inboxSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodB();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          inboxOpen.setVisible(true);
          if (e.getButton() == MouseEvent.BUTTON1) {
            desktop.remove(inbox);
            desktop.add(inboxSelected);
            desktop.revalidate();
            desktop.repaint();
          }
          desktopUnselectMethodB();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          inboxPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(inbox);
          desktop.add(inboxSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodB();
        }
      }
    });
    /// Adding Functionality to Inbox Selected and Its Popup Menu
    inboxSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktopUnselectMethodB();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          inboxOpen.setVisible(true);
          desktopUnselectMethodB();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          inboxPopup.show(e.getComponent(), e.getX(), e.getY());
          desktopUnselectMethodB();
        }
      }
    });
    // Adding Functionality to Recycle Bin and Its Popup Menu
    recycleBin.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(recycleBin);
          desktop.add(recycleBinSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodC();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          recycleBinOpen.setVisible(true);
          desktop.remove(recycleBin);
          desktop.add(recycleBinSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodC();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          recycleBinPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(recycleBin);
          desktop.add(recycleBinSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodC();
        }
      }
    });
    /// Adding Functionality to Recycle Bin Selected and Its Popup Menu
    recycleBinSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktopUnselectMethodC();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          recycleBinOpen.setVisible(true);
          desktopUnselectMethodC();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          recycleBinPopup.show(e.getComponent(), e.getX(), e.getY());
          desktopUnselectMethodC();
        }
      }
    });
    // Adding Functionality to The Internet and Its Popup Menu
    theInternet.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(theInternet);
          desktop.add(theInternetSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodD();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          theInternetOpen.setVisible(true);
          desktop.remove(theInternet);
          desktop.add(theInternetSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodD();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          theInternetPopup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(theInternet);
          desktop.add(theInternetSelected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodD();
        }
      }
    });
    /// Adding Functionality to The Internet Selected and Its Popup Menu
    theInternetSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktopUnselectMethodD();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          theInternetOpen.setVisible(true);
          desktopUnselectMethodD();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          theInternetPopup.show(e.getComponent(), e.getX(), e.getY());
          desktopUnselectMethodD();
        }
      }
    });
    // Adding Functionality to the Microsoft Network and Its Popup Menu
    MSN.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktop.remove(MSN);
          desktop.add(MSN_Selected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodE();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          MSN_Open.setVisible(true);
          desktop.remove(MSN);
          desktop.add(MSN_Selected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodE();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          MSN_Popup.show(e.getComponent(), e.getX(), e.getY());
          desktop.remove(MSN);
          desktop.add(MSN_Selected);
          desktop.revalidate();
          desktop.repaint();
          desktopUnselectMethodE();
        }
      }
    });
    /// Adding Functionality to Recycle Bin Selected and Its Popup Menu
    MSN_Selected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          desktopUnselectMethodE();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          MSN_Open.setVisible(true);
          desktopUnselectMethodE();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          MSN_Popup.show(e.getComponent(), e.getX(), e.getY());
          desktopUnselectMethodE();
        }
      }
    });
    // Adding Functionality to Removable Disk (A:) Double Clicked and Its Popup Menu
    removableDiskA.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerPanel.remove(removableDiskA);
          myComputerPanel.add(removableDiskASelected);
          myComputerPanel.revalidate();
          myComputerPanel.repaint();
          myComputerUnselectMethodA();
          myComputerStatusText.setText("1 object(s) selected");
        } else if (e.getClickCount() == 2) {
          myComputerOpen.setAlwaysOnTop(false);
          UIManager.put("OptionPane.yesButtonText", "Retry");
          UIManager.put("OptionPane.noButtonText", "Cancel");
          int responseRemovableDiskA;
          do {
            responseRemovableDiskA = JOptionPane.showConfirmDialog(null,
              "A: \\ is not accessible. \n\nThe device is not ready.", "Removable Disk (A:)",
              JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
          } while (responseRemovableDiskA == JOptionPane.YES_OPTION);
          if (responseRemovableDiskA != JOptionPane.YES_OPTION) {
            myComputerOpen.setAlwaysOnTop(true);
          }
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          removableDiskA_Popup.show(e.getComponent(), e.getX(), e.getY());
          if (removableDiskA.getParent() != null) {
            myComputerPanel.remove(removableDiskA);
            myComputerPanel.add(removableDiskASelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
            myComputerStatusText.setText("1 object(s) selected");
          }
          myComputerUnselectMethodA();
        }
      }
    });
    removableDiskASelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerUnselectMethodA();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          myComputerOpen.setAlwaysOnTop(false);
          UIManager.put("OptionPane.yesButtonText", "Retry");
          UIManager.put("OptionPane.noButtonText", "Cancel");
          int responseRemovableDiskA;
          do {
            responseRemovableDiskA = JOptionPane.showConfirmDialog(null,
              "A: \\ is not accessible. \n\nThe device is not ready.", "Removable Disk (A:)",
              JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
          } while (responseRemovableDiskA == JOptionPane.YES_OPTION);
          if (responseRemovableDiskA != JOptionPane.YES_OPTION) {
            myComputerOpen.setAlwaysOnTop(true);
          }
        }
        myComputerUnselectMethodA();
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          removableDiskA_Popup.show(e.getComponent(), e.getX(), e.getY());
          if (removableDiskA.getParent() != null) {
            myComputerPanel.remove(removableDiskA);
            myComputerPanel.add(removableDiskASelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
          }
          myComputerUnselectMethodA();
        }
      }
    });
    // Adding Functionality to PlayDosGame [C:] Clicked, Double Clicked and Its
    // Popup Menu
    playDosGameC.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerPanel.remove(playDosGameC);
          myComputerPanel.add(playDosGameCSelected);
          myComputerPanel.revalidate();
          myComputerPanel.repaint();
          myComputerUnselectMethodB();
          myComputerStatusText.setText("1 object(s) selected\t        Free Space:7,41M");
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          playDosGameC_Popup.show(e.getComponent(), e.getX(), e.getY());
          if (playDosGameC.getParent() != null) {
            myComputerPanel.remove(playDosGameC);
            myComputerPanel.add(playDosGameCSelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
            myComputerStatusText.setText("1 object(s) selected\t        Free Space:7,41M");
          }
          myComputerUnselectMethodB();
        }
      }
    });
    playDosGameCSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerUnselectMethodB();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          playDosGameC_Open.setVisible(true);
          myComputerUnselectMethodB();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          playDosGameC_Popup.show(e.getComponent(), e.getX(), e.getY());
          if (playDosGameC.getParent() != null) {
            myComputerPanel.remove(playDosGameC);
            myComputerPanel.add(playDosGameCSelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
          }
          myComputerUnselectMethodB();
        }
      }
    });
    /// Adding Functionality to Program Files Clicked, Double Clicked and Its Popup
    /// Menu
    programFiles.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          playDosGameC_Panel.remove(programFiles);
          playDosGameC_Panel.add(programFilesSelected);
          playDosGameC_Panel.revalidate();
          playDosGameC_Panel.repaint();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          programFilesOpen.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          programFilesPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    programFilesSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          programFilesOpen.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          programFilesPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    /// Adding Functionality to Windows Clicked, Double Clicked and Its Popup Menu
    windows.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          playDosGameC_Panel.remove(windows);
          playDosGameC_Panel.add(windowsSelected);
          playDosGameC_Panel.revalidate();
          playDosGameC_Panel.repaint();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          windowsPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    windowsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getClickCount() == 2) {
          windowsOpen.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          windowsPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    /// Adding Functionality to Command Clicked, Double Clicked and Its Popup Menu
    command.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          playDosGameC_Panel.remove(command);
          playDosGameC_Panel.add(commandSelected);
          playDosGameC_Panel.revalidate();
          playDosGameC_Panel.repaint();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          commandPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    commandSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getClickCount() == 2) {
          commandOpen.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          commandPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    // Adding Functionality to Control Panel Clicked, Double Clicked and Its Popup
    // Menu
    controlPanel.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerPanel.remove(controlPanel);
          myComputerPanel.add(controlPanelSelected);
          myComputerPanel.revalidate();
          myComputerPanel.repaint();
          myComputerUnselectMethodC();
          myComputerStatusText.setText("1 object(s) selected");
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          controlPanelPopup.show(e.getComponent(), e.getX(), e.getY());
          if (controlPanel.getParent() != null) {
            myComputerPanel.remove(controlPanel);
            myComputerPanel.add(controlPanelSelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
            myComputerStatusText.setText("1 object(s) selected");
          }
          myComputerUnselectMethodC();
        }
      }
    });
    controlPanelSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerUnselectMethodC();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          myComputerPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          try {
            Thread.sleep(500);
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          myComputerOpen.getContentPane().setCursor(Cursor.getDefaultCursor());
          controlPanelOpen.setVisible(true);
          myComputerUnselectMethodC();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          controlPanelPopup.show(e.getComponent(), e.getX(), e.getY());
          if (controlPanel.getParent() != null) {
            myComputerPanel.remove(controlPanel);
            myComputerPanel.add(controlPanelSelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
          }
          myComputerUnselectMethodC();
        }
      }
    });
    /// Adding Functionality to Control Panel Objects and their Popup Menus
    addNewHardware.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(addNewHardware);
          controlPanelPanel.add(addNewHardwareSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodA();
          controlPanelStatusText.setText("Adds new hardware to your system.");

        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          addNewHardwareWizard.setVisible(true);
          controlPanelUnselectMethodA();
          controlPanelStatusText.setText("Adds new hardware to your system.");
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          addNewHardwarePopup.show(e.getComponent(), e.getX(), e.getY());
          if (addNewHardware.getParent() != null) {
            controlPanelPanel.remove(addNewHardware);
            controlPanelPanel.add(addNewHardwareSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Adds new hardware to your system.");
          }
          controlPanelUnselectMethodA();
        }
      }
    });
    addNewHardwareSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodA();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          addNewHardwareWizard.setVisible(true);
          controlPanelUnselectMethodA();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          addNewHardwarePopup.show(e.getComponent(), e.getX(), e.getY());
          if (addNewHardware.getParent() != null) {
            controlPanelPanel.remove(addNewHardware);
            controlPanelPanel.add(addNewHardwareSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodA();
        }
      }
    });
    addRemovePrograms.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(addRemovePrograms);
          controlPanelPanel.add(addRemoveProgramsSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodB();
          controlPanelStatusText.setText("Sets up programs and creates shortcuts.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          addRemoveProgramsProperties.setVisible(true);
          controlPanelUnselectMethodB();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          addRemoveProgramsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (addRemovePrograms.getParent() != null) {
            controlPanelPanel.remove(addRemovePrograms);
            controlPanelPanel.add(addRemoveProgramsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Sets up programs and creates shortcuts.");
          }
          controlPanelUnselectMethodB();
        }
      }
    });
    addRemoveProgramsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodB();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          addRemoveProgramsProperties.setVisible(true);
          controlPanelUnselectMethodB();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          addRemoveProgramsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (addRemovePrograms.getParent() != null) {
            controlPanelPanel.remove(addRemovePrograms);
            controlPanelPanel.add(addRemoveProgramsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelUnselectMethodB();
          }
        }
      }
    });
    dateTime.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(dateTime);
          controlPanelPanel.add(dateTimeSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodC();
          controlPanelStatusText.setText("Changes date, time and time zone information.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          dateTimeProperties.setVisible(true);
          controlPanelUnselectMethodC();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          dateTimePopup.show(e.getComponent(), e.getX(), e.getY());
          if (dateTime.getParent() != null) {
            controlPanelPanel.remove(dateTime);
            controlPanelPanel.add(dateTimeSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes date, time and time zone information.");
          }
          controlPanelUnselectMethodC();
        }
      }
    });
    dateTimeSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodC();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          dateTimeProperties.setVisible(true);
          controlPanelUnselectMethodC();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          dateTimePopup.show(e.getComponent(), e.getX(), e.getY());
          if (dateTime.getParent() != null) {
            controlPanelPanel.remove(dateTime);
            controlPanelPanel.add(dateTimeSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodC();
        }
      }
    });
    display.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(display);
          controlPanelPanel.add(displaySelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodD();
          controlPanelStatusText.setText("Changes settings for your display.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          displayProperties.setVisible(true);
          controlPanelUnselectMethodD();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          displayPopup.show(e.getComponent(), e.getX(), e.getY());
          if (display.getParent() != null) {
            controlPanelPanel.remove(display);
            controlPanelPanel.add(displaySelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes settings for your display.");
          }
          controlPanelUnselectMethodD();
        }
      }
    });
    displaySelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          displayProperties.setVisible(true);
          controlPanelUnselectMethodD();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          displayPopup.show(e.getComponent(), e.getX(), e.getY());
          if (display.getParent() != null) {
            controlPanelPanel.remove(display);
            controlPanelPanel.add(displaySelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodD();
        }
      }
    });
    fonts.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(fonts);
          controlPanelPanel.add(fontsSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodE();
          controlPanelStatusText.setText("Views, adds and removes fonts on our computer.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelFontsOpen.setVisible(true);
          controlPanelUnselectMethodE();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          fontsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (fonts.getParent() != null) {
            controlPanelPanel.remove(fonts);
            controlPanelPanel.add(fontsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Views, adds and removes fonts on our computer.");
          }
          controlPanelUnselectMethodE();
        }
      }
    });
    fontsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodE();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelFontsOpen.setVisible(true);
          controlPanelUnselectMethodE();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          fontsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (fonts.getParent() != null) {
            controlPanelPanel.remove(fonts);
            controlPanelPanel.add(fontsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodE();
        }
      }
    });
    internet.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(internet);
          controlPanelPanel.add(internetSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodF();
          controlPanelStatusText.setText("Changes your Internet settings.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelInternetProperties.setVisible(true);
          controlPanelUnselectMethodF();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          internetPopup.show(e.getComponent(), e.getX(), e.getY());
          if (internet.getParent() != null) {
            controlPanelPanel.remove(internet);
            controlPanelPanel.add(internetSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes your Internet settings.");
          }
          controlPanelUnselectMethodF();
        }
      }
    });
    internetSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodF();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelInternetProperties.setVisible(true);
          controlPanelUnselectMethodF();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          internetPopup.show(e.getComponent(), e.getX(), e.getY());
          if (internet.getParent() != null) {
            controlPanelPanel.remove(internet);
            controlPanelPanel.add(internetSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodF();
        }
      }
    });
    joystick.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(joystick);
          controlPanelPanel.add(joystickSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodG();
          controlPanelStatusText.setText("Changes settings for joystick devices.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          joystickProperties.setVisible(true);
          controlPanelUnselectMethodG();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          joystickPopup.show(e.getComponent(), e.getX(), e.getY());
          if (joystick.getParent() != null) {
            controlPanelPanel.remove(joystick);
            controlPanelPanel.add(joystickSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes settings for joystick devices.");
          }
          controlPanelUnselectMethodG();
        }
      }
    });
    joystickSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodG();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          joystickProperties.setVisible(true);
          controlPanelUnselectMethodG();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          joystickPopup.show(e.getComponent(), e.getX(), e.getY());
          if (joystick.getParent() != null) {
            controlPanelPanel.remove(joystick);
            controlPanelPanel.add(joystickSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodG();
        }
      }
    });
    keyboard.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(keyboard);
          controlPanelPanel.add(keyboardSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodH();
          controlPanelStatusText.setText("Changes settings for your keyboard.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          keyboardProperties.setVisible(true);
          controlPanelUnselectMethodH();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          keyboardPopup.show(e.getComponent(), e.getX(), e.getY());
          if (keyboard.getParent() != null) {
            controlPanelPanel.remove(keyboard);
            controlPanelPanel.add(keyboardSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes settings for your keyboard.");
          }
          controlPanelUnselectMethodH();
        }
      }
    });
    keyboardSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodH();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          keyboardProperties.setVisible(true);
          controlPanelUnselectMethodH();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          keyboardPopup.show(e.getComponent(), e.getX(), e.getY());
          if (keyboard.getParent() != null) {
            controlPanelPanel.remove(keyboard);
            controlPanelPanel.add(keyboardSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodH();
        }
      }
    });
    modems.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(modems);
          controlPanelPanel.add(modemsSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodI();
          controlPanelStatusText.setText("Installs a new modem and changes modem properties.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          modemsInstallNewModem.setVisible(true);
          controlPanelUnselectMethodI();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          modemsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (modems.getParent() != null) {
            controlPanelPanel.remove(modems);
            controlPanelPanel.add(modemsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Installs a new modem and changes modem properties.");
          }
          controlPanelUnselectMethodI();
        }
      }
    });
    modemsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodI();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          modemsInstallNewModem.setVisible(true);
          controlPanelUnselectMethodI();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          modemsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (modems.getParent() != null) {
            controlPanelPanel.remove(modems);
            controlPanelPanel.add(modemsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodI();
        }
      }
    });
    mouse.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(mouse);
          controlPanelPanel.add(mouseSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodJ();
          controlPanelStatusText.setText("Changes settings for your mouse.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          mouseProperties.setVisible(true);
          controlPanelUnselectMethodJ();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          mousePopup.show(e.getComponent(), e.getX(), e.getY());
          if (mouse.getParent() != null) {
            controlPanelPanel.remove(mouse);
            controlPanelPanel.add(mouseSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes settings for your mouse.");
          }
          controlPanelUnselectMethodJ();
        }
      }
    });
    mouseSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodJ();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          mouseProperties.setVisible(true);
          controlPanelUnselectMethodJ();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          mousePopup.show(e.getComponent(), e.getX(), e.getY());
          if (mouse.getParent() != null) {
            controlPanelPanel.remove(mouse);
            controlPanelPanel.add(mouseSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodJ();
        }
      }
    });
    multimedia.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(multimedia);
          controlPanelPanel.add(multimediaSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodK();
          controlPanelStatusText.setText("Changes settings for multimedia devices.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          multimediaProperties.setVisible(true);
          controlPanelUnselectMethodK();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          multimediaPopup.show(e.getComponent(), e.getX(), e.getY());
          if (multimedia.getParent() != null) {
            controlPanelPanel.remove(multimedia);
            controlPanelPanel.add(multimediaSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes settings for multimedia devices.");
          }
          controlPanelUnselectMethodK();
        }
      }
    });
    multimediaSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodK();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          multimediaProperties.setVisible(true);
          controlPanelUnselectMethodK();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          multimediaPopup.show(e.getComponent(), e.getX(), e.getY());
          if (multimedia.getParent() != null) {
            controlPanelPanel.remove(multimedia);
            controlPanelPanel.add(multimediaSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodK();
        }
      }
    });
    network.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(network);
          controlPanelPanel.add(networkSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodL();
          controlPanelStatusText.setText("Configures network hardware and software.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelNetwork.setVisible(true);
          controlPanelUnselectMethodL();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          networkPopup.show(e.getComponent(), e.getX(), e.getY());
          if (network.getParent() != null) {
            controlPanelPanel.remove(network);
            controlPanelPanel.add(networkSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Configures network hardware and software.");
          }
          controlPanelUnselectMethodL();
        }
      }
    });
    networkSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodL();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelNetwork.setVisible(true);
          controlPanelUnselectMethodL();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          networkPopup.show(e.getComponent(), e.getX(), e.getY());
          if (network.getParent() != null) {
            controlPanelPanel.remove(network);
            controlPanelPanel.add(networkSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodL();
        }
      }
    });
    passwords.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(passwords);
          controlPanelPanel.add(passwordsSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodM();
          controlPanelStatusText.setText("Changes passwords and sets security options.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          passwordsProperties.setVisible(true);
          controlPanelUnselectMethodM();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          passwordsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (passwords.getParent() != null) {
            controlPanelPanel.remove(passwords);
            controlPanelPanel.add(passwordsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes passwords and sets security options.");
          }
          controlPanelUnselectMethodM();
        }
      }
    });
    passwordsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodM();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          passwordsProperties.setVisible(true);
          controlPanelUnselectMethodM();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          passwordsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (passwords.getParent() != null) {
            controlPanelPanel.remove(passwords);
            controlPanelPanel.add(passwordsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodM();
        }
      }
    });
    controlPanelPrinters.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(controlPanelPrinters);
          controlPanelPanel.add(controlPanelPrintersSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodN();
          controlPanelStatusText.setText("Adds, removes and changes settings for printers.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          try {
            Thread.sleep(200);
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          printersOpen.setVisible(true);
          controlPanelUnselectMethodN();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          controlPanelPrintersPopup.show(e.getComponent(), e.getX(), e.getY());
          if (controlPanelPrinters.getParent() != null) {
            controlPanelPanel.remove(controlPanelPrinters);
            controlPanelPanel.add(controlPanelPrintersSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Adds, removes and changes settings for printers.");
          }
          controlPanelUnselectMethodN();
        }
      }
    });
    controlPanelPrintersSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodN();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          try {
            Thread.sleep(200);
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          printersOpen.setVisible(true);
          controlPanelUnselectMethodN();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          controlPanelPrintersPopup.show(e.getComponent(), e.getX(), e.getY());
          if (controlPanelPrinters.getParent() != null) {
            controlPanelPanel.remove(controlPanelPrinters);
            controlPanelPanel.add(controlPanelPrintersSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodN();
        }
      }
    });
    regionalSettings.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(regionalSettings);
          controlPanelPanel.add(regionalSettingsSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodO();
          controlPanelStatusText.setText("Changes how numbers, currencies, dates and times are displayed.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          regionalSettingsProperties.setVisible(true);
          controlPanelUnselectMethodO();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          regionalSettingsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (regionalSettings.getParent() != null) {
            controlPanelPanel.remove(regionalSettings);
            controlPanelPanel.add(regionalSettingsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText
              .setText("Changes how numbers, currencies, dates and times are displayed.");
          }
          controlPanelUnselectMethodO();
        }
      }
    });
    regionalSettingsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodO();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          regionalSettingsProperties.setVisible(true);
          controlPanelUnselectMethodO();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          regionalSettingsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (regionalSettings.getParent() != null) {
            controlPanelPanel.remove(regionalSettings);
            controlPanelPanel.add(regionalSettingsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodO();
        }
      }
    });
    sounds.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(sounds);
          controlPanelPanel.add(soundsSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodP();
          controlPanelStatusText.setText("Changes system and program sounds.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          soundsProperties.setVisible(true);
          controlPanelUnselectMethodP();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          soundsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (sounds.getParent() != null) {
            controlPanelPanel.remove(sounds);
            controlPanelPanel.add(soundsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Changes system and program sounds.");
          }
          controlPanelUnselectMethodP();
        }
      }
    });
    soundsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodP();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          soundsProperties.setVisible(true);
          controlPanelUnselectMethodP();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          soundsPopup.show(e.getComponent(), e.getX(), e.getY());
          if (sounds.getParent() != null) {
            controlPanelPanel.remove(sounds);
            controlPanelPanel.add(soundsSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodP();
        }
      }
    });
    system.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelPanel.remove(system);
          controlPanelPanel.add(systemSelected);
          controlPanelPanel.revalidate();
          controlPanelPanel.repaint();
          controlPanelUnselectMethodQ();
          controlPanelStatusText.setText("Provides system information and changes advanced settings.");
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelSystemProperties.setVisible(true);
          controlPanelUnselectMethodQ();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          systemPopup.show(e.getComponent(), e.getX(), e.getY());
          if (system.getParent() != null) {
            controlPanelPanel.remove(system);
            controlPanelPanel.add(systemSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
            controlPanelStatusText.setText("Provides system information and changes advanced settings.");
          }
          controlPanelUnselectMethodQ();
        }
      }
    });
    systemSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          controlPanelUnselectMethodQ();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          controlPanelSystemProperties.setVisible(true);
          controlPanelUnselectMethodQ();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          systemPopup.show(e.getComponent(), e.getX(), e.getY());
          if (system.getParent() != null) {
            controlPanelPanel.remove(system);
            controlPanelPanel.add(systemSelected);
            controlPanelPanel.revalidate();
            controlPanelPanel.repaint();
          }
          controlPanelUnselectMethodQ();
        }
      }
    });
    // Adding Functionality to Printers Clicked, Double Clicked and Its Popup Menu
    printers.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerPanel.remove(printers);
          myComputerPanel.add(printersSelected);
          myComputerPanel.revalidate();
          myComputerPanel.repaint();
          myComputerUnselectMethodD();
          myComputerStatusText.setText("1 object(s) selected");
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          printersPopup.show(e.getComponent(), e.getX(), e.getY());
          if (printers.getParent() != null) {
            myComputerPanel.remove(printers);
            myComputerPanel.add(printersSelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
            myComputerStatusText.setText("1 object(s) selected");
          }
          myComputerUnselectMethodD();
        }
      }
    });
    printersSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          myComputerUnselectMethodD();
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          myComputerPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          try {
            Thread.sleep(200);
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          printersOpen.setVisible(true);
          myComputerUnselectMethodD();
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          printersPopup.show(e.getComponent(), e.getX(), e.getY());
          if (printers.getParent() != null) {
            myComputerPanel.remove(printers);
            myComputerPanel.add(printersSelected);
            myComputerPanel.revalidate();
            myComputerPanel.repaint();
          }
          myComputerUnselectMethodD();
        }
      }
    });
  }

  // Unselect All Control Panel Objects except for Add New Hardware
  public void controlPanelUnselectMethodA() {
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Add/Remove Programs
  public void controlPanelUnselectMethodB() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Date/Time
  public void controlPanelUnselectMethodC() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Display
  public void controlPanelUnselectMethodD() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Fonts
  public void controlPanelUnselectMethodE() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Internet
  public void controlPanelUnselectMethodF() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Joystick
  public void controlPanelUnselectMethodG() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Keyboard
  public void controlPanelUnselectMethodH() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Modems
  public void controlPanelUnselectMethodI() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Mouse
  public void controlPanelUnselectMethodJ() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Multimedia
  public void controlPanelUnselectMethodK() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Network
  public void controlPanelUnselectMethodL() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Passwords
  public void controlPanelUnselectMethodM() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Control Panel Printers
  public void controlPanelUnselectMethodN() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Regional Settings
  public void controlPanelUnselectMethodO() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for Sounds
  public void controlPanelUnselectMethodP() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  // Unselect All Control Panel Objects except for System
  public void controlPanelUnselectMethodQ() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  @SuppressWarnings("unchecked")
  public void displayPropertiesMethod() {
    // Display Properties
    displayProperties = new JDialog();
    displayProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        displayPropertiesChangeConfiguration.dispose();
        displayPropertiesTabbedPane.setSelectedIndex(0);
        displayPropertiesButton[2].setEnabled(false);
      }
    });
    displayProperties.setAlwaysOnTop(true);
    displayProperties.setBounds(50, 0, 600, 700);
    displayProperties.setLayout(null);
    displayProperties.setResizable(false);
    displayProperties.setTitle("Display Properties");
    /// Display Properties Objects
    displayPropertiesButtonGroup = new ButtonGroup[2];
    for (int i = 0; i < 2; i++) {
      displayPropertiesButtonGroup[i] = new ButtonGroup();
    }
    displayPropertiesButton = new JButton[14];
    displayPropertiesButton[0] = new JButton("OK");
    displayPropertiesButton[1] = new JButton("Cancel");
    displayPropertiesButton[2] = new JButton("Apply");
    displayPropertiesButton[0].setBounds(190, 625, 120, 33);
    displayPropertiesButton[1].setBounds(320, 625, 120, 33);
    displayPropertiesButton[2].setBounds(450, 625, 120, 33);
    for (int i = 0; i < 3; i++) {
      displayProperties.add(displayPropertiesButton[i]);
    }
    displayPropertiesDialogButton = new JButton[20];
    displayPropertiesDialogButton[0] = new JButton("Done");
    displayPropertiesDialogButton[1] = new JButton("Add");
    displayPropertiesDialogButton[2] = new JButton("Change");
    displayPropertiesDialogButton[3] = new JButton("Remove");
    displayPropertiesDialogButton[4] = new JButton("OK");
    displayPropertiesDialogButton[5] = new JButton("Cancel");
    displayPropertiesDialogButton[6] = new JButton("OK");
    displayPropertiesDialogButton[7] = new JButton("Cancel");
    displayPropertiesDialogButton[8] = new JButton("OK");
    displayPropertiesDialogButton[9] = new JButton("Cancel");
    displayPropertiesDialogButton[10] = new JButton("OK");
    displayPropertiesDialogButton[11] = new JButton("Cancel");
    displayPropertiesCheckBox = new JCheckBox[5];
    displayPropertiesComboBox = new JComboBox[15];
    for (int i = 0; i < 15; i++) {
      displayPropertiesComboBox[i] = new JComboBox < String > ();
    }
    displayPropertiesText = new JLabel[20];
    displayPropertiesRadioButton = new JRadioButton[3];
    displayPropertiesSpinner = new JSpinner[5];
    displayPropertiesSpinnerModel = new SpinnerNumberModel[3];
    //// Background Tab Objects
    backgroundPanel = new JPanel();
    backgroundPanel.setLayout(null);
    displayPropertiesBackgroundMonitor = new JLabel[100];
    displayPropertiesBackgroundMonitor[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DisplayPropertiesComputerMonitor.png")));
    displayPropertiesBackgroundMonitor[0].setBounds(110, 10, 300, 265);
    backgroundPanel.add(displayPropertiesBackgroundMonitor[0]);
    displayPropertiesText[0] = new JLabel("Pattern");
    displayPropertiesText[0].setBounds(50, 270, 100, 30);
    String[] pattern = new String[20];
    pattern[0] = "(None)";
    pattern[1] = "Bricks";
    pattern[2] = "Buttons";
    pattern[3] = "Cargo Net";
    pattern[4] = "Circuits";
    pattern[5] = "Cobblestones";
    pattern[6] = "Colosseum";
    pattern[7] = "Daisies";
    pattern[8] = "Dizzy";
    pattern[9] = "Field Effect";
    pattern[10] = "Key";
    pattern[11] = "Live Wire";
    pattern[12] = "Plaid";
    pattern[13] = "Rounder";
    pattern[14] = "Scales";
    pattern[15] = "Stone";
    pattern[16] = "Thatches";
    pattern[17] = "Tile";
    pattern[18] = "Triangles";
    pattern[19] = "Waffle's Revenge";
    patternsList = new JList < Object > (pattern);
    patternsList.addListSelectionListener(new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent e) {
        displayPropertiesButton[2].setEnabled(true);
      }
    });
    patternsList.setFont(MSSansSerif16);
    patternsList.setVisibleRowCount(5);
    patternsScrollPane = new JScrollPane(patternsList);
    patternsScrollPane.setBounds(50, 300, 200, 110);
    backgroundPanel.add(patternsScrollPane);
    displayPropertiesText[1] = new JLabel("Wallpaper");
    displayPropertiesText[1].setBounds(300, 270, 100, 30);
    String[] wallpaper = new String[14];
    wallpaper[0] = "(None)";
    wallpaper[1] = "Black Thatch";
    wallpaper[2] = "Blue Rivets";
    wallpaper[3] = "Bubbles";
    wallpaper[4] = "Carved Stone";
    wallpaper[5] = "Circles";
    wallpaper[6] = "Houndstooth";
    wallpaper[7] = "Pinstripe";
    wallpaper[8] = "Setup";
    wallpaper[9] = "Straw Mat";
    wallpaper[10] = "Tiles";
    wallpaper[11] = "Triangles";
    wallpaper[12] = "Waves";
    wallpapersList = new JList < Object > (wallpaper);
    wallpapersList.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        displayPropertiesButton[2].setEnabled(true);
      }
    });
    wallpapersList.setFont(MSSansSerif16);
    wallpapersList.setVisibleRowCount(5);
    wallpapersScrollPane = new JScrollPane(wallpapersList);
    wallpapersScrollPane.setBounds(300, 300, 200, 110);
    backgroundPanel.add(wallpapersScrollPane);
    displayPropertiesButton[3] = new JButton("Edit Pattern...");
    displayPropertiesButton[4] = new JButton("Browse...");
    displayPropertiesButton[3].setBounds(135, 420, 125, 33);
    displayPropertiesButton[4].setBounds(370, 420, 125, 33);
    displayPropertiesButton[3].setEnabled(false);
    for (int i = 3; i < 5; i++) {
      backgroundPanel.add(displayPropertiesButton[i]);
    }
    displayPropertiesText[2] = new JLabel("Display:");
    displayPropertiesText[2].setBounds(270, 460, 75, 30);
    displayPropertiesRadioButton[0] = new JRadioButton("Tile");
    displayPropertiesRadioButton[1] = new JRadioButton("Center");
    displayPropertiesRadioButton[0].setBounds(345, 460, 60, 30);
    displayPropertiesRadioButton[1].setBounds(420, 460, 100, 30);
    displayPropertiesRadioButton[1].setSelected(true);
    for (int i = 0; i < 2; i++) {
      displayPropertiesRadioButton[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          displayPropertiesButton[2].setEnabled(true);
        }
      });
      displayPropertiesRadioButton[i].setFont(MSSansSerif16);
      displayPropertiesButtonGroup[0].add(displayPropertiesRadioButton[i]);
      backgroundPanel.add(displayPropertiesRadioButton[i]);
    }
    for (int i = 0; i < 3; i++) {
      backgroundPanel.add(displayPropertiesText[i]);
    }
    //// Screen Saver Tab Objects
    screenSaverPanel = new JPanel();
    screenSaverPanel.setLayout(null);
    displayPropertiesScreenSaverMonitor = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DisplayPropertiesComputerMonitor.png")));
    displayPropertiesScreenSaverMonitor.setBounds(110, 10, 300, 265);
    screenSaverPanel.add(displayPropertiesScreenSaverMonitor);
    displayPropertiesText[3] = new JLabel("Screen Saver");
    displayPropertiesText[3].setBounds(10, 270, 100, 30);
    displayPropertiesComboBox[0] = new JComboBox < String > ();
    displayPropertiesComboBox[0].addItem("(None)");
    displayPropertiesComboBox[0].addItem("Flying Windows");
    displayPropertiesComboBox[0].setBounds(10, 300, 250, 30);
    screenSaverPanel.add(displayPropertiesComboBox[0]);
    flyingWindowsURL = this.getClass().getClassLoader().getResource("FlyingWindows.gif");
    flyingWindowsLabel = new JLabel(new ImageIcon(flyingWindowsURL));
    displayPropertiesButton[5] = new JButton("Settings...");
    displayPropertiesButton[6] = new JButton("Preview");
    displayPropertiesButton[5].setBounds(270, 300, 100, 33);
    displayPropertiesButton[6].setBounds(385, 300, 100, 33);
    displayPropertiesCheckBox[0] = new JCheckBox("Password protected");
    displayPropertiesCheckBox[0].setBounds(20, 340, 150, 30);
    screenSaverPanel.add(displayPropertiesCheckBox[0]);
    displayPropertiesButton[7] = new JButton("Change...");
    displayPropertiesButton[7].setBounds(240, 340, 100, 33);
    for (int i = 5; i < 8; i++) {
      displayPropertiesButton[i].setEnabled(false);
      screenSaverPanel.add(displayPropertiesButton[i]);
    }
    displayPropertiesText[4] = new JLabel("Wait:");
    displayPropertiesText[4].setBounds(350, 340, 60, 30);
    displayPropertiesSpinnerModel[0] = new SpinnerNumberModel(1, 1, 60, 1);
    displayPropertiesSpinner[0] = new JSpinner(displayPropertiesSpinnerModel[0]);
    displayPropertiesSpinner[0].setBounds(400, 340, 50, 30);
    screenSaverPanel.add(displayPropertiesSpinner[0]);
    displayPropertiesText[5] = new JLabel("minutes");
    displayPropertiesText[5].setBounds(455, 340, 100, 30);
    for (int i = 3; i < 6; i++) {
      screenSaverPanel.add(displayPropertiesText[i]);
    }
    //// Appearance Tab Objects
    appearancePanel = new JPanel();
    appearancePanel.setLayout(null);
    displayPropertiesAppearanceImage = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DisplayPropertiesAppearanceImage.png")));
    displayPropertiesAppearanceImage.setBounds(10, 10, 504, 275);
    appearancePanel.add(displayPropertiesAppearanceImage);
    displayPropertiesText[6] = new JLabel("Scheme:");
    displayPropertiesText[6].setBounds(10, 305, 100, 30);
    for (int i = 1; i < 5; i++) {
      appearancePanel.add(displayPropertiesComboBox[i]);
    }
    for (int i = 3; i < 5; i++) {
      displayPropertiesComboBox[i].setEditable(true);
      displayPropertiesComboBox[i].setEnabled(false);
    }
    appearanceScheme = new String[27];
    appearanceScheme[0] = "Brick";
    appearanceScheme[1] = "Desert";
    appearanceScheme[2] = "Eggplant";
    appearanceScheme[3] = "High Contrast Black";
    appearanceScheme[4] = "High Contrast Black (extra large)";
    appearanceScheme[5] = "High Contrast Black (large)";
    appearanceScheme[6] = "High Contrast White";
    appearanceScheme[7] = "High Contrast White (extra large)";
    appearanceScheme[8] = "High Contrast White (large)";
    appearanceScheme[9] = "Lilac";
    appearanceScheme[10] = "Lilac (large)";
    appearanceScheme[11] = "Maple";
    appearanceScheme[12] = "Marine (high color)";
    appearanceScheme[13] = "Plum (high color)";
    appearanceScheme[14] = "Pumpkin (large)";
    appearanceScheme[15] = "Rainy Day";
    appearanceScheme[16] = "Red, White, and Blue (VGA)";
    appearanceScheme[17] = "Rose";
    appearanceScheme[18] = "Rose (large)";
    appearanceScheme[19] = "Slate";
    appearanceScheme[20] = "Spruce";
    appearanceScheme[21] = "Storm (VGA)";
    appearanceScheme[22] = "Teal (VGA)";
    appearanceScheme[23] = "Wheat";
    appearanceScheme[24] = "Windows Standard";
    appearanceScheme[25] = "Windows Standard (extra large)";
    appearanceScheme[26] = "Windows Standard (large)";
    for (int i = 0; i < 27; i++) {
      displayPropertiesComboBox[1].addItem(appearanceScheme[i]);
    }
    displayPropertiesComboBox[1].setBounds(10, 330, 300, 30);
    displayPropertiesComboBox[1].setSelectedIndex(24);
    displayPropertiesButton[8] = new JButton("Save As...");
    displayPropertiesButton[9] = new JButton("Delete");
    displayPropertiesButton[8].setBounds(315, 330, 100, 33);
    displayPropertiesButton[9].setBounds(430, 330, 100, 33);
    for (int i = 8; i < 10; i++) {
      appearancePanel.add(displayPropertiesButton[i]);
    }
    displayPropertiesText[7] = new JLabel("Item:");
    displayPropertiesText[7].setBounds(10, 355, 100, 30);
    appearanceItem = new String[18];
    appearanceItem[0] = "3D Objects";
    appearanceItem[1] = "Active Title Bar";
    appearanceItem[2] = "Active Window Border";
    appearanceItem[3] = "Appication Background";
    appearanceItem[4] = "Caption Buttons";
    appearanceItem[5] = "Desktop";
    appearanceItem[6] = "Icon";
    appearanceItem[7] = "Icon Spacing (Horizontal)";
    appearanceItem[8] = "Icon Spacing (Vertical)";
    appearanceItem[9] = "Inactive Title Bar";
    appearanceItem[10] = "Inactive Windows Border";
    appearanceItem[11] = "Menu";
    appearanceItem[12] = "Message Box";
    appearanceItem[13] = "Palette Title";
    appearanceItem[14] = "Scrollbar";
    appearanceItem[15] = "Selected Items";
    appearanceItem[16] = "ToolTip";
    appearanceItem[17] = "Window";
    for (int i = 0; i < 18; i++) {
      displayPropertiesComboBox[2].addItem(appearanceItem[i]);
    }
    displayPropertiesComboBox[2].setBounds(10, 380, 300, 30);
    displayPropertiesComboBox[2].setSelectedIndex(5);
    displayPropertiesText[8] = new JLabel("Size:");
    displayPropertiesText[8].setBounds(315, 355, 75, 30);
    displayPropertiesSpinner[1] = new JSpinner();
    displayPropertiesSpinner[1].setBounds(315, 380, 75, 30);
    appearancePanel.add(displayPropertiesSpinner[1]);
    displayPropertiesText[9] = new JLabel("Color:");
    displayPropertiesText[9].setBounds(400, 355, 75, 30);
    displayPropertiesText[10] = new JLabel("Font:");
    displayPropertiesText[10].setBounds(10, 405, 100, 30);
    appearanceFont = new String[9];
    appearanceFont[0] = "Arial";
    appearanceFont[1] = "Courier";
    appearanceFont[2] = "Courier New";
    appearanceFont[3] = "Fixedsys";
    appearanceFont[4] = "MS Sans Serif";
    appearanceFont[5] = "MS Serif";
    appearanceFont[6] = "Small Fonts";
    appearanceFont[7] = "System";
    appearanceFont[8] = "Times New Roman";
    for (int i = 0; i < 9; i++) {
      displayPropertiesComboBox[3].addItem(appearanceFont[i]);
    }
    displayPropertiesComboBox[3].setBounds(10, 430, 300, 30);
    displayPropertiesComboBox[3].setSelectedIndex(4);
    displayPropertiesText[11] = new JLabel("Size:");
    displayPropertiesText[11].setBounds(315, 405, 100, 30);
    appearanceSize = new String[6];
    appearanceSize[0] = "8";
    appearanceSize[1] = "10";
    appearanceSize[2] = "12";
    appearanceSize[3] = "14";
    appearanceSize[4] = "18";
    appearanceSize[5] = "24";
    for (int i = 0; i < 6; i++) {
      displayPropertiesComboBox[4].addItem(appearanceSize[i]);
    }
    displayPropertiesComboBox[4].setBounds(315, 430, 75, 30);
    displayPropertiesComboBox[4].setSelectedIndex(0);;
    displayPropertiesText[12] = new JLabel("Color:");
    displayPropertiesText[12].setBounds(400, 400, 100, 30);
    for (int i = 6; i < 13; i++) {
      appearancePanel.add(displayPropertiesText[i]);
    }
    //// S3 Refresh Objects
    S3_refreshPanel = new JPanel();
    S3_refreshPanel.setLayout(null);
    S3RefreshResolutionsLabel = new JLabel[2];
    for (int i = 0; i < 2; i++) {
      S3RefreshResolutionsLabel[i] = new JLabel(
        new ImageIcon(getClass().getClassLoader().getResource("S3RefreshResolutions.png")));
    }
    S3RefreshResolutionsLabel[0].setBounds(125, 110, 91, 177);
    S3_refreshPanel.add(S3RefreshResolutionsLabel[0]);
    for (int i = 5; i < 9; i++) {
      displayPropertiesComboBox[i].setEnabled(false);
      S3_refreshPanel.add(displayPropertiesComboBox[i]);
    }
    displayPropertiesComboBox[5].addItem("60 Hz");
    displayPropertiesComboBox[6].addItem("56 Hz");
    displayPropertiesComboBox[7].addItem("43 Hz Interlaced");
    displayPropertiesComboBox[8].addItem("43 Hz Interlaced");
    displayPropertiesComboBox[5].setBounds(230, 110, 150, 25);
    displayPropertiesComboBox[6].setBounds(230, 160, 150, 25);
    displayPropertiesComboBox[7].setBounds(230, 210, 150, 25);
    displayPropertiesComboBox[8].setBounds(230, 260, 150, 25);
    displayPropertiesButton[10] = new JButton("Change Configuration");
    displayPropertiesButton[10].setBounds(100, 400, 300, 100);
    S3_refreshPanel.add(displayPropertiesButton[10]);
    displayPropertiesChangeConfiguration = new JDialog();
    displayPropertiesChangeConfiguration.setAlwaysOnTop(true);
    displayPropertiesChangeConfiguration.setBounds(100, 50, 600, 600);
    displayPropertiesChangeConfiguration.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    displayPropertiesChangeConfiguration.setLayout(null);
    displayPropertiesChangeConfiguration.setTitle("Display Properties");
    for (int i = 9; i < 13; i++) {
      displayPropertiesChangeConfiguration.add(displayPropertiesComboBox[i]);
    }
    S3RefreshResolutionsLabel[1].setBounds(125, 110, 91, 177);
    displayPropertiesChangeConfiguration.add(S3RefreshResolutionsLabel[1]);
    configuration640x480 = new String[4];
    configuration640x480[0] = "60 Hz";
    configuration640x480[1] = "72 Hz";
    configuration640x480[2] = "75 Hz";
    configuration640x480[3] = "85 Hz";
    configuration800x600 = new String[5];
    configuration800x600[0] = "56 Hz";
    configuration800x600[1] = "60 Hz";
    configuration800x600[2] = "72 Hz";
    configuration800x600[3] = "75 Hz";
    configuration800x600[4] = "85 Hz";
    configuration1024x768 = new String[5];
    configuration1024x768[0] = "43 Hz Interlaced";
    configuration1024x768[1] = "60 Hz";
    configuration1024x768[2] = "70 Hz";
    configuration1024x768[3] = "75 Hz";
    configuration1024x768[4] = "85 Hz";
    configuration1280x1024 = new String[4];
    configuration1280x1024[0] = "43 Hz Interlaced";
    configuration1280x1024[1] = "60 Hz";
    configuration1280x1024[2] = "72 Hz";
    configuration1280x1024[3] = "75 Hz";
    for (int i = 0; i < 4; i++) {
      displayPropertiesComboBox[9].addItem(configuration640x480[i]);
      displayPropertiesComboBox[12].addItem(configuration1280x1024[i]);
    }
    for (int i = 0; i < 5; i++) {
      displayPropertiesComboBox[10].addItem(configuration800x600[i]);
      displayPropertiesComboBox[11].addItem(configuration1024x768[i]);
    }
    displayPropertiesComboBox[9].setBounds(230, 110, 150, 25);
    displayPropertiesComboBox[10].setBounds(230, 160, 150, 25);
    displayPropertiesComboBox[11].setBounds(230, 210, 150, 25);
    displayPropertiesComboBox[12].setBounds(230, 260, 150, 25);
    displayPropertiesDialogButton[12] = new JButton("OK");
    displayPropertiesDialogButton[13] = new JButton("Cancel");
    displayPropertiesDialogButton[12].setBounds(100, 400, 180, 90);
    displayPropertiesDialogButton[13].setBounds(310, 400, 180, 90);
    for (int i = 12; i < 14; i++) {
      displayPropertiesDialogButton[i].addActionListener(this);
      displayPropertiesChangeConfiguration.add(displayPropertiesDialogButton[i]);
    }
    //// Settings Tab Objects
    settingsPanel = new JPanel();
    settingsPanel.setLayout(null);
    displayPropertiesSettingsMonitor = new JLabel[6];
    displayPropertiesSettingsMonitor[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DisplayPropertiesSettingsMonitor1.png")));
    displayPropertiesSettingsMonitor[0].setBounds(110, 10, 300, 265);
    settingsPanel.add(displayPropertiesSettingsMonitor[0]);
    displayPropertiesText[13] = new JLabel("Color palette");
    displayPropertiesText[13].setBounds(10, 300, 150, 30);
    displayPropertiesColorPalette = new String[5];
    displayPropertiesColorPalette[0] = "16 Color";
    displayPropertiesColorPalette[1] = "256 Color";
    displayPropertiesColorPalette[2] = "High Color (16 bit)";
    displayPropertiesColorPalette[3] = "True Color (24 bit)";
    displayPropertiesColorPalette[4] = "True Color (32 bit)";
    for (int i = 0; i < 5; i++) {
      displayPropertiesComboBox[13].addItem(displayPropertiesColorPalette[i]);
    }
    displayPropertiesComboBox[13].setBounds(10, 330, 230, 30);
    displayPropertiesComboBox[13].setSelectedIndex(1);
    displayPropertiesText[14] = new JLabel("Desktop area");
    displayPropertiesText[14].setBounds(300, 300, 150, 30);
    displayPropertiesText[15] = new JLabel("Less");
    displayPropertiesText[15].setBounds(260, 330, 50, 30);
    displayPropertiesDesktopArea = new JSlider();
    displayPropertiesDesktopArea.setBounds(310, 330, 75, 25);
    displayPropertiesDesktopArea.setValue(0);
    settingsPanel.add(displayPropertiesDesktopArea);
    displayPropertiesText[16] = new JLabel("More");
    displayPropertiesText[16].setBounds(400, 330, 50, 30);
    displayPropertiesColorPaletteBar = new JLabel[5];
    displayPropertiesColorPaletteBar[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DisplayPropertiesColorPaletteBar16Color.png")));
    displayPropertiesColorPaletteBar[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DisplayPropertiesColorPaletteBar256Color.png")));
    for (int i = 0; i < 2; i++) {
      displayPropertiesColorPaletteBar[i].setBounds(10, 365, 237, 25);
    }
    settingsPanel.add(displayPropertiesColorPaletteBar[1]);
    displayPropertiesText[17] = new JLabel("640 by 480 pixels");
    displayPropertiesText[17].setBounds(310, 360, 200, 30);
    displayPropertiesText[18] = new JLabel("Font size");
    displayPropertiesText[18].setBounds(20, 385, 100, 30);
    for (int i = 13; i < 19; i++) {
      settingsPanel.add(displayPropertiesText[i]);
    }
    displayPropertiesComboBox[14].addItem("Large Fonts");
    displayPropertiesComboBox[14].addItem("Small Fonts");
    displayPropertiesComboBox[14].setBounds(20, 410, 300, 30);
    displayPropertiesComboBox[14].setSelectedIndex(1);
    for (int i = 13; i < 15; i++) {
      settingsPanel.add(displayPropertiesComboBox[i]);
    }
    displayPropertiesButton[11] = new JButton("Custom...");
    displayPropertiesButton[12] = new JButton("Change Display Type...");
    displayPropertiesButton[11].setEnabled(false);
    displayPropertiesButton[11].setBounds(400, 410, 100, 33);
    displayPropertiesButton[12].setBounds(300, 470, 200, 33);
    for (int i = 11; i < 13; i++) {
      settingsPanel.add(displayPropertiesButton[i]);
    }
    displayPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      displayPropertiesButton[i].setFont(MSSansSerif16);
    }
    for (int i = 3; i < 13; i++) {
      displayPropertiesButton[i].setFont(MSSansSerif15);
    }
    for (int i = 0; i < 13; i++) {
      displayPropertiesButton[i].addActionListener(this);
    }
    for (int i = 0; i < 1; i++) {
      displayPropertiesCheckBox[i].addActionListener(this);
      displayPropertiesCheckBox[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 15; i++) {
      displayPropertiesComboBox[i].addActionListener(this);
      displayPropertiesComboBox[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          displayPropertiesButton[2].setEnabled(true);
        }
      });
      displayPropertiesComboBox[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 2; i++) {
      displayPropertiesSpinner[i].addChangeListener(new ChangeListener() {
        public void stateChanged(ChangeEvent e) {
          displayPropertiesButton[2].setEnabled(true);
        }
      });
      displayPropertiesSpinner[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 19; i++) {
      displayPropertiesText[i].setFont(MSSansSerif16);
    }
    // Setting up Desktop Properties
    displayPropertiesTabbedPane = new JTabbedPane(JTabbedPane.TOP);
    displayPropertiesTabbedPane.addTab("Background", backgroundPanel);
    displayPropertiesTabbedPane.addTab("Screen Saver", screenSaverPanel);
    displayPropertiesTabbedPane.addTab("Appearance", appearancePanel);
    displayPropertiesTabbedPane.addTab("S3 Refresh", S3_refreshPanel);
    displayPropertiesTabbedPane.addTab("Settings", settingsPanel);
    displayPropertiesTabbedPane.setFont(MSSansSerif16);
    displayPropertiesPanel = new JPanel();
    displayPropertiesPanel.add(displayPropertiesTabbedPane);
    displayPropertiesPanel.setBorder(BorderFactory.createRaisedBevelBorder());
    displayPropertiesPanel.setBounds(10, 15, 550, 600);
    displayPropertiesPanel.setLayout(new GridLayout());
    displayProperties.add(displayPropertiesPanel);
  }

  public void startMenuPopupMethod() {
    // Setting up "Open" in Start Menu Pop Menu
    startMenuPopupOpen = new JFrame();
    startMenuPopupOpen.getContentPane().setBackground(white);
    startMenuPopupOpen.setSize(400, 400);
    startMenuPopupOpen.setTitle("Start Menu");
    // Setting up "Explore" in Start Menu Pop Menu
    exploringStartMenu = new JFrame();
    exploringStartMenu.getContentPane().setBackground(white);
    exploringStartMenu.setSize(400, 400);
    exploringStartMenu.setTitle("Exploring - Start Menu");
    exploringStartMenuAllFoldersNode = new DefaultMutableTreeNode[50];
    exploringStartMenuAllFoldersNode[0] = new DefaultMutableTreeNode("Desktop");
    exploringStartMenuAllFoldersNode[1] = new DefaultMutableTreeNode("My Computer");
    exploringStartMenuAllFoldersNode[2] = new DefaultMutableTreeNode("Recycle Bin");
    for (int i = 1; i < 3; i++) {
      exploringStartMenuAllFoldersNode[0].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[3] = new DefaultMutableTreeNode("Removable Disk (A:)");
    exploringStartMenuAllFoldersNode[4] = new DefaultMutableTreeNode("Playdosgame (C:)");
    exploringStartMenuAllFoldersNode[5] = new DefaultMutableTreeNode("Control Panel");
    exploringStartMenuAllFoldersNode[6] = new DefaultMutableTreeNode("Printers");
    for (int i = 3; i < 7; i++) {
      exploringStartMenuAllFoldersNode[1].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[7] = new DefaultMutableTreeNode("Program Files");
    exploringStartMenuAllFoldersNode[8] = new DefaultMutableTreeNode("Windows");
    for (int i = 7; i < 9; i++) {
      exploringStartMenuAllFoldersNode[4].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[9] = new DefaultMutableTreeNode("Accessories");
    exploringStartMenuAllFoldersNode[10] = new DefaultMutableTreeNode("Microsoft Exchange");
    exploringStartMenuAllFoldersNode[11] = new DefaultMutableTreeNode("Plus!");
    exploringStartMenuAllFoldersNode[12] = new DefaultMutableTreeNode("The Microsoft Network");
    for (int i = 9; i < 13; i++) {
      exploringStartMenuAllFoldersNode[7].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[13] = new DefaultMutableTreeNode("Command");
    exploringStartMenuAllFoldersNode[14] = new DefaultMutableTreeNode("Config");
    exploringStartMenuAllFoldersNode[15] = new DefaultMutableTreeNode("Cursors");
    exploringStartMenuAllFoldersNode[16] = new DefaultMutableTreeNode("Fonts");
    exploringStartMenuAllFoldersNode[17] = new DefaultMutableTreeNode("Help");
    exploringStartMenuAllFoldersNode[18] = new DefaultMutableTreeNode("Inf");
    exploringStartMenuAllFoldersNode[19] = new DefaultMutableTreeNode("Media");
    exploringStartMenuAllFoldersNode[20] = new DefaultMutableTreeNode("Pif");
    exploringStartMenuAllFoldersNode[21] = new DefaultMutableTreeNode("Recent");
    exploringStartMenuAllFoldersNode[22] = new DefaultMutableTreeNode("SendTo");
    exploringStartMenuAllFoldersNode[23] = new DefaultMutableTreeNode("ShellNew");
    exploringStartMenuAllFoldersNode[24] = new DefaultMutableTreeNode("Spool");
    exploringStartMenuAllFoldersNode[25] = new DefaultMutableTreeNode("Start Menu");
    exploringStartMenuAllFoldersNode[26] = new DefaultMutableTreeNode("Sysbckup");
    exploringStartMenuAllFoldersNode[27] = new DefaultMutableTreeNode("System");
    exploringStartMenuAllFoldersNode[28] = new DefaultMutableTreeNode("Temp");
    for (int i = 13; i < 29; i++) {
      exploringStartMenuAllFoldersNode[8].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[29] = new DefaultMutableTreeNode("Microsoft Internet");
    exploringStartMenuAllFoldersNode[11].add(exploringStartMenuAllFoldersNode[29]);
    exploringStartMenuAllFoldersNode[30] = new DefaultMutableTreeNode("Printers");
    exploringStartMenuAllFoldersNode[24].add(exploringStartMenuAllFoldersNode[30]);
    exploringStartMenuAllFoldersNode[31] = new DefaultMutableTreeNode("Programs");
    exploringStartMenuAllFoldersNode[25].add(exploringStartMenuAllFoldersNode[31]);
    exploringStartMenuAllFoldersNode[32] = new DefaultMutableTreeNode("Color");
    exploringStartMenuAllFoldersNode[33] = new DefaultMutableTreeNode("losubsys");
    exploringStartMenuAllFoldersNode[34] = new DefaultMutableTreeNode("Vmm32");
    for (int i = 32; i < 35; i++) {
      exploringStartMenuAllFoldersNode[27].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[35] = new DefaultMutableTreeNode("Accessories");
    exploringStartMenuAllFoldersNode[36] = new DefaultMutableTreeNode("StartUp");
    for (int i = 35; i < 37; i++) {
      exploringStartMenuAllFoldersNode[31].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuAllFoldersNode[37] = new DefaultMutableTreeNode("Games");
    exploringStartMenuAllFoldersNode[38] = new DefaultMutableTreeNode("Internet Tools");
    exploringStartMenuAllFoldersNode[39] = new DefaultMutableTreeNode("Multimedia");
    exploringStartMenuAllFoldersNode[40] = new DefaultMutableTreeNode("System Tools");
    for (int i = 37; i < 41; i++) {
      exploringStartMenuAllFoldersNode[35].add(exploringStartMenuAllFoldersNode[i]);
    }
    exploringStartMenuTree = new JTree[2];
    exploringStartMenuTree[0] = new JTree(exploringStartMenuAllFoldersNode[0]);
    exploringStartMenuTree[1] = new JTree(exploringStartMenuContentsNode);
    exploringStartMenuSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
    exploringStartMenuSplitPane.setDividerLocation(300);
    exploringStartMenuSplitPane.setLeftComponent(exploringStartMenuTree[0]);
    exploringStartMenuSplitPane.setRightComponent(exploringStartMenuTree[1]);
    exploringStartMenu.add(exploringStartMenuSplitPane);
    // Setting up "Find" in Start Menu Pop Menu
    startMenuPopupFind = new JFrame();
    startMenuPopupFind.getContentPane().setBackground(white);
    startMenuPopupFind.setSize(400, 400);
    startMenuPopupFind.setTitle("Find: All Files");
  }

  public void taskManagerMethod() {
    // Setting up Task Manager
    taskManager = new JFrame();
    taskManager.setSize(400, 400);
  }

  public void taskbarPropertiesMethod() {
    // Setting up Taskbar Properties
    taskbarProperties = new JDialog();
    taskbarProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        taskbarPropertiesTabbedPane.setSelectedIndex(0);
        for (int i = 0; i < 16; i++) {
          if (i == 7) {
            continue;
          }
          taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
          taskbarOptionsPanel.add(taskbarPropertiesImage[7]);
          taskbarOptionsPanel.revalidate();
          taskbarOptionsPanel.repaint();
        }
        taskbarOption[0].setSelected(true);
        taskbarOption[1].setSelected(false);
        taskbarOption[2].setSelected(false);
        taskbarOption[3].setSelected(true);
        taskbarPropertiesButton[2].setEnabled(false);
        taskbarPropertiesCreateShortcut.dispose();
        taskbarPropertiesRemoveShortcutsFolders.dispose();
      }
    });
    taskbarProperties.setAlwaysOnTop(true);
    taskbarProperties.setBounds(0, 0, 510, 600);
    taskbarProperties.setLayout(null);
    taskbarProperties.setResizable(false);
    taskbarProperties.setTitle("Taskbar Properties");
    taskbarOptionsPanel = new JPanel();
    taskbarOptionsPanel.setLayout(null);
    taskbarOptionsPanel.setSize(400, 400);
    startMenuProgramsPanel = new JPanel();
    startMenuProgramsPanel.setLayout(null);
    startMenuProgramsPanel.setSize(400, 400);
    taskbarPropertiesTabbedPane = new JTabbedPane(JTabbedPane.TOP);
    taskbarPropertiesTabbedPane.addTab("Taskbar Options", taskbarOptionsPanel);
    taskbarPropertiesTabbedPane.addTab("Start Menu Programs", startMenuProgramsPanel);
    taskbarPropertiesTabbedPane.setFont(MSSansSerif16);
    taskbarPropertiesPanel = new JPanel();
    taskbarPropertiesPanel.add(taskbarPropertiesTabbedPane);
    taskbarPropertiesPanel.setBorder(BorderFactory.createRaisedBevelBorder());
    taskbarPropertiesPanel.setBounds(10, 15, 475, 500);
    taskbarPropertiesPanel.setLayout(new GridLayout());
    taskbarProperties.add(taskbarPropertiesPanel);
    taskbarPropertiesButton = new JButton[10];
    taskbarPropertiesButton[0] = new JButton("OK");
    taskbarPropertiesButton[1] = new JButton("Cancel");
    taskbarPropertiesButton[2] = new JButton("Apply");
    taskbarPropertiesButton[0].setBounds(145, 525, 100, 33);
    taskbarPropertiesButton[1].setBounds(260, 525, 100, 33);
    taskbarPropertiesButton[2].setBounds(375, 525, 100, 33);
    taskbarPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      taskbarProperties.add(taskbarPropertiesButton[i]);
    }
    /// Taskbar Properties Images
    taskbarPropertiesImage = new JLabel[20];
    taskbarPropertiesImage[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage[null].png")));
    taskbarPropertiesImage[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage1[0].png")));
    taskbarPropertiesImage[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage1[1].png")));
    taskbarPropertiesImage[3] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage1[2].png")));
    taskbarPropertiesImage[4] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage1[3].png")));
    taskbarPropertiesImage[5] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage2[0][1].png")));
    taskbarPropertiesImage[6] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage2[0][2].png")));
    taskbarPropertiesImage[7] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage2[0][3].png")));
    taskbarPropertiesImage[8] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage2[1][2].png")));
    taskbarPropertiesImage[9] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage2[1][3].png")));
    taskbarPropertiesImage[10] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage2[2][3].png")));
    taskbarPropertiesImage[11] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage3[0][1][2].png")));
    taskbarPropertiesImage[12] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage3[0][1][3].png")));
    taskbarPropertiesImage[13] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage3[0][2][3].png")));
    taskbarPropertiesImage[14] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage3[1][2][3].png")));
    taskbarPropertiesImage[15] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesImage4[0][1][2][3].png")));
    for (int i = 0; i < 16; i++) {
      taskbarPropertiesImage[i].setBounds(30, 30, 414, 199);
    }
    taskbarOptionsPanel.add(taskbarPropertiesImage[7]);
    /// Taskbar Options Tab Objects
    taskbarOption = new JCheckBox[4];
    taskbarOption[0] = new JCheckBox("Always on top");
    taskbarOption[1] = new JCheckBox("Auto hide");
    taskbarOption[2] = new JCheckBox("Show small icons in Start Menu");
    taskbarOption[3] = new JCheckBox("Show Clock");
    taskbarOption[0].setBounds(30, 250, 200, 30);
    taskbarOption[1].setBounds(30, 300, 200, 30);
    taskbarOption[2].setBounds(30, 350, 300, 30);
    taskbarOption[3].setBounds(30, 400, 200, 30);
    taskbarOption[0].setSelected(true);
    taskbarOption[3].setSelected(true);
    for (int i = 0; i < 4; i++) {
      taskbarOption[i].addActionListener(this);
      taskbarOption[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          taskbarPropertiesButton[2].setEnabled(true);
        }
      });
      taskbarOption[i].setFont(MSSansSerif15);
      taskbarOption[i].setSize(300, 20);
      taskbarOptionsPanel.add(taskbarOption[i]);
    }
    taskbarPropertiesImage[16] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesCustomizeStartMenuImage.png")));
    taskbarPropertiesImage[16].setBounds(30, 20, 426, 146);
    taskbarPropertiesButton[3] = new JButton("Add...");
    taskbarPropertiesButton[4] = new JButton("Remove...");
    taskbarPropertiesButton[5] = new JButton("Advanced...");
    taskbarPropertiesButton[3].setBounds(50, 200, 120, 33);
    taskbarPropertiesButton[4].setBounds(180, 200, 120, 33);
    taskbarPropertiesButton[5].setBounds(310, 200, 120, 33);
    taskbarPropertiesImage[17] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesDocumentsMenuImage.png")));
    taskbarPropertiesImage[17].setBounds(30, 240, 430, 99);
    for (int i = 16; i < 18; i++) {
      startMenuProgramsPanel.add(taskbarPropertiesImage[i]);
    }
    taskbarPropertiesButton[6] = new JButton("Clear");
    taskbarPropertiesButton[6].setBounds(310, 350, 120, 33);
    for (int i = 3; i < 7; i++) {
      startMenuProgramsPanel.add(taskbarPropertiesButton[i]);
    }
    for (int i = 0; i < 7; i++) {
      taskbarPropertiesButton[i].addActionListener(this);
      taskbarPropertiesButton[i].setFont(MSSansSerif16);
    }
    taskbarPropertiesDialogButton = new JButton[6];
    // Create Shortcut
    taskbarPropertiesCreateShortcut = new JDialog();
    taskbarPropertiesCreateShortcut.setAlwaysOnTop(true);
    taskbarPropertiesCreateShortcut.setBounds(50, 0, 610, 455);
    taskbarPropertiesCreateShortcut.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    taskbarPropertiesCreateShortcut.setLayout(null);
    taskbarPropertiesCreateShortcut.setTitle("Create Shortcut");
    taskbarPropertiesImage[18] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesCreateShortcutImage.png")));
    taskbarPropertiesImage[19] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TaskbarPropertiesCreateShortcutText.png")));
    taskbarPropertiesImage[18].setBounds(10, 10, 169, 320);
    taskbarPropertiesImage[19].setBounds(200, 10, 401, 89);
    for (int i = 18; i < 20; i++) {
      taskbarPropertiesCreateShortcut.add(taskbarPropertiesImage[i]);
    }
    taskbarPropertiesCreateShortcutTextField = new JTextField();
    taskbarPropertiesCreateShortcutTextField.getDocument().addDocumentListener(new DocumentListener() {
      @Override
      public void insertUpdate(DocumentEvent e) {
        /// Adding Functionality to JTextField in Create Shortcut in Taskbar Properties
        if (taskbarPropertiesCreateShortcutTextField.getText().trim().length() != 0) {
          taskbarPropertiesDialogButton[2].setEnabled(true);
        }
        if (taskbarPropertiesCreateShortcutTextField.getText().trim().length() == 0) {
          taskbarPropertiesDialogButton[2].setEnabled(false);
        }
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
        /// Adding Functionality to JTextField in Create Shortcut in Taskbar Properties
        if (taskbarPropertiesCreateShortcutTextField.getText().trim().length() != 0) {
          taskbarPropertiesDialogButton[2].setEnabled(true);
        }
        if (taskbarPropertiesCreateShortcutTextField.getText().trim().length() == 0) {
          taskbarPropertiesDialogButton[2].setEnabled(false);
        }
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
        /// Adding Functionality to JTextField in Create Shortcut in Taskbar Properties
        if (taskbarPropertiesCreateShortcutTextField.getText().trim().length() != 0) {
          taskbarPropertiesDialogButton[2].setEnabled(true);
        }
        if (taskbarPropertiesCreateShortcutTextField.getText().trim().length() == 0) {
          taskbarPropertiesDialogButton[2].setEnabled(false);
        }
      }
    });
    taskbarPropertiesCreateShortcutTextField.setBounds(200, 100, 390, 30);
    taskbarPropertiesCreateShortcut.add(taskbarPropertiesCreateShortcutTextField);
    taskbarPropertiesDialogButton[0] = new JButton("Browse...");
    taskbarPropertiesDialogButton[1] = new JButton("Back >");
    taskbarPropertiesDialogButton[2] = new JButton("Next >");
    taskbarPropertiesDialogButton[3] = new JButton("Cancel");
    taskbarPropertiesDialogButton[0].setBounds(200, 135, 100, 33);
    taskbarPropertiesDialogButton[1].setBounds(270, 370, 100, 33);
    taskbarPropertiesDialogButton[2].setBounds(370, 370, 100, 33);
    taskbarPropertiesDialogButton[3].setBounds(480, 370, 100, 33);
    for (int i = 1; i < 3; i++) {
      taskbarPropertiesDialogButton[i].setEnabled(false);
    }
    for (int i = 0; i < 4; i++) {
      taskbarPropertiesCreateShortcut.add(taskbarPropertiesDialogButton[i]);
    }
    // Remove Shortcuts/Folders
    taskbarPropertiesRemoveShortcutsFolders = new JDialog();
    taskbarPropertiesRemoveShortcutsFolders.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        for (int i = 2; i < 4; i++) {
          taskbarPropertiesRemoveShortcutsFoldersPath = new TreePath(
            taskbarPropertiesRemoveShortcutsFoldersNode[i].getPath());
        }
        taskbarPropertiesRemoveShortcutsFoldersTree.collapsePath(taskbarPropertiesRemoveShortcutsFoldersPath);
      }
    });
    taskbarPropertiesRemoveShortcutsFolders.setAlwaysOnTop(true);
    taskbarPropertiesRemoveShortcutsFolders.setBounds(50, 0, 490, 490);
    taskbarPropertiesRemoveShortcutsFolders.setLayout(null);
    taskbarPropertiesRemoveShortcutsFolders.setResizable(false);
    taskbarPropertiesRemoveShortcutsFolders.setTitle("Remove Shortcuts/Folders");
    taskbarPropertiesRemoveShortcutsFoldersText = new JLabel(
      "<html>To remove an item from the Start menu, select the item and <br/>" + "click Remove.");
    taskbarPropertiesRemoveShortcutsFoldersText.setBounds(10, 10, 400, 50);
    taskbarPropertiesRemoveShortcutsFoldersText.setFont(MSSansSerif16);
    taskbarPropertiesRemoveShortcutsFolders.add(taskbarPropertiesRemoveShortcutsFoldersText);
    taskbarPropertiesRemoveShortcutsFoldersNode = new DefaultMutableTreeNode[30];
    taskbarPropertiesRemoveShortcutsFoldersNode[0] = new DefaultMutableTreeNode("Start Menu");
    taskbarPropertiesRemoveShortcutsFoldersNode[1] = new DefaultMutableTreeNode("Programs");
    taskbarPropertiesRemoveShortcutsFoldersNode[0].add(taskbarPropertiesRemoveShortcutsFoldersNode[1]);
    taskbarPropertiesRemoveShortcutsFoldersNode[2] = new DefaultMutableTreeNode("Accessories");
    taskbarPropertiesRemoveShortcutsFoldersNode[3] = new DefaultMutableTreeNode("StartUp");
    taskbarPropertiesRemoveShortcutsFoldersNode[4] = new DefaultMutableTreeNode("MS-DOS Prompt");
    taskbarPropertiesRemoveShortcutsFoldersNode[5] = new DefaultMutableTreeNode("Windows Explorer");
    for (int i = 2; i < 5; i++) {
      taskbarPropertiesRemoveShortcutsFoldersNode[1].add(taskbarPropertiesRemoveShortcutsFoldersNode[i]);
    }
    taskbarPropertiesRemoveShortcutsFoldersNode[6] = new DefaultMutableTreeNode("Games");
    taskbarPropertiesRemoveShortcutsFoldersNode[7] = new DefaultMutableTreeNode("Internet Tools");
    taskbarPropertiesRemoveShortcutsFoldersNode[8] = new DefaultMutableTreeNode("Multimedia");
    taskbarPropertiesRemoveShortcutsFoldersNode[9] = new DefaultMutableTreeNode("System Tools");
    taskbarPropertiesRemoveShortcutsFoldersNode[10] = new DefaultMutableTreeNode("Calculator");
    taskbarPropertiesRemoveShortcutsFoldersNode[11] = new DefaultMutableTreeNode("Notepad");
    taskbarPropertiesRemoveShortcutsFoldersNode[12] = new DefaultMutableTreeNode("Online Registration");
    taskbarPropertiesRemoveShortcutsFoldersNode[13] = new DefaultMutableTreeNode("Paint");
    taskbarPropertiesRemoveShortcutsFoldersNode[14] = new DefaultMutableTreeNode("WordPad");
    for (int i = 6; i < 15; i++) {
      taskbarPropertiesRemoveShortcutsFoldersNode[2].add(taskbarPropertiesRemoveShortcutsFoldersNode[i]);
    }
    taskbarPropertiesRemoveShortcutsFoldersNode[15] = new DefaultMutableTreeNode("FreeCell");
    taskbarPropertiesRemoveShortcutsFoldersNode[16] = new DefaultMutableTreeNode("Hearts");
    taskbarPropertiesRemoveShortcutsFoldersNode[17] = new DefaultMutableTreeNode("Minesweeper");
    taskbarPropertiesRemoveShortcutsFoldersNode[18] = new DefaultMutableTreeNode("Solitaire");
    for (int i = 15; i < 19; i++) {
      taskbarPropertiesRemoveShortcutsFoldersNode[6].add(taskbarPropertiesRemoveShortcutsFoldersNode[i]);
    }
    taskbarPropertiesRemoveShortcutsFoldersNode[19] = new DefaultMutableTreeNode("Internet Explorer");
    taskbarPropertiesRemoveShortcutsFoldersNode[20] = new DefaultMutableTreeNode("Internet Setup Wizard");
    for (int i = 19; i < 21; i++) {
      taskbarPropertiesRemoveShortcutsFoldersNode[7].add(taskbarPropertiesRemoveShortcutsFoldersNode[i]);
    }
    taskbarPropertiesRemoveShortcutsFoldersNode[21] = new DefaultMutableTreeNode("Media Player");
    taskbarPropertiesRemoveShortcutsFoldersNode[22] = new DefaultMutableTreeNode("Sound Recorder");
    taskbarPropertiesRemoveShortcutsFoldersNode[23] = new DefaultMutableTreeNode("Volume Control");
    for (int i = 21; i < 24; i++) {
      taskbarPropertiesRemoveShortcutsFoldersNode[8].add(taskbarPropertiesRemoveShortcutsFoldersNode[i]);
    }
    taskbarPropertiesRemoveShortcutsFoldersNode[24] = new DefaultMutableTreeNode("ScanDisk");
    taskbarPropertiesRemoveShortcutsFoldersNode[9].add(taskbarPropertiesRemoveShortcutsFoldersNode[24]);
    taskbarPropertiesRemoveShortcutsFoldersTree = new JTree(taskbarPropertiesRemoveShortcutsFoldersNode[0]);
    taskbarPropertiesRemoveShortcutsFoldersScrollPane = new JScrollPane(
      taskbarPropertiesRemoveShortcutsFoldersTree);
    taskbarPropertiesRemoveShortcutsFoldersScrollPane
      .setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    taskbarPropertiesRemoveShortcutsFoldersScrollPane
      .setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    taskbarPropertiesRemoveShortcutsFoldersPanel = new JPanel();
    taskbarPropertiesRemoveShortcutsFoldersPanel.setBounds(50, 0, 350, 350);
    taskbarPropertiesRemoveShortcutsFoldersPanel.add(taskbarPropertiesRemoveShortcutsFoldersScrollPane);
    taskbarPropertiesRemoveShortcutsFolders.add(taskbarPropertiesRemoveShortcutsFoldersPanel);
    taskbarPropertiesDialogButton[4] = new JButton("Remove");
    taskbarPropertiesDialogButton[5] = new JButton("Close");
    taskbarPropertiesDialogButton[4].setBounds(230, 410, 100, 33);
    taskbarPropertiesDialogButton[5].setBounds(340, 410, 100, 33);
    taskbarPropertiesDialogButton[4].setEnabled(false);
    for (int i = 4; i < 6; i++) {
      taskbarPropertiesRemoveShortcutsFolders.add(taskbarPropertiesDialogButton[i]);
    }
    for (int i = 0; i < 6; i++) {
      taskbarPropertiesDialogButton[i].addActionListener(this);
      taskbarPropertiesDialogButton[i].setFont(MSSansSerif16);
    }
    /// Taskbar Properties -> Advanced -> Exploring - Start Menu
    taskbarPropertiesAdvanced = new JFrame();
    taskbarPropertiesAdvanced.setAlwaysOnTop(true);
    taskbarPropertiesAdvanced.setBounds(100, 50, 690, 520);
    taskbarPropertiesAdvanced.setTitle("Exploring - Start Menu");
    taskbarPropertiesAdvancedMenu = new JMenu[8];
    taskbarPropertiesAdvancedMenu[0] = new JMenu("File");
    taskbarPropertiesAdvancedMenu[1] = new JMenu("Edit");
    taskbarPropertiesAdvancedMenu[2] = new JMenu("View");
    taskbarPropertiesAdvancedMenu[3] = new JMenu("Tools");
    taskbarPropertiesAdvancedMenu[4] = new JMenu("Help");
    taskbarPropertiesAdvancedMenuBar = new JMenuBar();
    for (int i = 0; i < 5; i++) {
      taskbarPropertiesAdvancedMenu[i].addMenuListener(new MenuListener() {
        @Override
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == taskbarPropertiesAdvancedMenu[0]) {
            taskbarPropertiesAdvancedText[1]
              .setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == taskbarPropertiesAdvancedMenu[1]) {
            taskbarPropertiesAdvancedText[1]
              .setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == taskbarPropertiesAdvancedMenu[2]) {
            taskbarPropertiesAdvancedText[1].setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == taskbarPropertiesAdvancedMenu[3]) {
            taskbarPropertiesAdvancedText[1].setText("Contains extra commands for files and folders");
          }
          if (e.getSource() == taskbarPropertiesAdvancedMenu[4]) {
            taskbarPropertiesAdvancedText[1].setText("Contains commands for displaying Help.");
          }
        }

        @Override
        public void menuDeselected(MenuEvent e) {

        }

        @Override
        public void menuCanceled(MenuEvent e) {

        }
      });
      taskbarPropertiesAdvancedMenuBar.add(taskbarPropertiesAdvancedMenu[i]);
    }
    taskbarPropertiesAdvancedMenu[5] = new JMenu("New");
    taskbarPropertiesAdvancedMenu[0].add(taskbarPropertiesAdvancedMenu[5]);
    taskbarPropertiesAdvancedMenuItem = new JMenuItem[40];
    taskbarPropertiesAdvancedMenuItem[0] = new JMenuItem("Folder");
    taskbarPropertiesAdvancedMenuItem[1] = new JMenuItem("Shortcut");
    for (int i = 0; i < 2; i++) {
      taskbarPropertiesAdvancedMenu[5].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedSeparator = new JSeparator[10];
    for (int i = 0; i < 10; i++) {
      taskbarPropertiesAdvancedSeparator[i] = new JSeparator();
    }
    taskbarPropertiesAdvancedMenu[5].add(taskbarPropertiesAdvancedSeparator[0]);
    taskbarPropertiesAdvancedMenuItem[2] = new JMenuItem("Wave Sound");
    taskbarPropertiesAdvancedMenuItem[3] = new JMenuItem("Text Document");
    taskbarPropertiesAdvancedMenuItem[4] = new JMenuItem("WordPad Document");
    taskbarPropertiesAdvancedMenuItem[5] = new JMenuItem("Bitmap Image");
    for (int i = 2; i < 6; i++) {
      taskbarPropertiesAdvancedMenu[5].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[0].add(taskbarPropertiesAdvancedSeparator[1]);
    taskbarPropertiesAdvancedMenuItem[6] = new JMenuItem("Create Shortcut");
    taskbarPropertiesAdvancedMenuItem[7] = new JMenuItem("Delete");
    taskbarPropertiesAdvancedMenuItem[8] = new JMenuItem("Rename");
    taskbarPropertiesAdvancedMenuItem[9] = new JMenuItem("Properties");
    for (int i = 6; i < 10; i++) {
      taskbarPropertiesAdvancedMenuItem[i].setEnabled(false);
      taskbarPropertiesAdvancedMenu[0].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[0].add(taskbarPropertiesAdvancedSeparator[2]);
    taskbarPropertiesAdvancedMenuItem[10] = new JMenuItem("Close");
    taskbarPropertiesAdvancedMenu[0].add(taskbarPropertiesAdvancedMenuItem[10]);
    taskbarPropertiesAdvancedMenuItem[11] = new JMenuItem("Undo");
    taskbarPropertiesAdvancedMenuItem[11].setAccelerator(ctrlZ);
    taskbarPropertiesAdvancedMenu[1].add(taskbarPropertiesAdvancedMenuItem[11]);
    taskbarPropertiesAdvancedMenu[1].add(taskbarPropertiesAdvancedSeparator[3]);
    taskbarPropertiesAdvancedMenuItem[12] = new JMenuItem("Cut");
    taskbarPropertiesAdvancedMenuItem[12].setAccelerator(ctrlX);
    taskbarPropertiesAdvancedMenuItem[13] = new JMenuItem("Copy");
    taskbarPropertiesAdvancedMenuItem[13].setAccelerator(ctrlV);
    taskbarPropertiesAdvancedMenuItem[14] = new JMenuItem("Paste");
    taskbarPropertiesAdvancedMenuItem[15] = new JMenuItem("Paste Shortcut");
    for (int i = 11; i < 16; i++) {
      taskbarPropertiesAdvancedMenuItem[i].setEnabled(false);
    }
    for (int i = 12; i < 16; i++) {
      taskbarPropertiesAdvancedMenu[1].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[1].add(taskbarPropertiesAdvancedSeparator[3]);
    taskbarPropertiesAdvancedMenuItem[16] = new JMenuItem("Select All");
    taskbarPropertiesAdvancedMenuItem[16].setAccelerator(ctrlA);
    taskbarPropertiesAdvancedMenuItem[17] = new JMenuItem("Invert Selection");
    for (int i = 16; i < 18; i++) {
      taskbarPropertiesAdvancedMenu[1].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    taskbarPropertiesAdvancedCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    taskbarPropertiesAdvancedCheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == taskbarPropertiesAdvancedCheckBoxMenuItem[0]) {
          taskbarPropertiesAdvancedText[1].setText("Shows or hides the toolbar.");
        }
      }
    });
    taskbarPropertiesAdvancedCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    taskbarPropertiesAdvancedCheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == taskbarPropertiesAdvancedCheckBoxMenuItem[1]) {
          taskbarPropertiesAdvancedText[1].setText("Shows or hides the status bar.");
        }
      }
    });
    taskbarPropertiesAdvancedCheckBoxMenuItem[1].setSelected(true);
    for (int i = 0; i < 2; i++) {
      taskbarPropertiesAdvancedCheckBoxMenuItem[i].addActionListener(this);
      taskbarPropertiesAdvancedCheckBoxMenuItem[i].setFont(MSSansSerif16);
      taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedCheckBoxMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedSeparator[4]);
    taskbarPropertiesAdvancedMenuItem[18] = new JMenuItem("Large Icons");
    taskbarPropertiesAdvancedMenuItem[19] = new JMenuItem("Small Icons");
    taskbarPropertiesAdvancedMenuItem[20] = new JMenuItem("List");
    taskbarPropertiesAdvancedMenuItem[21] = new JMenuItem("Details");
    for (int i = 18; i < 22; i++) {
      taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedSeparator[5]);
    taskbarPropertiesAdvancedMenu[6] = new JMenu("Arrange Icons");
    taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedMenu[6]);
    taskbarPropertiesAdvancedMenuItem[22] = new JMenuItem("by Name");
    taskbarPropertiesAdvancedMenuItem[23] = new JMenuItem("by Type");
    taskbarPropertiesAdvancedMenuItem[24] = new JMenuItem("by Size");
    taskbarPropertiesAdvancedMenuItem[25] = new JMenuItem("by Date");
    for (int i = 22; i < 26; i++) {
      taskbarPropertiesAdvancedMenu[6].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[6].add(taskbarPropertiesAdvancedSeparator[6]);
    taskbarPropertiesAdvancedMenuItem[26] = new JMenuItem("Auto Arrange");
    taskbarPropertiesAdvancedMenu[6].add(taskbarPropertiesAdvancedMenuItem[26]);
    taskbarPropertiesAdvancedMenuItem[27] = new JMenuItem("Line up Icons");
    for (int i = 26; i < 28; i++) {
      taskbarPropertiesAdvancedMenuItem[i].setEnabled(false);
    }
    taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedMenuItem[27]);
    taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedSeparator[7]);
    taskbarPropertiesAdvancedMenuItem[28] = new JMenuItem("Refresh");
    taskbarPropertiesAdvancedMenuItem[29] = new JMenuItem("Options...");
    for (int i = 28; i < 30; i++) {
      taskbarPropertiesAdvancedMenu[2].add(taskbarPropertiesAdvancedMenuItem[i]);
    }
    taskbarPropertiesAdvancedMenu[7] = new JMenu("Find");
    taskbarPropertiesAdvancedMenu[3].add(taskbarPropertiesAdvancedMenu[7]);
    taskbarPropertiesAdvancedMenuItem[30] = new JMenuItem("Files or Folders...");
    taskbarPropertiesAdvancedMenu[7].add(taskbarPropertiesAdvancedMenuItem[30]);
    taskbarPropertiesAdvancedMenu[3].add(taskbarPropertiesAdvancedSeparator[8]);
    taskbarPropertiesAdvancedMenuItem[31] = new JMenuItem("Go to...");
    taskbarPropertiesAdvancedMenu[3].add(taskbarPropertiesAdvancedMenuItem[31]);
    taskbarPropertiesAdvancedMenuItem[32] = new JMenuItem("Help Topics");
    taskbarPropertiesAdvancedMenu[4].add(taskbarPropertiesAdvancedMenuItem[32]);
    taskbarPropertiesAdvancedMenu[4].add(taskbarPropertiesAdvancedSeparator[9]);
    taskbarPropertiesAdvancedMenuItem[33] = new JMenuItem("About Windows 95");
    taskbarPropertiesAdvancedMenu[4].add(taskbarPropertiesAdvancedMenuItem[33]);
    for (int i = 0; i < 8; i++) {
      taskbarPropertiesAdvancedMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 34; i++) {
      taskbarPropertiesAdvancedMenuItem[i].addActionListener(this);
      taskbarPropertiesAdvancedMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == taskbarPropertiesAdvancedMenuItem[0]) {
            taskbarPropertiesAdvancedText[1].setText("Creates a new, empty folder.");
          }
          if (e.getSource() == taskbarPropertiesAdvancedMenuItem[1]) {
            taskbarPropertiesAdvancedText[1].setText("Creates a new, empty shortcut.");
          }
          for (int i = 2; i < 6; i++) {
            if (e.getSource() == taskbarPropertiesAdvancedMenuItem[i]) {
              taskbarPropertiesAdvancedText[1].setText("");
            }
          }
          if (e.getSource() == taskbarPropertiesAdvancedMenuItem[6]) {
            taskbarPropertiesAdvancedText[1].setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[7]) {
            taskbarPropertiesAdvancedText[1].setText("Deletes the selected items.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[8]) {
            taskbarPropertiesAdvancedText[1].setText("Renames the selected item.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[9]) {
            taskbarPropertiesAdvancedText[1].setText("Displays the properties of the selected items.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[10]) {
            taskbarPropertiesAdvancedText[1].setText("Closes the window.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[11]) {
            taskbarPropertiesAdvancedText[1].setText("Undoes the previous file operation.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[12]) {
            taskbarPropertiesAdvancedText[1]
              .setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[13]) {
            taskbarPropertiesAdvancedText[1].setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[14]) {
            taskbarPropertiesAdvancedText[1]
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[15]) {
            taskbarPropertiesAdvancedText[1].setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[16]) {
            taskbarPropertiesAdvancedText[1].setText("Selects all items in the window.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[17]) {
            taskbarPropertiesAdvancedText[1]
              .setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[18]) {
            taskbarPropertiesAdvancedText[1].setText("Displays items by using large icons.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[19]) {
            taskbarPropertiesAdvancedText[1].setText("Displays items by using small icons.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[20]) {
            taskbarPropertiesAdvancedText[1].setText("Displays items in a list.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[21]) {
            taskbarPropertiesAdvancedText[1].setText("Displays information about each item in the window.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[22]) {
            taskbarPropertiesAdvancedText[1].setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[23]) {
            taskbarPropertiesAdvancedText[1].setText("Sorts items by type.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[24]) {
            taskbarPropertiesAdvancedText[1].setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[25]) {
            taskbarPropertiesAdvancedText[1].setText("Sorts items by available free space.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[26]) {
            taskbarPropertiesAdvancedText[1].setText("Arranges the icons automatically.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[27]) {
            taskbarPropertiesAdvancedText[1].setText("Arranges icons in a grid.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[28]) {
            taskbarPropertiesAdvancedText[1].setText("Refresh item information.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[29]) {
            taskbarPropertiesAdvancedText[1].setText("Changes the display options for this window.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[30]) {
            taskbarPropertiesAdvancedText[1].setText("Find Files");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[31]) {
            taskbarPropertiesAdvancedText[1].setText("Opens a different folder.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[32]) {
            taskbarPropertiesAdvancedText[1].setText("Opens help.");
          } else if (e.getSource() == taskbarPropertiesAdvancedMenuItem[33]) {
            taskbarPropertiesAdvancedText[1]
              .setText("Displays program information, version number, and copyright.");
          }
        }
      });
      taskbarPropertiesAdvancedMenuItem[i].setFont(MSSansSerif16);
      taskbarPropertiesAdvanced.add(taskbarPropertiesAdvancedMenuBar, BorderLayout.NORTH);
    }
    /// Adding MouseListener to Taskbar Properties Advanced Separators
    for (int i = 0; i < 10; i++) {
      taskbarPropertiesAdvancedSeparator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 10; i++) {
            if (e.getSource() == taskbarPropertiesAdvancedSeparator[i]) {
              taskbarPropertiesAdvancedText[1].setText("");
            }
          }
        }
      });
    }
    taskbarPropertiesAdvanced.add(taskbarPropertiesAdvancedMenuBar, BorderLayout.NORTH);
    taskbarPropertiesAdvancedPanel = new JPanel[2];
    taskbarPropertiesAdvancedText = new JLabel[2];
    taskbarPropertiesAdvancedPanel[0] = new JPanel();
    taskbarPropertiesAdvancedPanel[0].setBorder(new BevelBorder(BevelBorder.LOWERED));
    taskbarPropertiesAdvanced.add(taskbarPropertiesAdvancedPanel[0], BorderLayout.CENTER);
    taskbarPropertiesAdvancedPanel[0].setBackground(gray);
    taskbarPropertiesAdvancedPanel[0].setPreferredSize(new Dimension(taskbarPropertiesAdvanced.getWidth(), 24));
    taskbarPropertiesAdvancedPanel[0].setLayout(new BoxLayout(taskbarPropertiesAdvancedPanel[0], BoxLayout.X_AXIS));
    taskbarPropertiesAdvancedText[0] = new JLabel("All Folders Contents of 'Start Menu'");
    taskbarPropertiesAdvancedText[0].setFont(MSSansSerif12);
    taskbarPropertiesAdvancedText[0].setHorizontalAlignment(SwingConstants.LEFT);
    taskbarPropertiesAdvancedPanel[0].add(taskbarPropertiesAdvancedText[0]);
    taskbarPropertiesAdvancedNode = new DefaultMutableTreeNode[40];
    taskbarPropertiesAdvancedNode[0] = new DefaultMutableTreeNode("Start Menu");
    taskbarPropertiesAdvancedNode[1] = new DefaultMutableTreeNode("Programs");
    taskbarPropertiesAdvancedNode[0].add(taskbarPropertiesAdvancedNode[1]);
    taskbarPropertiesAdvancedNode[2] = new DefaultMutableTreeNode("Accessories");
    taskbarPropertiesAdvancedNode[3] = new DefaultMutableTreeNode("StartUp");
    for (int i = 2; i < 4; i++) {
      taskbarPropertiesAdvancedNode[1].add(taskbarPropertiesAdvancedNode[i]);
    }
    taskbarPropertiesAdvancedNode[4] = new DefaultMutableTreeNode("Games");
    taskbarPropertiesAdvancedNode[5] = new DefaultMutableTreeNode("Internet Tools");
    taskbarPropertiesAdvancedNode[6] = new DefaultMutableTreeNode("Multimedia");
    taskbarPropertiesAdvancedNode[7] = new DefaultMutableTreeNode("System Tools");

    for (int i = 4; i < 8; i++) {
      taskbarPropertiesAdvancedNode[2].add(taskbarPropertiesAdvancedNode[i]);
    }
    taskbarPropertiesAdvancedTree = new JTree[10];
    taskbarPropertiesAdvancedTree[0] = new JTree(taskbarPropertiesAdvancedNode[0]);
    taskbarPropertiesAdvancedTree[0].addTreeSelectionListener(new TreeSelectionListener() {
      public void valueChanged(TreeSelectionEvent e) {
        taskPropertiesAdvancedNodeSelected = (DefaultMutableTreeNode) taskbarPropertiesAdvancedTree[0]
          .getLastSelectedPathComponent();
        if (taskPropertiesAdvancedNodeSelected == taskbarPropertiesAdvancedNode[0]) {
          taskbarPropertiesAdvancedSplitPane.setRightComponent(taskbarPropertiesAdvancedTree[1]);
          taskbarPropertiesAdvancedSplitPane.setDividerLocation(337);
        } else if (taskPropertiesAdvancedNodeSelected == taskbarPropertiesAdvancedNode[1]) {
          taskbarPropertiesAdvancedSplitPane.setRightComponent(taskbarPropertiesAdvancedTree[2]);
          taskbarPropertiesAdvancedSplitPane.setDividerLocation(337);
        }

      }
    });
    taskbarPropertiesAdvancedTree[0].getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    taskbarPropertiesAdvancedTree[1] = new JTree(taskbarPropertiesAdvancedNode[1]);
    taskbarPropertiesAdvancedNode[8] = new DefaultMutableTreeNode("Invisible Node");
    taskbarPropertiesAdvancedNode[9] = new DefaultMutableTreeNode("Accessories");
    taskbarPropertiesAdvancedNode[10] = new DefaultMutableTreeNode("StartUp");
    taskbarPropertiesAdvancedNode[11] = new DefaultMutableTreeNode("MS-DOS Prompt");
    taskbarPropertiesAdvancedNode[12] = new DefaultMutableTreeNode("Windows Explorer");
    for (int i = 9; i < 13; i++) {
      taskbarPropertiesAdvancedNode[8].add(taskbarPropertiesAdvancedNode[i]);
    }
    taskbarPropertiesAdvancedTree[2] = new JTree(taskbarPropertiesAdvancedNode[8]);
    taskbarPropertiesAdvancedTree[2].setRootVisible(false);
    for (int i = 0; i < 2; i++) {
      taskbarPropertiesAdvancedTree[i].setFont(MSSansSerif16);
    }
    taskbarPropertiesAdvancedSplitPane = new JSplitPane();
    taskbarPropertiesAdvancedSplitPane.setLeftComponent(taskbarPropertiesAdvancedTree[0]);
    taskbarPropertiesAdvancedSplitPane.setRightComponent(taskbarPropertiesAdvancedTree[1]);
    taskbarPropertiesAdvancedSplitPane.setDividerLocation(337);
    taskbarPropertiesAdvanced.add(taskbarPropertiesAdvancedSplitPane);
    taskbarPropertiesAdvancedPanel[1] = new JPanel();
    taskbarPropertiesAdvancedPanel[1].setBorder(new BevelBorder(BevelBorder.LOWERED));
    taskbarPropertiesAdvanced.add(taskbarPropertiesAdvancedPanel[1], BorderLayout.SOUTH);
    taskbarPropertiesAdvancedPanel[1].setBackground(gray);
    taskbarPropertiesAdvancedPanel[1].setPreferredSize(new Dimension(taskbarPropertiesAdvanced.getWidth(), 24));
    taskbarPropertiesAdvancedPanel[1].setLayout(new BoxLayout(taskbarPropertiesAdvancedPanel[1], BoxLayout.X_AXIS));
    taskbarPropertiesAdvancedText[1] = new JLabel("1 object(s) 0 bytes (Disk free space: 6.91MB)");
    taskbarPropertiesAdvancedText[1].setFont(MSSansSerif16);
    taskbarPropertiesAdvancedText[1].setHorizontalAlignment(SwingConstants.LEFT);
    taskbarPropertiesAdvancedPanel[1].add(taskbarPropertiesAdvancedText[1]);
  }

  public void volumeControlObjectsMethod() {
    // Setting up Volume Control
    volumeControlIcon = new ImageIcon(getClass().getClassLoader().getResource("VolumeControlIcon.png"));
    volumeControl = new JFrame();
    volumeControl.getContentPane().setBackground(gray);
    volumeControl.setAlwaysOnTop(true);
    volumeControl.setBounds(50, 0, 650, 400);
    volumeControl.setIconImage(volumeControlIcon.getImage());
    volumeControl.setResizable(false);
    volumeControl.setTitle("Volume Control");
    /// Volume Control Objects
    volumeControlPanel = new JPanel();
    volumeControlPanel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
    volumeControlPanel.setLayout(null);
    volumeControlText = new JLabel[10];
    for (int i = 0; i < 10; i++) {
      volumeControlText[i] = new JLabel();
      volumeControlText[i].setFont(MSSansSerif12);
      volumeControlPanel.add(volumeControlText[i]);
    }
    volumeControlText[0].setBounds(10, -20, 100, 100);
    volumeControlText[1].setBounds(130, -20, 100, 100);
    volumeControlText[2].setBounds(270, -20, 100, 100);
    volumeControlText[3].setBounds(400, -20, 100, 100);
    volumeControlText[4].setBounds(530, -20, 100, 100);
    volumeControlText[5].setBounds(10, 120, 100, 50);
    volumeControlText[6].setBounds(140, 120, 100, 50);
    volumeControlText[7].setBounds(270, 120, 100, 50);
    volumeControlText[8].setBounds(400, 120, 100, 50);
    volumeControlText[9].setBounds(530, 120, 100, 50);
    volumeControlText[0].setText("<html>Volume Control<br/>Balance:<html>");
    volumeControlText[1].setText("<html>Wave<br/>Balance:<html>");
    volumeControlText[2].setText("<html>MIDI<br/>Balance:<html>");
    volumeControlText[3].setText("<html>CD<br/>Balance:<html>");
    volumeControlText[4].setText("<html>Line-in<br/>Balance:<html>");
    for (int i = 5; i < 10; i++) {
      volumeControlText[i].setText("Volume:");
    }
    volumeLeftIcon = new JLabel[5];
    volumeRightIcon = new JLabel[5];
    for (int i = 0; i < 5; i++) {
      volumeLeftIcon[i] = new JLabel(
        new ImageIcon(getClass().getClassLoader().getResource("VolumeLeftIcon.png")));
      volumeRightIcon[i] = new JLabel(
        new ImageIcon(getClass().getClassLoader().getResource("VolumeRightIcon.png")));
      volumeControlPanel.add(volumeLeftIcon[i]);
      volumeControlPanel.add(volumeRightIcon[i]);
    }
    volumeLeftIcon[0].setBounds(-3, 52, 30, 30);
    volumeLeftIcon[1].setBounds(122, 52, 30, 30);
    volumeLeftIcon[2].setBounds(262, 52, 30, 30);
    volumeLeftIcon[3].setBounds(402, 52, 30, 30);
    volumeLeftIcon[4].setBounds(522, 52, 30, 30);
    volumeRightIcon[0].setBounds(73, 52, 30, 30);
    volumeRightIcon[1].setBounds(196, 52, 30, 30);
    volumeRightIcon[2].setBounds(338, 52, 30, 30);
    volumeRightIcon[3].setBounds(478, 52, 30, 30);
    volumeRightIcon[4].setBounds(598, 52, 30, 30);
    volumeControlMenu = new JMenu[2];
    volumeControlMenu[0] = new JMenu("Options");
    volumeControlMenu[1] = new JMenu("Help");
    volumeControlMenuBar = new JMenuBar();
    volumeControlMenuItem = new JMenuItem[5];
    volumeControlMenuItem[0] = new JMenuItem("Properties");
    volumeControlMenuItem[1] = new JMenuItem("Advanced Controls");
    volumeControlMenuItem[2] = new JMenuItem("Exit");
    volumeControlMenuItem[3] = new JMenuItem("Help Topics");
    volumeControlMenuItem[4] = new JMenuItem("About Volume Control");
    for (int i = 0; i < 3; i++) {
      volumeControlMenu[0].add(volumeControlMenuItem[i]);
    }
    for (int i = 3; i < 5; i++) {
      volumeControlMenu[1].add(volumeControlMenuItem[i]);
    }
    for (int i = 0; i < 5; i++) {
      volumeControlMenuItem[i].addActionListener(this);
      volumeControlMenuItem[i].setFont(MSSansSerif12);
    }
    for (int i = 0; i < 2; i++) {
      volumeControlMenu[i].setFont(MSSansSerif12);
      volumeControlMenuBar.add(volumeControlMenu[i]);
    }
    volumeControl.add(volumeControlMenuBar, BorderLayout.NORTH);
    volumeSlider = new JSlider[10];
    volumeMute = new JCheckBox[5];
    for (int i = 0; i < 10; i++) {
      volumeSlider[i] = new JSlider(0, 100, 50);
      volumeSlider[i].setPaintTrack(true);
      volumeSlider[i].setPaintTicks(true);
      volumeControlPanel.add(volumeSlider[i]);
    }
    volumeSlider[0].setBounds(25, 50, 50, 50);
    volumeSlider[1].setBounds(150, 50, 50, 50);
    volumeSlider[2].setBounds(290, 50, 50, 50);
    volumeSlider[3].setBounds(430, 50, 50, 50);
    volumeSlider[4].setBounds(550, 50, 50, 50);
    volumeSlider[5].setBounds(29, 150, 50, 120);
    volumeSlider[6].setBounds(150, 150, 50, 120);
    volumeSlider[7].setBounds(280, 150, 50, 120);
    volumeSlider[8].setBounds(410, 150, 50, 120);
    volumeSlider[9].setBounds(540, 150, 50, 120);
    for (int i = 0; i < 5; i++) {
      volumeMute[i] = new JCheckBox("Mute");
      volumeMute[i].addActionListener(this);
      volumeMute[i].setFont(MSSansSerif12);
      volumeControlPanel.add(volumeMute[i]);
      volumeSlider[i].setMajorTickSpacing(40);
      volumeSlider[i].setOrientation(SwingConstants.HORIZONTAL);
      volumeSlider[i].setPreferredSize(new Dimension(50, 300));
      sliderUI = new BasicSliderUI(volumeSlider[i]) {
        protected Dimension getThumbSize() {
          return new Dimension(100, 100);
        }
      };
      volumeSlider[i].setUI(sliderUI);
    }

    volumeMute[0].setBounds(20, 270, 100, 50);
    volumeMute[1].setBounds(150, 270, 100, 50);
    volumeMute[2].setBounds(280, 270, 100, 50);
    volumeMute[3].setBounds(410, 270, 100, 50);
    volumeMute[4].setBounds(540, 270, 100, 50);
    for (int i = 5; i < 10; i++) {
      volumeSlider[i].setMajorTickSpacing(15);
      volumeSlider[i].setOrientation(SwingConstants.VERTICAL);
      volumeSlider[i].setPreferredSize(new Dimension(50, 120));
    }
    volumeMute[0].setText("Mute all");
    volumeControlStatusBar = new JPanel();
    volumeControlStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    volumeControl.add(volumeControlStatusBar, BorderLayout.SOUTH);
    volumeControlStatusBar.setBackground(gray);
    volumeControlStatusBar.setBounds(0, 310, 600, 20);
    volumeControlStatusBar.setPreferredSize(new Dimension(volumeControl.getWidth(), 24));
    volumeControlStatusBar.setLayout(new BoxLayout(volumeControlStatusBar, BoxLayout.X_AXIS));
    volumeControlStatusText = new JLabel("SB16 Mixer (220)");
    volumeControlStatusText.setFont(MSSansSerif12);
    volumeControlStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    volumeControlStatusBar.add(volumeControlStatusText);
    volumeControl.add(volumeControlPanel);
  }

  public void audioPropertiesMethod() {
    // Setting up Audio Properties
    audioProperties = new JFrame();
    audioProperties.getContentPane().setBackground(gray);
    audioPropertiesTabbedPane = new JTabbedPane();
    audioPropertiesTabbedPane.addTab("Audio", null);
    audioProperties.add(audioPropertiesTabbedPane, BorderLayout.NORTH);
    audioProperties.setSize(500, 500);
    audioProperties.setTitle("Audio Properties");
  }

  public void copyingFilesMethod() {
    /// Setting up Copying Files... in Inbox and Set Up The Microsoft Network
    copyingFiles = new JDialog();
    copyingFiles.setAlwaysOnTop(true);
    copyingFiles.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    copyingFiles.setSize(540, 300);
    copyingFiles.setTitle("Copying Files...");
    copyingFilesProgress = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("CopyingFilesProgress.png")));
    copyingFiles.add(copyingFilesProgress);
    copyingFiles2 = new JDialog();
    copyingFiles2.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        copyingFiles.dispose();
        theMicrosoftNetwork.setEnabled(true);
        MicrosoftMail.setEnabled(true);
        MicrosoftFax.setEnabled(true);
        inboxOK.setEnabled(true);
        inboxCancel.setEnabled(true);
      }
    });
    copyingFiles2.setAlwaysOnTop(true);
    copyingFiles2.setSize(600, 360);
    CMC_dll = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("CMC_dll.png")));
    CMC_dll.setBounds(0, 0, 450, 300);
    copyingFilesButton = new JButton[5];
    copyingFilesButton[0] = new JButton("OK");
    copyingFilesButton[1] = new JButton("Cancel");
    copyingFilesButton[2] = new JButton("Skip File");
    copyingFilesButton[3] = new JButton("Details...");
    copyingFilesButton[4] = new JButton("Browse...");
    copyingFilesButton[0].setBounds(450, 50, 100, 33);
    copyingFilesButton[1].setBounds(450, 93, 100, 33);
    copyingFilesButton[2].setBounds(450, 200, 100, 33);
    copyingFilesButton[3].setBounds(450, 243, 100, 33);
    copyingFilesButton[4].setBounds(450, 286, 100, 33);
    copyingFiles2.add(CMC_dll);
    for (int i = 0; i < 5; i++) {
      copyingFiles2.add(copyingFilesButton[i]);
      copyingFilesButton[i].addActionListener(this);
    }
    copyFilesFrom = new JComboBox < String > ();
    copyFilesFrom.addItem("D:\\WIN95");
    copyFilesFrom.addItem("D:\\S3TRIO64");
    copyFilesFrom.setBounds(75, 286, 300, 30);
    copyFilesFrom.setEditable(true);
    copyingFiles2.add(copyFilesFrom);
    copyingFiles2.setLayout(null);
    copyingFiles2.setTitle("Copying Files...");
    /// Setting up Copying Files... in the Internet
    theInternetCopyingFiles = new JDialog();
    theInternetCopyingFiles.setAlwaysOnTop(true);
    theInternetCopyingFiles.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    theInternetCopyingFiles.setBounds(50, 50, 540, 265);
    theInternetCopyingFiles.setTitle("Copying Files...");
    theInternetCopyingFilesProgress = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("CopyingFilesProgress.png")));
    theInternetCopyingFiles.add(theInternetCopyingFilesProgress);
    theInternetCopyingFiles2 = new JDialog();
    theInternetCopyingFiles2.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        theInternetBack.setEnabled(true);
        theInternetNext.setEnabled(true);
      }
    });
    theInternetCopyingFiles2.setAlwaysOnTop(true);
    theInternetCopyingFiles2.setBounds(100, 50, 600, 310);
    CMC_dll = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("CMC_dll.png")));
    CMC_dll.setBounds(0, 0, 381, 195);
    theInternetCopyingFilesButton = new JButton[5];
    theInternetCopyingFilesButton[0] = new JButton("OK");
    theInternetCopyingFilesButton[1] = new JButton("Cancel");
    theInternetCopyingFilesButton[2] = new JButton("Skip File");
    theInternetCopyingFilesButton[3] = new JButton("Details...");
    theInternetCopyingFilesButton[4] = new JButton("Browse...");
    theInternetCopyingFilesButton[0].setBounds(450, 50, 120, 33);
    theInternetCopyingFilesButton[1].setBounds(450, 93, 120, 33);
    theInternetCopyingFilesButton[2].setBounds(450, 150, 120, 33);
    theInternetCopyingFilesButton[3].setBounds(450, 193, 120, 33);
    theInternetCopyingFilesButton[4].setBounds(450, 236, 120, 33);
    theInternetCopyingFiles2.add(CMC_dll);
    for (int i = 0; i < 5; i++) {
      theInternetCopyingFiles2.add(theInternetCopyingFilesButton[i]);
      theInternetCopyingFilesButton[i].addActionListener(this);
      theInternetCopyingFilesButton[i].setFont(MSSansSerif16);
    }
    theInternetCopyFilesFrom = new JComboBox < String > ();
    theInternetCopyFilesFrom.addItem("D:\\WIN95");
    theInternetCopyFilesFrom.addItem("D:\\S3TRIO64");
    theInternetCopyFilesFrom.setBounds(75, 236, 300, 30);
    theInternetCopyFilesFrom.setEditable(true);
    theInternetCopyingFiles2.add(theInternetCopyFilesFrom);
    theInternetCopyingFiles2.setLayout(null);
    theInternetCopyingFiles2.setTitle("Copying Files...");
  }

  public void playDosGameC_method() {
    C_DriveIcon = new ImageIcon(getClass().getClassLoader().getResource("C_DriveIcon.png"));
    playDosGameC_Open = new JFrame();
    playDosGameC_Open.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {

      }
    });
    playDosGameC_Open.setAlwaysOnTop(true);
    playDosGameC_Open.setBounds(50, 0, 300, 300);
    playDosGameC_Open.setIconImage(C_DriveIcon.getImage());
    playDosGameC_Open.setTitle("Playdosgame (C:)");
    playDosGameC_Panel = new JPanel();
    playDosGameC_Panel.add(programFiles);
    playDosGameC_Panel.add(windows);
    playDosGameC_Panel.add(command);
    playDosGameC_Panel.setBackground(white);
    playDosGameC_Panel.setLayout(null);
    playDosGameC_Open.add(playDosGameC_Panel);
    /// Setting up Play Dos Game (C:) Properties
    playDosGameC_Properties = new JFrame();
    playDosGameC_Properties.setSize(500, 500);
    playDosGameC_Properties.setTitle("Playdosgame (C:) Properties");
    playDosGameC_Menu = new JMenu[5];
    /// Play Dos Game (C:) Menubar Menus
    playDosGameC_Menu = new JMenu[8];
    playDosGameC_Menu[0] = new JMenu("File");
    playDosGameC_Menu[1] = new JMenu("Edit");
    playDosGameC_Menu[2] = new JMenu("View");
    playDosGameC_Menu[3] = new JMenu("Help");
    playDosGameC_MenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      playDosGameC_Menu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == playDosGameC_Menu[0]) {
            playDosGameC_StatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == playDosGameC_Menu[1]) {
            playDosGameC_StatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == playDosGameC_Menu[2]) {
            playDosGameC_StatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == playDosGameC_Menu[3]) {
            playDosGameC_StatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {

        }
      });
      playDosGameC_MenuBar.add(playDosGameC_Menu[i]);
    }
    playDosGameC_Menu[4] = new JMenu("New");
    playDosGameC_Menu[0].add(playDosGameC_Menu[4]);
    playDosGameC_MenuItem = new JMenuItem[40];
    playDosGameC_MenuItem[0] = new JMenuItem("Folder");
    playDosGameC_MenuItem[1] = new JMenuItem("Shortcut");
    for (int i = 0; i < 2; i++) {
      playDosGameC_Menu[4].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_Separator = new JSeparator[10];
    for (int i = 0; i < 10; i++) {
      playDosGameC_Separator[i] = new JSeparator();
    }
    playDosGameC_Menu[4].add(playDosGameC_Separator[0]);
    playDosGameC_MenuItem[2] = new JMenuItem("Wave Sound");
    playDosGameC_MenuItem[3] = new JMenuItem("Text Document");
    playDosGameC_MenuItem[4] = new JMenuItem("WordPad Document");
    playDosGameC_MenuItem[5] = new JMenuItem("Bitmap Image");
    for (int i = 2; i < 6; i++) {
      playDosGameC_Menu[4].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_Menu[0].add(playDosGameC_Separator[1]);
    playDosGameC_MenuItem[6] = new JMenuItem("Create Shortcut");
    playDosGameC_MenuItem[7] = new JMenuItem("Delete");
    playDosGameC_MenuItem[8] = new JMenuItem("Rename");
    playDosGameC_MenuItem[9] = new JMenuItem("Properties");
    for (int i = 6; i < 10; i++) {
      playDosGameC_MenuItem[i].setEnabled(false);
      playDosGameC_Menu[0].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_Menu[0].add(playDosGameC_Separator[2]);
    playDosGameC_MenuItem[10] = new JMenuItem("Close");
    playDosGameC_Menu[0].add(playDosGameC_MenuItem[10]);
    playDosGameC_MenuItem[11] = new JMenuItem("Undo");
    playDosGameC_MenuItem[11].setAccelerator(ctrlZ);
    playDosGameC_Menu[1].add(playDosGameC_MenuItem[11]);
    playDosGameC_Menu[1].add(playDosGameC_Separator[3]);
    playDosGameC_MenuItem[12] = new JMenuItem("Cut");
    playDosGameC_MenuItem[12].setAccelerator(ctrlX);
    playDosGameC_MenuItem[13] = new JMenuItem("Copy");
    playDosGameC_MenuItem[13].setAccelerator(ctrlC);
    playDosGameC_MenuItem[14] = new JMenuItem("Paste");
    playDosGameC_MenuItem[14].setAccelerator(ctrlV);
    playDosGameC_MenuItem[15] = new JMenuItem("Paste Shortcut");
    for (int i = 11; i < 16; i++) {
      playDosGameC_MenuItem[i].setEnabled(false);
    }
    for (int i = 12; i < 16; i++) {
      playDosGameC_Menu[1].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_Menu[1].add(playDosGameC_Separator[4]);
    playDosGameC_MenuItem[16] = new JMenuItem("Select All");
    playDosGameC_MenuItem[16].setAccelerator(ctrlA);
    playDosGameC_MenuItem[17] = new JMenuItem("Invert Selection");
    for (int i = 16; i < 18; i++) {
      playDosGameC_Menu[1].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_CheckBoxMenuItem = new JCheckBoxMenuItem[2];
    playDosGameC_CheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    playDosGameC_CheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == playDosGameC_CheckBoxMenuItem[0]) {
          playDosGameC_StatusText.setText("Shows or hides the toolbar.");
        }
      }
    });
    playDosGameC_CheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    playDosGameC_CheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == playDosGameC_CheckBoxMenuItem[1]) {
          playDosGameC_StatusText.setText("Shows or hides the status bar.");
        }
      }
    });
    playDosGameC_CheckBoxMenuItem[1].setSelected(true);
    for (int i = 0; i < 2; i++) {
      playDosGameC_CheckBoxMenuItem[i].addActionListener(this);
      playDosGameC_CheckBoxMenuItem[i].setFont(MSSansSerif16);
      playDosGameC_Menu[2].add(playDosGameC_CheckBoxMenuItem[i]);
    }
    playDosGameC_Menu[2].add(playDosGameC_Separator[5]);
    playDosGameC_MenuItem[18] = new JMenuItem("Large Icons");
    playDosGameC_MenuItem[19] = new JMenuItem("Small Icons");
    playDosGameC_MenuItem[20] = new JMenuItem("List");
    playDosGameC_MenuItem[21] = new JMenuItem("Details");
    for (int i = 18; i < 22; i++) {
      playDosGameC_Menu[2].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_Menu[2].add(playDosGameC_Separator[6]);
    playDosGameC_Menu[5] = new JMenu("Arrange Icons");
    playDosGameC_Menu[2].add(playDosGameC_Menu[5]);
    playDosGameC_MenuItem[22] = new JMenuItem("by Name");
    playDosGameC_MenuItem[23] = new JMenuItem("by Type");
    playDosGameC_MenuItem[24] = new JMenuItem("by Size");
    playDosGameC_MenuItem[25] = new JMenuItem("by Date");
    for (int i = 22; i < 26; i++) {
      playDosGameC_Menu[5].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_Menu[5].add(playDosGameC_Separator[7]);
    playDosGameC_MenuItem[26] = new JMenuItem("Auto Arrange");
    playDosGameC_Menu[5].add(playDosGameC_MenuItem[26]);
    playDosGameC_MenuItem[27] = new JMenuItem("Line up Icons");
    for (int i = 26; i < 28; i++) {
      playDosGameC_MenuItem[i].setEnabled(false);
    }
    playDosGameC_Menu[2].add(playDosGameC_MenuItem[27]);
    playDosGameC_Menu[2].add(playDosGameC_Separator[8]);
    playDosGameC_MenuItem[28] = new JMenuItem("Refresh");
    playDosGameC_MenuItem[29] = new JMenuItem("Options...");
    for (int i = 28; i < 30; i++) {
      playDosGameC_Menu[2].add(playDosGameC_MenuItem[i]);
    }
    playDosGameC_MenuItem[30] = new JMenuItem("Help Topics");
    playDosGameC_Menu[3].add(playDosGameC_MenuItem[30]);
    playDosGameC_Menu[3].add(playDosGameC_Separator[9]);
    playDosGameC_MenuItem[31] = new JMenuItem("About Windows 95");
    playDosGameC_Menu[3].add(playDosGameC_MenuItem[31]);
    for (int i = 0; i < 6; i++) {
      playDosGameC_Menu[i].setFont(MSSansSerif16);
    }
    /// Play Dos Game (C:) Status Bar and Play Dos Game (C:) Status Text
    playDosGameC_StatusBar = new JPanel();
    playDosGameC_StatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    playDosGameC_StatusBar.setBackground(gray);
    playDosGameC_StatusBar.setPreferredSize(new Dimension(playDosGameC_Open.getWidth(), 24));
    playDosGameC_StatusBar.setLayout(new BoxLayout(playDosGameC_StatusBar, BoxLayout.X_AXIS));
    playDosGameC_StatusText = new JLabel("3 object(s) (plus 3 hidden)");
    playDosGameC_StatusText.setFont(MSSansSerif16);
    playDosGameC_StatusText.setHorizontalAlignment(SwingConstants.LEFT);
    playDosGameC_StatusBar.add(playDosGameC_StatusText);
    playDosGameC_Open.add(playDosGameC_StatusBar, BorderLayout.SOUTH);
    for (int i = 0; i < 32; i++) {
      playDosGameC_MenuItem[i].addActionListener(this);
      playDosGameC_MenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == playDosGameC_MenuItem[0]) {
            playDosGameC_StatusText.setText("Creates a new, empty folder.");
          }
          if (e.getSource() == playDosGameC_MenuItem[1]) {
            playDosGameC_StatusText.setText("Creates a new, empty shortcut.");
          }
          for (int i = 2; i < 6; i++) {
            if (e.getSource() == playDosGameC_MenuItem[i]) {
              playDosGameC_StatusText.setText("");
            }
          }
          if (e.getSource() == playDosGameC_MenuItem[6]) {
            playDosGameC_StatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == playDosGameC_MenuItem[7]) {
            playDosGameC_StatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == playDosGameC_MenuItem[8]) {
            playDosGameC_StatusText.setText("Renames the selected item.");
          } else if (e.getSource() == playDosGameC_MenuItem[9]) {
            playDosGameC_StatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == playDosGameC_MenuItem[10]) {
            playDosGameC_StatusText.setText("Closes the window.");
          } else if (e.getSource() == playDosGameC_MenuItem[11]) {
            playDosGameC_StatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == playDosGameC_MenuItem[12]) {
            playDosGameC_StatusText
              .setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == playDosGameC_MenuItem[13]) {
            playDosGameC_StatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == playDosGameC_MenuItem[14]) {
            playDosGameC_StatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == playDosGameC_MenuItem[15]) {
            playDosGameC_StatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == playDosGameC_MenuItem[16]) {
            playDosGameC_StatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == playDosGameC_MenuItem[17]) {
            playDosGameC_StatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == playDosGameC_MenuItem[18]) {
            playDosGameC_StatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == playDosGameC_MenuItem[19]) {
            playDosGameC_StatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == playDosGameC_MenuItem[20]) {
            playDosGameC_StatusText.setText("Displays items in a list.");
          } else if (e.getSource() == playDosGameC_MenuItem[21]) {
            playDosGameC_StatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == playDosGameC_MenuItem[22]) {
            playDosGameC_StatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == playDosGameC_MenuItem[23]) {
            playDosGameC_StatusText.setText("Sorts items by type.");
          } else if (e.getSource() == playDosGameC_MenuItem[24]) {
            playDosGameC_StatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == playDosGameC_MenuItem[25]) {
            playDosGameC_StatusText.setText("Sorts items by available free space.");
          } else if (e.getSource() == playDosGameC_MenuItem[26]) {
            playDosGameC_StatusText.setText("Arranges the icons automatically.");
          } else if (e.getSource() == playDosGameC_MenuItem[27]) {
            playDosGameC_StatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == playDosGameC_MenuItem[28]) {
            playDosGameC_StatusText.setText("Refresh item information.");
          } else if (e.getSource() == playDosGameC_MenuItem[29]) {
            playDosGameC_StatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == playDosGameC_MenuItem[30]) {
            playDosGameC_StatusText.setText("Opens help.");
          } else if (e.getSource() == playDosGameC_MenuItem[31]) {
            playDosGameC_StatusText.setText("Displays program information, version number, and copyright.");
          }
        }
      });
      playDosGameC_MenuItem[i].setFont(MSSansSerif16);
      playDosGameC_Open.add(playDosGameC_MenuBar, BorderLayout.NORTH);
    }
    /// Adding MouseListener to PlayDosGame(C:) Separators
    for (int i = 0; i < 7; i++) {
      playDosGameC_Separator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 7; i++) {
            if (e.getSource() == playDosGameC_Separator[i]) {
              playDosGameC_StatusText.setText("");
            }
          }
        }
      });
      C_ProgramFilesObjectsMethod();
      C_WindowsObjectsMethod();
    }
  }

  public void C_ProgramFilesObjectsMethod() {
    programFilesOpen = new JFrame();
    programFilesOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        C_ProgramFilesObjectsUnselectMethod();
        programFilesStatusText.setText("4 object(s)               0 bytes");
      }
    });
    programFilesOpen.setAlwaysOnTop(true);
    programFilesOpen.setBounds(0, 100, 300, 300);
    programFilesOpen.setIconImage(folderIcon.getImage());
    programFilesOpen.setTitle("Program Files");
    accessories = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Accessories.png")));
    microsoftExchange = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("MicrosoftExchange.png")));
    plus = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Plus!.png")));
    programFilesTheMicrosoftNetwork = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TheMicrosoftNetwork.png")));
    accessories.setBounds(5, 10, 97, 77);
    microsoftExchange.setBounds(130, 10, 74, 88);
    plus.setBounds(20, 120, 53, 69);
    programFilesTheMicrosoftNetwork.setBounds(120, 123, 96, 88);
    accessoriesSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AccessoriesSelected.png")));
    microsoftExchangeSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MicrosoftExchangeSelected.png")));
    plusSelected = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("Plus!Selected.png")));
    programFilesTheMicrosoftNetworkSelected = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("TheMicrosoftNetworkSelected.png")));
    accessoriesSelected.setBounds(5, 10, 97, 77);
    microsoftExchangeSelected.setBounds(130, 10, 74, 88);
    plusSelected.setBounds(20, 120, 53, 69);
    programFilesTheMicrosoftNetworkSelected.setBounds(120, 123, 96, 88);
    programFilesPanel = new JPanel();
    programFilesPanel.add(accessories);
    programFilesPanel.add(microsoftExchange);
    programFilesPanel.add(plus);
    programFilesPanel.add(programFilesTheMicrosoftNetwork);
    programFilesPanel.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        C_ProgramFilesObjectsUnselectMethod();
        programFilesStatusText.setText("4 object(s)               0 bytes");
      }
    });
    programFilesPanel.setBackground(white);
    programFilesPanel.setLayout(null);
    programFilesOpen.add(programFilesPanel);
    accessories.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        programFilesPanel.remove(accessories);
        programFilesPanel.add(accessoriesSelected);
        programFilesPanel.revalidate();
        programFilesPanel.repaint();
        C_ProgramFilesObjectsUnselectMethodA();
        programFilesStatusText.setText("1 object(s) selected");
      }
    });
    accessoriesSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        C_ProgramFilesObjectsUnselectMethodA();
      }
    });
    microsoftExchange.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        programFilesPanel.remove(microsoftExchange);
        programFilesPanel.add(microsoftExchangeSelected);
        programFilesPanel.revalidate();
        programFilesPanel.repaint();
        C_ProgramFilesObjectsUnselectMethodB();
        programFilesStatusText.setText("1 object(s) selected");
      }
    });
    microsoftExchangeSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        C_ProgramFilesObjectsUnselectMethodB();
      }
    });
    plus.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        programFilesPanel.remove(plus);
        programFilesPanel.add(plusSelected);
        programFilesPanel.revalidate();
        programFilesPanel.repaint();
        C_ProgramFilesObjectsUnselectMethodC();
        programFilesStatusText.setText("1 object(s) selected");
      }
    });
    plusSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        C_ProgramFilesObjectsUnselectMethodC();
      }
    });
    programFilesTheMicrosoftNetwork.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        programFilesPanel.remove(programFilesTheMicrosoftNetwork);
        programFilesPanel.add(programFilesTheMicrosoftNetworkSelected);
        programFilesPanel.revalidate();
        programFilesPanel.repaint();
        C_ProgramFilesObjectsUnselectMethodD();
        programFilesStatusText.setText("1 object(s) selected");
      }
    });
    programFilesTheMicrosoftNetworkSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        C_ProgramFilesObjectsUnselectMethodD();
      }
    });
    /// Program Files Menubar Menus
    programFilesMenu = new JMenu[8];
    programFilesMenu[0] = new JMenu("File");
    programFilesMenu[1] = new JMenu("Edit");
    programFilesMenu[2] = new JMenu("View");
    programFilesMenu[3] = new JMenu("Help");
    programFilesMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      programFilesMenu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == programFilesMenu[0]) {
            programFilesStatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == programFilesMenu[1]) {
            programFilesStatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == programFilesMenu[2]) {
            programFilesStatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == programFilesMenu[3]) {
            programFilesStatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {

        }
      });
      programFilesMenuBar.add(programFilesMenu[i]);
    }
    programFilesMenu[4] = new JMenu("New");
    programFilesMenu[0].add(programFilesMenu[4]);
    programFilesMenuItem = new JMenuItem[40];
    programFilesMenuItem[0] = new JMenuItem("Folder");
    programFilesMenuItem[1] = new JMenuItem("Shortcut");
    for (int i = 0; i < 2; i++) {
      programFilesMenu[4].add(programFilesMenuItem[i]);
    }
    programFilesSeparator = new JSeparator[10];
    for (int i = 0; i < 10; i++) {
      programFilesSeparator[i] = new JSeparator();
    }
    programFilesMenu[4].add(programFilesSeparator[0]);
    programFilesMenuItem[2] = new JMenuItem("Wave Sound");
    programFilesMenuItem[3] = new JMenuItem("Text Document");
    programFilesMenuItem[4] = new JMenuItem("WordPad Document");
    programFilesMenuItem[5] = new JMenuItem("Bitmap Image");
    for (int i = 2; i < 6; i++) {
      programFilesMenu[4].add(programFilesMenuItem[i]);
    }
    programFilesMenu[0].add(programFilesSeparator[1]);
    programFilesMenuItem[6] = new JMenuItem("Create Shortcut");
    programFilesMenuItem[7] = new JMenuItem("Delete");
    programFilesMenuItem[8] = new JMenuItem("Rename");
    programFilesMenuItem[9] = new JMenuItem("Properties");
    for (int i = 6; i < 10; i++) {
      programFilesMenuItem[i].setEnabled(false);
      programFilesMenu[0].add(programFilesMenuItem[i]);
    }
    programFilesMenu[0].add(programFilesSeparator[2]);
    programFilesMenuItem[10] = new JMenuItem("Close");
    programFilesMenu[0].add(programFilesMenuItem[10]);
    programFilesMenuItem[11] = new JMenuItem("Undo");
    programFilesMenuItem[11].setAccelerator(ctrlZ);
    programFilesMenu[1].add(programFilesMenuItem[11]);
    programFilesMenu[1].add(programFilesSeparator[3]);
    programFilesMenuItem[12] = new JMenuItem("Cut");
    programFilesMenuItem[12].setAccelerator(ctrlX);
    programFilesMenuItem[13] = new JMenuItem("Copy");
    programFilesMenuItem[13].setAccelerator(ctrlC);
    programFilesMenuItem[14] = new JMenuItem("Paste");
    programFilesMenuItem[14].setAccelerator(ctrlV);
    programFilesMenuItem[15] = new JMenuItem("Paste Shortcut");
    for (int i = 11; i < 16; i++) {
      programFilesMenuItem[i].setEnabled(false);
    }
    for (int i = 12; i < 16; i++) {
      programFilesMenu[1].add(programFilesMenuItem[i]);
    }
    programFilesMenu[1].add(programFilesSeparator[4]);
    programFilesMenuItem[16] = new JMenuItem("Select All");
    programFilesMenuItem[16].setAccelerator(ctrlA);
    programFilesMenuItem[17] = new JMenuItem("Invert Selection");
    for (int i = 16; i < 18; i++) {
      programFilesMenu[1].add(programFilesMenuItem[i]);
    }
    programFilesCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    programFilesCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    programFilesCheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == programFilesCheckBoxMenuItem[0]) {
          programFilesStatusText.setText("Shows or hides the toolbar.");
        }
      }
    });
    programFilesCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    programFilesCheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == programFilesCheckBoxMenuItem[1]) {
          programFilesStatusText.setText("Shows or hides the status bar.");
        }
      }
    });
    programFilesCheckBoxMenuItem[1].setSelected(true);
    for (int i = 0; i < 2; i++) {
      programFilesCheckBoxMenuItem[i].addActionListener(this);
      programFilesCheckBoxMenuItem[i].setFont(MSSansSerif16);
      programFilesMenu[2].add(programFilesCheckBoxMenuItem[i]);
    }
    programFilesMenu[2].add(programFilesSeparator[5]);
    programFilesMenuItem[18] = new JMenuItem("Large Icons");
    programFilesMenuItem[19] = new JMenuItem("Small Icons");
    programFilesMenuItem[20] = new JMenuItem("List");
    programFilesMenuItem[21] = new JMenuItem("Details");
    for (int i = 18; i < 22; i++) {
      programFilesMenu[2].add(programFilesMenuItem[i]);
    }
    programFilesMenu[2].add(programFilesSeparator[6]);
    programFilesMenu[5] = new JMenu("Arrange Icons");
    programFilesMenu[2].add(programFilesMenu[5]);
    programFilesMenuItem[22] = new JMenuItem("by Name");
    programFilesMenuItem[23] = new JMenuItem("by Type");
    programFilesMenuItem[24] = new JMenuItem("by Size");
    programFilesMenuItem[25] = new JMenuItem("by Date");
    for (int i = 22; i < 26; i++) {
      programFilesMenu[5].add(programFilesMenuItem[i]);
    }
    programFilesMenu[5].add(programFilesSeparator[7]);
    programFilesMenuItem[26] = new JMenuItem("Auto Arrange");
    programFilesMenu[5].add(programFilesMenuItem[26]);
    programFilesMenuItem[27] = new JMenuItem("Line up Icons");
    for (int i = 26; i < 28; i++) {
      programFilesMenuItem[i].setEnabled(false);
    }
    programFilesMenu[2].add(programFilesMenuItem[27]);
    programFilesMenu[2].add(programFilesSeparator[8]);
    programFilesMenuItem[28] = new JMenuItem("Refresh");
    programFilesMenuItem[29] = new JMenuItem("Options...");
    for (int i = 28; i < 30; i++) {
      programFilesMenu[2].add(programFilesMenuItem[i]);
    }
    programFilesMenuItem[30] = new JMenuItem("Help Topics");
    programFilesMenu[3].add(programFilesMenuItem[30]);
    programFilesMenu[3].add(programFilesSeparator[9]);
    programFilesMenuItem[31] = new JMenuItem("About Windows 95");
    programFilesMenu[3].add(programFilesMenuItem[31]);
    for (int i = 0; i < 6; i++) {
      programFilesMenu[i].setFont(MSSansSerif16);
    }
    /// Program Files Status Bar and Program Files Status Text
    programFilesStatusBar = new JPanel();
    programFilesStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    programFilesStatusBar.setBackground(gray);
    programFilesStatusBar.setPreferredSize(new Dimension(programFilesOpen.getWidth(), 24));
    programFilesStatusBar.setLayout(new BoxLayout(programFilesStatusBar, BoxLayout.X_AXIS));
    programFilesStatusText = new JLabel("4 object(s)               0 bytes");
    programFilesStatusText.setFont(MSSansSerif16);
    programFilesStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    programFilesStatusBar.add(programFilesStatusText);
    programFilesOpen.add(programFilesStatusBar, BorderLayout.SOUTH);
    for (int i = 0; i < 32; i++) {
      programFilesMenuItem[i].addActionListener(this);
      programFilesMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == programFilesMenuItem[0]) {
            programFilesStatusText.setText("Creates a new, empty folder.");
          }
          if (e.getSource() == programFilesMenuItem[1]) {
            programFilesStatusText.setText("Creates a new, empty shortcut.");
          }
          for (int i = 2; i < 6; i++) {
            if (e.getSource() == programFilesMenuItem[i]) {
              programFilesStatusText.setText("");
            }
          }
          if (e.getSource() == programFilesMenuItem[6]) {
            programFilesStatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == programFilesMenuItem[7]) {
            programFilesStatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == programFilesMenuItem[8]) {
            programFilesStatusText.setText("Renames the selected item.");
          } else if (e.getSource() == programFilesMenuItem[9]) {
            programFilesStatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == programFilesMenuItem[10]) {
            programFilesStatusText.setText("Closes the window.");
          } else if (e.getSource() == programFilesMenuItem[11]) {
            programFilesStatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == programFilesMenuItem[12]) {
            programFilesStatusText.setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == programFilesMenuItem[13]) {
            programFilesStatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == programFilesMenuItem[14]) {
            programFilesStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == programFilesMenuItem[15]) {
            programFilesStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == programFilesMenuItem[16]) {
            programFilesStatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == programFilesMenuItem[17]) {
            programFilesStatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == programFilesMenuItem[18]) {
            programFilesStatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == programFilesMenuItem[19]) {
            programFilesStatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == programFilesMenuItem[20]) {
            programFilesStatusText.setText("Displays items in a list.");
          } else if (e.getSource() == programFilesMenuItem[21]) {
            programFilesStatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == programFilesMenuItem[22]) {
            programFilesStatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == programFilesMenuItem[23]) {
            programFilesStatusText.setText("Sorts items by type.");
          } else if (e.getSource() == programFilesMenuItem[24]) {
            programFilesStatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == programFilesMenuItem[25]) {
            programFilesStatusText.setText("Sorts items by available free space.");
          } else if (e.getSource() == programFilesMenuItem[26]) {
            programFilesStatusText.setText("Arranges the icons automatically.");
          } else if (e.getSource() == programFilesMenuItem[27]) {
            programFilesStatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == programFilesMenuItem[28]) {
            programFilesStatusText.setText("Refresh item information.");
          } else if (e.getSource() == programFilesMenuItem[29]) {
            programFilesStatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == programFilesMenuItem[30]) {
            programFilesStatusText.setText("Opens help.");
          } else if (e.getSource() == programFilesMenuItem[31]) {
            programFilesStatusText.setText("Displays program information, version number, and copyright.");
          }
        }
      });
      programFilesMenuItem[i].setFont(MSSansSerif16);
      programFilesOpen.add(programFilesMenuBar, BorderLayout.NORTH);
    }
    /// Adding MouseListener to Program Files Separators
    for (int i = 0; i < 7; i++) {
      programFilesSeparator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 7; i++) {
            if (e.getSource() == programFilesSeparator[i]) {
              programFilesStatusText.setText("");
            }
          }
        }
      });
    }
  }

  public void C_ProgramFilesObjectsUnselectMethod() {
    if (accessoriesSelected.getParent() != null) {
      programFilesPanel.remove(accessoriesSelected);
      programFilesPanel.add(accessories);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (microsoftExchangeSelected.getParent() != null) {
      programFilesPanel.remove(microsoftExchangeSelected);
      programFilesPanel.add(microsoftExchange);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (plusSelected.getParent() != null) {
      programFilesPanel.remove(plusSelected);
      programFilesPanel.add(plus);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (programFilesTheMicrosoftNetworkSelected.getParent() != null) {
      programFilesPanel.remove(programFilesTheMicrosoftNetworkSelected);
      programFilesPanel.add(programFilesTheMicrosoftNetwork);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
  }

  // Unselect All Program Files Object except for Accessories
  public void C_ProgramFilesObjectsUnselectMethodA() {
    if (microsoftExchangeSelected.getParent() != null) {
      programFilesPanel.remove(microsoftExchangeSelected);
      programFilesPanel.add(microsoftExchange);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (plusSelected.getParent() != null) {
      programFilesPanel.remove(plusSelected);
      programFilesPanel.add(plus);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (programFilesTheMicrosoftNetworkSelected.getParent() != null) {
      programFilesPanel.remove(programFilesTheMicrosoftNetworkSelected);
      programFilesPanel.add(programFilesTheMicrosoftNetwork);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
  }

  // Unselect All Program Files Object except for Microsoft Exchange
  public void C_ProgramFilesObjectsUnselectMethodB() {
    if (accessoriesSelected.getParent() != null) {
      programFilesPanel.remove(accessoriesSelected);
      programFilesPanel.add(accessories);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (plusSelected.getParent() != null) {
      programFilesPanel.remove(plusSelected);
      programFilesPanel.add(plus);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (programFilesTheMicrosoftNetworkSelected.getParent() != null) {
      programFilesPanel.remove(programFilesTheMicrosoftNetworkSelected);
      programFilesPanel.add(programFilesTheMicrosoftNetwork);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
  }

  //Unselect All Program Files Object except for Plus!
  public void C_ProgramFilesObjectsUnselectMethodC() {
    if (accessoriesSelected.getParent() != null) {
      programFilesPanel.remove(accessoriesSelected);
      programFilesPanel.add(accessories);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (microsoftExchangeSelected.getParent() != null) {
      programFilesPanel.remove(microsoftExchangeSelected);
      programFilesPanel.add(microsoftExchange);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (programFilesTheMicrosoftNetworkSelected.getParent() != null) {
      programFilesPanel.remove(programFilesTheMicrosoftNetworkSelected);
      programFilesPanel.add(programFilesTheMicrosoftNetwork);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
  }

  //Unselect All Program Files Object except for The Microsoft Network
  public void C_ProgramFilesObjectsUnselectMethodD() {
    if (accessoriesSelected.getParent() != null) {
      programFilesPanel.remove(accessoriesSelected);
      programFilesPanel.add(accessories);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (microsoftExchangeSelected.getParent() != null) {
      programFilesPanel.remove(microsoftExchangeSelected);
      programFilesPanel.add(microsoftExchange);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
    if (plusSelected.getParent() != null) {
      programFilesPanel.remove(plusSelected);
      programFilesPanel.add(plus);
      programFilesPanel.revalidate();
      programFilesPanel.repaint();
    }
  }

  public void C_WindowsObjectsMethod() {

  }

  public void playDosGameC_UnselectMethod() {
    if (programFilesSelected.getParent() != null) {
      playDosGameC_Panel.remove(programFilesSelected);
      playDosGameC_Panel.add(programFiles);
      playDosGameC_Panel.revalidate();
      playDosGameC_Panel.repaint();
    }
    if (windowsSelected.getParent() != null) {
      playDosGameC_Panel.remove(windowsSelected);
      playDosGameC_Panel.add(windows);
      playDosGameC_Panel.revalidate();
      playDosGameC_Panel.repaint();
    }
    if (commandSelected.getParent() != null) {
      playDosGameC_Panel.remove(commandSelected);
      playDosGameC_Panel.add(command);
      playDosGameC_Panel.revalidate();
      playDosGameC_Panel.repaint();
    }
  }

  public void myComputerControlPanelMethod() {
    /// Setting up Control Panel when Open
    controlPanelIcon = new ImageIcon(getClass().getClassLoader().getResource("ControlPanelIcon.png"));
    controlPanelOpen = new JFrame();
    controlPanelOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        controlPanelOpenUnselectMethod();
      }
    });
    controlPanelOpen.getContentPane().setBackground(white);
    controlPanelOpen.setAlwaysOnTop(true);
    controlPanelOpen.setBounds(50, 0, 570, 485);
    controlPanelOpen.setIconImage(controlPanelIcon.getImage());
    controlPanelOpen.setTitle("Control Panel");
    controlPanelPanel = new JPanel();
    controlPanelPanel.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }

      public void mousePressed(MouseEvent e) {
        controlPanelOpenUnselectMethod();
        controlPanelStatusText.setText("17 object(s)");
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          controlPanelOpenPopup.show(e.getComponent(), e.getX(), e.getY());
          controlPanelOpenUnselectMethod();
          controlPanelStatusText.setText("17 object(s)");
        }
      }
    });
    controlPanelPanel.setBackground(white);
    controlPanelPanel.setLayout(null);
    controlPanelPanel.add(addNewHardware);
    controlPanelPanel.add(addRemovePrograms);
    controlPanelPanel.add(dateTime);
    controlPanelPanel.add(display);
    controlPanelPanel.add(fonts);
    controlPanelPanel.add(internet);
    controlPanelPanel.add(joystick);
    controlPanelPanel.add(keyboard);
    controlPanelPanel.add(modems);
    controlPanelPanel.add(mouse);
    controlPanelPanel.add(multimedia);
    controlPanelPanel.add(network);
    controlPanelPanel.add(passwords);
    controlPanelPanel.add(controlPanelPrinters);
    controlPanelPanel.add(regionalSettings);
    controlPanelPanel.add(sounds);
    controlPanelPanel.add(system);
    controlPanelOpen.add(controlPanelPanel);
    /// Control Panel Menubar Menus
    controlPanelMenu = new JMenu[5];
    controlPanelMenu[0] = new JMenu("File");
    controlPanelMenu[1] = new JMenu("Edit");
    controlPanelMenu[2] = new JMenu("View");
    controlPanelMenu[3] = new JMenu("Help");
    controlPanelMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      controlPanelMenu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == controlPanelMenu[0]) {
            controlPanelStatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == controlPanelMenu[1]) {
            controlPanelStatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == controlPanelMenu[2]) {
            controlPanelStatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == controlPanelMenu[3]) {
            controlPanelStatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {}
      });
      controlPanelMenuBar.add(controlPanelMenu[i]);
    }
    controlPanelMenuItem = new JMenuItem[50];
    /// Control Panel Menubar File Menu
    controlPanelMenuItem[0] = new JMenuItem("Create Shortcut");
    controlPanelMenuItem[1] = new JMenuItem("Delete");
    controlPanelMenuItem[2] = new JMenuItem("Rename");
    controlPanelMenuItem[3] = new JMenuItem("Properties");
    for (int i = 0; i < 4; i++) {
      controlPanelMenu[0].add(controlPanelMenuItem[i]);
      controlPanelMenuItem[i].setEnabled(false);
    }
    controlPanelSeparator = new JSeparator[7];
    for (int i = 0; i < 7; i++) {
      controlPanelSeparator[i] = new JSeparator();
    }
    controlPanelMenu[0].add(controlPanelSeparator[0]);
    controlPanelMenuItem[4] = new JMenuItem("Close");
    controlPanelMenu[0].add(controlPanelMenuItem[4]);
    /// Control Panel Menubar Edit Menu
    controlPanelMenuItem[5] = new JMenuItem("Undo");
    controlPanelMenuItem[5].setAccelerator(ctrlZ);
    controlPanelMenuItem[5].setEnabled(false);
    controlPanelMenu[1].add(controlPanelMenuItem[5]);
    controlPanelMenu[1].add(controlPanelSeparator[1]);
    controlPanelMenuItem[6] = new JMenuItem("Cut");
    controlPanelMenuItem[6].setAccelerator(ctrlX);
    controlPanelMenuItem[7] = new JMenuItem("Copy");
    controlPanelMenuItem[7].setAccelerator(ctrlC);
    controlPanelMenuItem[8] = new JMenuItem("Paste");
    controlPanelMenuItem[8].setAccelerator(ctrlV);
    controlPanelMenuItem[9] = new JMenuItem("Paste Shortcut");
    for (int i = 6; i < 10; i++) {
      controlPanelMenu[1].add(controlPanelMenuItem[i]);
      controlPanelMenuItem[i].setEnabled(false);
    }
    controlPanelMenu[1].add(controlPanelSeparator[2]);
    controlPanelMenuItem[10] = new JMenuItem("Select All");
    controlPanelMenuItem[10].setAccelerator(ctrlA);
    controlPanelMenuItem[11] = new JMenuItem("Invert Selection");
    for (int i = 10; i < 12; i++) {
      controlPanelMenu[1].add(controlPanelMenuItem[i]);
    }
    /// Control Panel Menubar View Menu
    controlPanelCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    controlPanelCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    controlPanelCheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == controlPanelCheckBoxMenuItem[0]) {
          controlPanelStatusText.setText("Shows or hides the toolbar.");
        }
      }
    });
    controlPanelCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    controlPanelCheckBoxMenuItem[1].setSelected(true);
    controlPanelCheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == controlPanelCheckBoxMenuItem[1]) {
          controlPanelStatusText.setText("Shows or hides the status bar.");
        }
      }
    });
    for (int i = 0; i < 2; i++) {
      controlPanelCheckBoxMenuItem[i].addActionListener(this);
      controlPanelCheckBoxMenuItem[i].setFont(MSSansSerif16);
      controlPanelMenu[2].add(controlPanelCheckBoxMenuItem[i]);
    }
    controlPanelMenu[2].add(controlPanelSeparator[3]);
    controlPanelMenuItem[12] = new JMenuItem("Large Icons");
    controlPanelMenuItem[13] = new JMenuItem("Small Icons");
    controlPanelMenuItem[14] = new JMenuItem("List");
    controlPanelMenuItem[15] = new JMenuItem("Details");
    for (int i = 12; i < 16; i++) {
      controlPanelMenu[2].add(controlPanelMenuItem[i]);
    }
    controlPanelMenu[2].add(controlPanelSeparator[4]);
    controlPanelMenu[4] = new JMenu("Arrange Icons");
    controlPanelMenuItem[16] = new JMenuItem("by Drive Letter");
    controlPanelMenuItem[17] = new JMenuItem("by Type");
    controlPanelMenuItem[18] = new JMenuItem("by Size");
    controlPanelMenuItem[19] = new JMenuItem("by Free Space");
    controlPanelMenuItem[20] = new JMenuItem("Auto Arrange");
    for (int i = 16; i < 20; i++) {
      controlPanelMenu[4].add(controlPanelMenuItem[i]);
    }
    controlPanelMenu[4].add(controlPanelSeparator[5]);
    controlPanelMenu[4].add(controlPanelMenuItem[20]);
    controlPanelMenu[2].add(controlPanelMenu[4]);
    controlPanelMenuItem[21] = new JMenuItem("Line up Icons");
    controlPanelMenu[2].add(controlPanelMenuItem[20]);
    controlPanelMenu[2].add(controlPanelSeparator[6]);
    controlPanelMenuItem[22] = new JMenuItem("Refresh");
    controlPanelMenuItem[23] = new JMenuItem("Options...");
    for (int i = 22; i < 24; i++) {
      controlPanelMenu[2].add(controlPanelMenuItem[i]);
    }
    /// Control Panel Menubar Help Menu
    controlPanelMenuItem[24] = new JMenuItem("Help Topics");
    controlPanelMenu[3].add(controlPanelMenuItem[24]);
    controlPanelMenu[3].add(controlPanelSeparator[6]);
    controlPanelMenuItem[25] = new JMenuItem("About Windows 95");
    controlPanelMenu[3].add(controlPanelMenuItem[25]);
    /// Control Panel Status Bar and Control Panel Status Text
    controlPanelStatusBar = new JPanel();
    controlPanelStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    controlPanelOpen.add(controlPanelStatusBar, BorderLayout.SOUTH);
    controlPanelStatusBar.setBackground(gray);
    controlPanelStatusBar.setPreferredSize(new Dimension(controlPanelOpen.getWidth(), 24));
    controlPanelStatusBar.setLayout(new BoxLayout(controlPanelStatusBar, BoxLayout.X_AXIS));
    controlPanelStatusText = new JLabel("4 object(s)");
    controlPanelStatusText.setFont(MSSansSerif16);
    controlPanelStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    controlPanelStatusBar.add(controlPanelStatusText);
    /// Control Panel Status Bar and Control Panel Status Text
    controlPanelStatusBar = new JPanel();
    controlPanelStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    controlPanelStatusBar.setBackground(gray);
    controlPanelStatusBar.setPreferredSize(new Dimension(controlPanelOpen.getWidth(), 24));
    controlPanelStatusBar.setLayout(new BoxLayout(controlPanelStatusBar, BoxLayout.X_AXIS));
    controlPanelStatusText = new JLabel("17 object(s)");
    controlPanelStatusText.setFont(MSSansSerif16);
    controlPanelStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    controlPanelStatusBar.add(controlPanelStatusText);
    controlPanelOpen.add(controlPanelStatusBar, BorderLayout.SOUTH);
    for (int i = 0; i < 5; i++) {
      controlPanelMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 26; i++) {
      controlPanelMenuItem[i].addActionListener(this);
      controlPanelMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == controlPanelMenuItem[0]) {
            controlPanelStatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == controlPanelMenuItem[1]) {
            controlPanelStatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == controlPanelMenuItem[2]) {
            controlPanelStatusText.setText("Renames the selected item.");
          } else if (e.getSource() == controlPanelMenuItem[3]) {
            controlPanelStatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == controlPanelMenuItem[4]) {
            controlPanelStatusText.setText("Closes the window.");
          } else if (e.getSource() == controlPanelMenuItem[5]) {
            controlPanelStatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == controlPanelMenuItem[6]) {
            controlPanelStatusText.setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == controlPanelMenuItem[7]) {
            controlPanelStatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == controlPanelMenuItem[8]) {
            controlPanelStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == controlPanelMenuItem[9]) {
            controlPanelStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == controlPanelMenuItem[10]) {
            controlPanelStatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == controlPanelMenuItem[11]) {
            controlPanelStatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == controlPanelMenuItem[12]) {
            controlPanelStatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == controlPanelMenuItem[13]) {
            controlPanelStatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == controlPanelMenuItem[14]) {
            controlPanelStatusText.setText("Displays items in a list.");
          } else if (e.getSource() == controlPanelMenuItem[15]) {
            controlPanelStatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == controlPanelMenuItem[16]) {
            controlPanelStatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == controlPanelMenuItem[17]) {
            controlPanelStatusText.setText("Sorts items by type.");
          } else if (e.getSource() == controlPanelMenuItem[18]) {
            controlPanelStatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == controlPanelMenuItem[19]) {
            controlPanelStatusText.setText("Sorts items by available free space.");
          } else if (e.getSource() == controlPanelMenuItem[20]) {
            controlPanelStatusText.setText("Arranges the icons automatically.");
          } else if (e.getSource() == controlPanelMenuItem[21]) {
            controlPanelStatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == controlPanelMenuItem[22]) {
            controlPanelStatusText.setText("Refresh item information.");
          } else if (e.getSource() == controlPanelMenuItem[23]) {
            controlPanelStatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == controlPanelMenuItem[24]) {
            controlPanelStatusText.setText("Opens help.");
          } else if (e.getSource() == controlPanelMenuItem[25]) {
            controlPanelStatusText.setText("Displays program information, version number, and copyright.");
          }
        }
      });
      controlPanelMenuItem[i].setFont(MSSansSerif16);
      controlPanelOpen.add(controlPanelMenuBar, BorderLayout.NORTH);
    }
    /// Adding MouseListener to Control Panel Separators
    for (int i = 0; i < 7; i++) {
      controlPanelSeparator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 7; i++) {
            if (e.getSource() == controlPanelSeparator[i]) {
              controlPanelStatusText.setText("");
            }
          }
        }
      });
    }
    // Implementing Methods of Control Panel Objects
    controlPanelAddNewHardwareMethod();
    controlPanelAddRemoveProgramsMethod();
    controlPanelFontsMethod();
    controlPanelInternetMethod();
    controlPanelJoystickMethod();
    controlPanelKeyboardMethod();
    controlPanelModemsMethod();
    controlPanelMouseMethod();
    controlPanelMultimediaMethod();
    controlPanelNetworkMethod();
    controlPanelPasswordsMethod();
    controlPanelRegionalSettingsMethod();
    controlPanelSoundsMethod();
    controlPanelSystemMethod();
  }

  public void controlPanelOpenUnselectMethod() {
    if (addNewHardwareSelected.getParent() != null) {
      controlPanelPanel.remove(addNewHardwareSelected);
      controlPanelPanel.add(addNewHardware);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (addRemoveProgramsSelected.getParent() != null) {
      controlPanelPanel.remove(addRemoveProgramsSelected);
      controlPanelPanel.add(addRemovePrograms);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (dateTimeSelected.getParent() != null) {
      controlPanelPanel.remove(dateTimeSelected);
      controlPanelPanel.add(dateTime);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (displaySelected.getParent() != null) {
      controlPanelPanel.remove(displaySelected);
      controlPanelPanel.add(display);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (fontsSelected.getParent() != null) {
      controlPanelPanel.remove(fontsSelected);
      controlPanelPanel.add(fonts);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (internetSelected.getParent() != null) {
      controlPanelPanel.remove(internetSelected);
      controlPanelPanel.add(internet);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (joystickSelected.getParent() != null) {
      controlPanelPanel.remove(joystickSelected);
      controlPanelPanel.add(joystick);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (keyboardSelected.getParent() != null) {
      controlPanelPanel.remove(keyboardSelected);
      controlPanelPanel.add(keyboard);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (modemsSelected.getParent() != null) {
      controlPanelPanel.remove(modemsSelected);
      controlPanelPanel.add(modems);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (mouseSelected.getParent() != null) {
      controlPanelPanel.remove(mouseSelected);
      controlPanelPanel.add(mouse);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (multimediaSelected.getParent() != null) {
      controlPanelPanel.remove(multimediaSelected);
      controlPanelPanel.add(multimedia);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (networkSelected.getParent() != null) {
      controlPanelPanel.remove(networkSelected);
      controlPanelPanel.add(network);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (passwordsSelected.getParent() != null) {
      controlPanelPanel.remove(passwordsSelected);
      controlPanelPanel.add(passwords);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (controlPanelPrintersSelected.getParent() != null) {
      controlPanelPanel.remove(controlPanelPrintersSelected);
      controlPanelPanel.add(controlPanelPrinters);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (regionalSettingsSelected.getParent() != null) {
      controlPanelPanel.remove(regionalSettingsSelected);
      controlPanelPanel.add(regionalSettings);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (soundsSelected.getParent() != null) {
      controlPanelPanel.remove(soundsSelected);
      controlPanelPanel.add(sounds);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
    if (systemSelected.getParent() != null) {
      controlPanelPanel.remove(systemSelected);
      controlPanelPanel.add(system);
      controlPanelPanel.revalidate();
      controlPanelPanel.repaint();
    }
  }

  public void controlPanelAddNewHardwareMethod() {
    addNewHardwareWizard = new JDialog();
    addNewHardwareWizard.setAlwaysOnTop(true);
    addNewHardwareWizard.setBounds(50, 0, 600, 450);
    addNewHardwareWizard.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    addNewHardwareWizard.setLayout(null);
    addNewHardwareWizard.setResizable(false);
    addNewHardwareWizard.setTitle("Add New Hardware Wizard");
    addNewHardwareWizardText = new JLabel[6];
    addNewHardwareWizardText[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardText1.png")));
    addNewHardwareWizardText[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardText2.png")));
    addNewHardwareWizardText[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardText3.png")));
    addNewHardwareWizardText[3] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("")));
    addNewHardwareWizardText[4] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardNoText1.png")));
    addNewHardwareWizardText[0].setBounds(191, 20, 392, 84);
    addNewHardwareWizardText[1].setBounds(191, 20, 400, 159);
    addNewHardwareWizardText[2].setBounds(191, 20, 389, 215);
    addNewHardwareWizardText[4].setBounds(191, 20, 310, 73);
    addNewHardwareWizard.add(addNewHardwareWizardText[0]);
    addNewHardwareWizardImage = new JLabel[2];
    addNewHardwareWizardImage[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardImage1.png")));
    addNewHardwareWizardImage[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardImage2.png")));
    for (int i = 0; i < 2; i++) {
      addNewHardwareWizardImage[i].setBounds(20, 20, 161, 315);
    }
    addNewHardwareWizard.add(addNewHardwareWizardImage[0]);
    addNewHardwareWizardSeparator = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddNewHardwareWizardSeparator.png")));
    addNewHardwareWizardSeparator.setBounds(20, 350, 550, 18);
    addNewHardwareWizard.add(addNewHardwareWizardSeparator);
    addNewHardwareWizardButton = new JButton[3];
    addNewHardwareWizardButton[0] = new JButton("< Back");
    addNewHardwareWizardButton[1] = new JButton("Next >");
    addNewHardwareWizardButton[2] = new JButton("Cancel");
    addNewHardwareWizardButton[0].setBounds(260, 370, 105, 30);
    addNewHardwareWizardButton[1].setBounds(365, 370, 105, 30);
    addNewHardwareWizardButton[2].setBounds(480, 370, 105, 30);
    addNewHardwareWizardButton[0].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      addNewHardwareWizardButton[i].addActionListener(this);
      addNewHardwareWizardButton[i].setFont(MSSansSerif14);
      addNewHardwareWizard.add(addNewHardwareWizardButton[i]);
    }
    addNewHardwareWizardRadioButton = new JRadioButton[2];
    addNewHardwareWizardRadioButton[0] = new JRadioButton("Yes (Recommended)");
    addNewHardwareWizardRadioButton[1] = new JRadioButton("No");
    addNewHardwareWizardRadioButton[0].setBounds(230, 200, 160, 30);
    addNewHardwareWizardRadioButton[1].setBounds(230, 235, 100, 30);
    addNewHardwareWizardRadioButton[0].setSelected(true);
    addNewHardwareWizardButtonGroup = new ButtonGroup();
    for (int i = 0; i < 2; i++) {
      addNewHardwareWizardRadioButton[i].addActionListener(this);
      addNewHardwareWizardRadioButton[i].setFont(MSSansSerif14);
      addNewHardwareWizardButtonGroup.add(addNewHardwareWizardRadioButton[i]);
    }
    hardwareType = new String[17];
    hardwareType[0] = "CD-ROM controllers";
    hardwareType[1] = "Display adapters";
    hardwareType[2] = "Floppy disk controllers";
    hardwareType[3] = "Hard disk controllers";
    hardwareType[4] = "Keyboard";
    hardwareType[5] = "Memory Technology Drivers (MTDs)";
    hardwareType[6] = "Modem";
    hardwareType[7] = "Mouse";
    hardwareType[8] = "Multi-function adapters";
    hardwareType[9] = "Network adapters";
    hardwareType[10] = "Other devices";
    hardwareType[11] = "PCMCIA socket";
    hardwareType[12] = "Ports (COM & LPT)";
    hardwareType[13] = "Printer";
    hardwareType[14] = "SCSI controllers";
    hardwareType[15] = "Sound, video and game controllers";
    hardwareType[16] = "System devices";
    hardwareTypesList = new JList < Object > (hardwareType);
    hardwareTypesList.setFont(MSSansSerif16);
    hardwareTypesList.setVisibleRowCount(10);
    hardwareTypesScrollPane = new JScrollPane(hardwareTypesList);
    hardwareTypesScrollPane.setBounds(205, 90, 300, 245);
  }

  public void controlPanelAddRemoveProgramsMethod() {
    addRemoveProgramsProperties = new JDialog();
    addRemoveProgramsProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        addRemoveProgramsPropertiesInstall.dispose();
        addRemoveProgramsPropertiesDetails.dispose();
        addRemoveProgramsPropertiesHaveDisk.dispose();
        addRemoveProgramsPropertiesTabbedPane.setSelectedIndex(0);
      }
    });
    addRemoveProgramsProperties.setAlwaysOnTop(true);
    addRemoveProgramsProperties.setBounds(50, 0, 590, 675);
    addRemoveProgramsProperties.setLayout(null);
    addRemoveProgramsProperties.setResizable(false);
    addRemoveProgramsProperties.setTitle("Add/Remove Programs Properties");
    addRemoveProgramsPropertiesPanel = new JPanel[4];
    for (int i = 0; i < 4; i++) {
      addRemoveProgramsPropertiesPanel[i] = new JPanel();
      addRemoveProgramsPropertiesPanel[i].setLayout(null);
    }
    addRemoveProgramsPropertiesTabbedPane = new JTabbedPane();
    addRemoveProgramsPropertiesTabbedPane.addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent e) {
        if (addRemoveProgramsPropertiesTabbedPane.getSelectedIndex() == 1) {
          addRemoveProgramsProperties.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          try {
            Thread.sleep(500);
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
          addRemoveProgramsProperties.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
      }
    });
    addRemoveProgramsPropertiesTabbedPane.setFont(MSSansSerif16);
    addRemoveProgramsPropertiesTabbedPane.addTab("Install/Uninstall", addRemoveProgramsPropertiesPanel[1]);
    addRemoveProgramsPropertiesTabbedPane.addTab("Windows Setup", addRemoveProgramsPropertiesPanel[2]);
    addRemoveProgramsPropertiesTabbedPane.addTab("Startup Disk", addRemoveProgramsPropertiesPanel[3]);
    addRemoveProgramsPropertiesPanel[0].add(addRemoveProgramsPropertiesTabbedPane);
    addRemoveProgramsPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    addRemoveProgramsPropertiesPanel[0].setBounds(10, 15, 550, 575);
    addRemoveProgramsPropertiesPanel[0].setLayout(new GridLayout());
    addRemoveProgramsProperties.add(addRemoveProgramsPropertiesPanel[0]);
    addRemoveProgramsPropertiesButton = new JButton[8];
    addRemoveProgramsPropertiesButton[0] = new JButton("OK");
    addRemoveProgramsPropertiesButton[1] = new JButton("Cancel");
    addRemoveProgramsPropertiesButton[2] = new JButton("Apply");
    addRemoveProgramsPropertiesButton[3] = new JButton("Install...");
    addRemoveProgramsPropertiesButton[4] = new JButton("Add/Remove...");
    addRemoveProgramsPropertiesButton[5] = new JButton("Details...");
    addRemoveProgramsPropertiesButton[6] = new JButton("Have Disk...");
    addRemoveProgramsPropertiesButton[7] = new JButton("Create Disk...");
    addRemoveProgramsPropertiesButton[0].setBounds(190, 600, 120, 33);
    addRemoveProgramsPropertiesButton[1].setBounds(320, 600, 120, 33);
    addRemoveProgramsPropertiesButton[2].setBounds(450, 600, 120, 33);
    addRemoveProgramsPropertiesButton[3].setBounds(370, 90, 150, 33);
    addRemoveProgramsPropertiesButton[4].setBounds(370, 475, 150, 33);
    addRemoveProgramsPropertiesButton[5].setBounds(400, 430, 120, 33);
    addRemoveProgramsPropertiesButton[6].setBounds(400, 500, 120, 33);
    addRemoveProgramsPropertiesButton[7].setBounds(370, 100, 150, 33);
    addRemoveProgramsPropertiesButton[2].setEnabled(false);
    addRemoveProgramsPropertiesButton[4].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      addRemoveProgramsProperties.add(addRemoveProgramsPropertiesButton[i]);
    }
    for (int i = 3; i < 5; i++) {
      addRemoveProgramsPropertiesPanel[1].add(addRemoveProgramsPropertiesButton[i]);
    }
    for (int i = 5; i < 7; i++) {
      addRemoveProgramsPropertiesPanel[2].add(addRemoveProgramsPropertiesButton[i]);
    }
    addRemoveProgramsPropertiesPanel[3].add(addRemoveProgramsPropertiesButton[7]);
    for (int i = 0; i < 8; i++) {
      addRemoveProgramsPropertiesButton[i].addActionListener(this);
      addRemoveProgramsPropertiesButton[i].setFont(MSSansSerif16);
    }
    addRemoveProgramsPropertiesLabel = new JLabel[7];
    for (int i = 0; i < 6; i++) {
      addRemoveProgramsPropertiesLabel[i] = new JLabel(new ImageIcon(
        getClass().getClassLoader().getResource("AddRemoveProgramsText" + String.valueOf(i + 1) + ".png")));
    }
    addRemoveProgramsPropertiesLabel[6] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddRemoveProgramsCreateDiskProgressBar.png")));
    addRemoveProgramsPropertiesLabel[0].setBounds(5, -50, 500, 200);
    addRemoveProgramsPropertiesLabel[1].setBounds(-10, 100, 550, 200);
    addRemoveProgramsPropertiesLabel[2].setBounds(10, -50, 500, 200);
    addRemoveProgramsPropertiesLabel[3].setBounds(7, 230, 500, 200);
    addRemoveProgramsPropertiesLabel[4].setBounds(-70, 330, 500, 200);
    addRemoveProgramsPropertiesLabel[5].setBounds(10, -50, 500, 200);
    addRemoveProgramsPropertiesLabel[6].setBounds(15, 125, 493, 63);
    for (int i = 0; i < 2; i++) {
      addRemoveProgramsPropertiesPanel[1].add(addRemoveProgramsPropertiesLabel[i]);
    }
    addRemoveProgramsPropertiesList = new JList[3];
    addRemoveSoftware = new String[2];
    addRemoveSoftware[0] = "S3 Refresh";
    addRemoveProgramsPropertiesList[0] = new JList < Object > (addRemoveSoftware);
    addRemoveProgramsPropertiesList[0].addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        if (addRemoveProgramsPropertiesList[0].getSelectedValue().toString() == addRemoveSoftware[0]) {
          addRemoveProgramsPropertiesButton[4].setEnabled(true);
        }
      }
    });
    addRemoveProgramsPropertiesList[0].setBorder(BorderFactory.createRaisedBevelBorder());
    addRemoveProgramsPropertiesList[0].setBounds(25, 275, 475, 175);
    addRemoveProgramsPropertiesPanel[1].add(addRemoveProgramsPropertiesList[0]);
    windowsSetupComponent = new String[9];
    windowsSetupComponent[0] = "Accessibility Options                                                             0.0 MB";
    windowsSetupComponent[1] = "Accessories                                                                          2.9 MB";
    windowsSetupComponent[2] = "Communications                                                                   0.0 MB";
    windowsSetupComponent[3] = "Disk Tools                                                                            0.0 MB";
    windowsSetupComponent[4] = "Microsoft Exchange                                                              0.0 MB";
    windowsSetupComponent[5] = "Microsoft Fax                                                                       0.0 MB";
    windowsSetupComponent[6] = "Multilanguage Support                                                          0.0 MB";
    windowsSetupComponent[7] = "Multimedia                                                                           0.9 MB";
    windowsSetupComponent[8] = "The Microsoft Network                                                          0.0 MB";
    addRemoveProgramsPropertiesList[1] = new JList < Object > (windowsSetupComponent);
    addRemoveProgramsPropertiesList[1].setVisibleRowCount(5);
    addRemoveProgramsPropertiesScrollPane = new JScrollPane[2];
    addRemoveProgramsPropertiesScrollPane[0] = new JScrollPane(addRemoveProgramsPropertiesList[1]);
    addRemoveProgramsPropertiesScrollPane[0].setBounds(20, 100, 500, 150);
    addRemoveProgramsPropertiesPanel[2].add(addRemoveProgramsPropertiesScrollPane[0]);
    for (int i = 2; i < 5; i++) {
      addRemoveProgramsPropertiesPanel[2].add(addRemoveProgramsPropertiesLabel[i]);
    }
    addRemoveProgramsPropertiesPanel[3].add(addRemoveProgramsPropertiesLabel[5]);
    addRemoveProgramsPropertiesDialogButton = new JButton[10];
    addRemoveProgramsPropertiesDialogLabel = new JLabel[8];
    // Add/Remove Programs Properties -> Install/Uninstall -> Install...
    addRemoveProgramsPropertiesInstall = new JDialog();
    addRemoveProgramsPropertiesInstall.setAlwaysOnTop(true);
    addRemoveProgramsPropertiesInstall.setBounds(50, 0, 605, 475);
    addRemoveProgramsPropertiesInstall.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    addRemoveProgramsPropertiesInstall.setLayout(null);
    addRemoveProgramsPropertiesInstall.setResizable(false);
    addRemoveProgramsPropertiesInstall.setTitle("Install Program From Floppy Disk or CD-ROM");
    addRemoveProgramsPropertiesDialogLabel[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallProgramFromFloppyDiskOrCDROMImage.png")));
    addRemoveProgramsPropertiesDialogLabel[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallProgramFromFloppyDiskOrCDROMText1.png")));
    addRemoveProgramsPropertiesDialogLabel[2] = new JLabel(new ImageIcon(
      getClass().getClassLoader().getResource("InstallProgramFromFloppyDiskOrCDROMSeparator.png")));
    addRemoveProgramsPropertiesDialogLabel[3] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallProgramFromFloppyDiskOrCDROMText2.png")));
    addRemoveProgramsPropertiesDialogLabel[0].setBounds(5, 5, 165, 317);
    addRemoveProgramsPropertiesDialogLabel[1].setBounds(180, 5, 390, 35);
    addRemoveProgramsPropertiesDialogLabel[2].setBounds(5, 375, 587, 10);
    addRemoveProgramsPropertiesDialogLabel[3].setBounds(180, 5, 371, 135);
    for (int i = 0; i < 3; i++) {
      addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesDialogLabel[i]);
    }
    addRemoveProgramsPropertiesDialogButton[0] = new JButton("< Back");
    addRemoveProgramsPropertiesDialogButton[1] = new JButton("Next >");
    addRemoveProgramsPropertiesDialogButton[2] = new JButton("Cancel");
    addRemoveProgramsPropertiesDialogButton[3] = new JButton("Browse...");
    addRemoveProgramsPropertiesDialogButton[0].setBounds(270, 400, 100, 33);
    addRemoveProgramsPropertiesDialogButton[1].setBounds(370, 400, 100, 33);
    addRemoveProgramsPropertiesDialogButton[2].setBounds(490, 400, 100, 33);
    addRemoveProgramsPropertiesDialogButton[3].setBounds(180, 190, 100, 33);
    addRemoveProgramsPropertiesDialogButton[0].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesDialogButton[i]);
    }
    addRemoveProgramsPropertiesTextField = new JTextField();
    addRemoveProgramsPropertiesTextField.getDocument().addDocumentListener(new DocumentListener() {
      public void insertUpdate(DocumentEvent e) {
        if (addRemoveProgramsPropertiesTextField.getText().trim().length() != 0) {
          addRemoveProgramsPropertiesDialogButton[1].setEnabled(true);
        } else if (addRemoveProgramsPropertiesTextField.getText().trim().length() == 0) {
          addRemoveProgramsPropertiesDialogButton[1].setEnabled(false);
        }
      }

      public void removeUpdate(DocumentEvent e) {

      }

      public void changedUpdate(DocumentEvent e) {

      }
    });
    addRemoveProgramsPropertiesTextField.setBounds(180, 150, 300, 30);
    // Add/Remove Programs Properties -> Windows Setup -> Details...
    addRemoveProgramsPropertiesDetails = new JDialog();
    addRemoveProgramsPropertiesDetails.setAlwaysOnTop(true);
    addRemoveProgramsPropertiesDetails.setBounds(50, 0, 510, 560);
    addRemoveProgramsPropertiesDetails.setLayout(null);
    addRemoveProgramsPropertiesDetails.setResizable(false);
    addRemoveProgramsPropertiesDetails.setTitle("Accessibility Options");
    addRemoveProgramsPropertiesDialogLabel[5] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddRemoveProgramsDetailsText1.png")));
    addRemoveProgramsPropertiesDialogLabel[6] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddRemoveProgramsDetailsText2.png")));
    addRemoveProgramsPropertiesDialogLabel[5].setBounds(5, 5, 447, 82);
    addRemoveProgramsPropertiesDialogLabel[6].setBounds(5, 245, 458, 136);
    for (int i = 5; i < 7; i++) {
      addRemoveProgramsPropertiesDetails.add(addRemoveProgramsPropertiesDialogLabel[i]);
    }
    accessibilityOptionsComponent = new String[2];
    accessibilityOptionsComponent[0] = "Accessibility Options                                              0.3 MB";
    addRemoveProgramsPropertiesList[2] = new JList < Object > (accessibilityOptionsComponent);
    addRemoveProgramsPropertiesScrollPane[1] = new JScrollPane(addRemoveProgramsPropertiesList[2]);
    addRemoveProgramsPropertiesScrollPane[1].setBounds(5, 90, 450, 150);
    addRemoveProgramsPropertiesDetails.add(addRemoveProgramsPropertiesScrollPane[1]);
    for (int i = 0; i < 2; i++) {
      addRemoveProgramsPropertiesScrollPane[i].setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    }
    for (int i = 0; i < 3; i++) {
      addRemoveProgramsPropertiesList[i].setFont(MSSansSerif16);
    }
    addRemoveProgramsPropertiesDialogButton[4] = new JButton("OK");
    addRemoveProgramsPropertiesDialogButton[5] = new JButton("Cancel");
    addRemoveProgramsPropertiesDialogButton[6] = new JButton("Details...");
    addRemoveProgramsPropertiesDialogButton[4].setBounds(270, 470, 100, 33);
    addRemoveProgramsPropertiesDialogButton[5].setBounds(380, 470, 100, 33);
    addRemoveProgramsPropertiesDialogButton[6].setBounds(350, 420, 100, 33);
    addRemoveProgramsPropertiesDialogButton[6].setEnabled(false);
    for (int i = 4; i < 7; i++) {
      addRemoveProgramsPropertiesDetails.add(addRemoveProgramsPropertiesDialogButton[i]);
    }
    // Add/Remove Programs Properties -> Windows Setup -> Have Disk...
    addRemoveProgramsPropertiesHaveDisk = new JDialog();
    addRemoveProgramsPropertiesHaveDisk.setAlwaysOnTop(true);
    addRemoveProgramsPropertiesHaveDisk.setBounds(50, 0, 550, 275);
    addRemoveProgramsPropertiesHaveDisk.setLayout(null);
    addRemoveProgramsPropertiesHaveDisk.setResizable(false);
    addRemoveProgramsPropertiesHaveDisk.setTitle("Install From Disk");
    addRemoveProgramsPropertiesDialogLabel[7] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddRemoveProgramsHaveDiskText.png")));
    addRemoveProgramsPropertiesDialogLabel[7].setBounds(0, 0, 381, 130);
    addRemoveProgramsPropertiesHaveDisk.add(addRemoveProgramsPropertiesDialogLabel[7]);
    addRemoveProgramsPropertiesDialogButton[7] = new JButton("OK");
    addRemoveProgramsPropertiesDialogButton[8] = new JButton("Cancel");
    addRemoveProgramsPropertiesDialogButton[9] = new JButton("Browse...");
    addRemoveProgramsPropertiesDialogButton[7].setBounds(400, 10, 100, 33);
    addRemoveProgramsPropertiesDialogButton[8].setBounds(400, 50, 100, 33);
    addRemoveProgramsPropertiesDialogButton[9].setBounds(400, 150, 100, 33);
    for (int i = 7; i < 10; i++) {
      addRemoveProgramsPropertiesHaveDisk.add(addRemoveProgramsPropertiesDialogButton[i]);
    }
    for (int i = 0; i < 10; i++) {
      addRemoveProgramsPropertiesDialogButton[i].addActionListener(this);
      addRemoveProgramsPropertiesDialogButton[i].setFont(MSSansSerif15);
    }
    addRemoveProgramsPropertiesComboBox = new JComboBox < String > ();
    addRemoveProgramsPropertiesComboBox.setBounds(60, 150, 300, 30);
    addRemoveProgramsPropertiesComboBox.setFont(MSSansSerif16);
    addRemoveProgramsPropertiesComboBox.addItem("A:\\");
    addRemoveProgramsPropertiesComboBox.addItem("D:\\S3TRIO64");
    addRemoveProgramsPropertiesHaveDisk.add(addRemoveProgramsPropertiesComboBox);
  }

  public void controlPanelFontsMethod() {
    controlPanelFontsOpen = new JFrame();
    controlPanelFontsOpen.setAlwaysOnTop(true);
    controlPanelFontsOpen.setBounds(50, 0, 500, 500);
    controlPanelFontsOpen.setTitle("Fonts");
    controlPanelFontsPanel = new JPanel();
    controlPanelFontsPanel.setBackground(white);
    controlPanelFontsOpen.add(controlPanelFontsPanel);
    controlPanelFontsMenu = new JMenu[8];
    controlPanelFontsMenu[0] = new JMenu("File");
    controlPanelFontsMenu[1] = new JMenu("Edit");
    controlPanelFontsMenu[2] = new JMenu("View");
    controlPanelFontsMenu[3] = new JMenu("Help");
    controlPanelFontsMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      controlPanelFontsMenu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == controlPanelFontsMenu[0]) {
            controlPanelFontsStatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == controlPanelFontsMenu[1]) {
            controlPanelFontsStatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == controlPanelFontsMenu[2]) {
            controlPanelFontsStatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == controlPanelFontsMenu[3]) {
            controlPanelFontsStatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {

        }
      });
      controlPanelFontsMenuBar.add(controlPanelFontsMenu[i]);
    }
    controlPanelFontsMenu[4] = new JMenu("New");
    controlPanelFontsMenu[0].add(controlPanelFontsMenu[4]);
    controlPanelFontsMenuItem = new JMenuItem[40];
    controlPanelFontsMenuItem[0] = new JMenuItem("Folder");
    controlPanelFontsMenuItem[1] = new JMenuItem("Shortcut");
    for (int i = 0; i < 2; i++) {
      controlPanelFontsMenu[4].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsSeparator = new JSeparator[10];
    for (int i = 0; i < 10; i++) {
      controlPanelFontsSeparator[i] = new JSeparator();
    }
    controlPanelFontsMenu[4].add(controlPanelFontsSeparator[0]);
    controlPanelFontsMenuItem[2] = new JMenuItem("Wave Sound");
    controlPanelFontsMenuItem[3] = new JMenuItem("Text Document");
    controlPanelFontsMenuItem[4] = new JMenuItem("WordPad Document");
    controlPanelFontsMenuItem[5] = new JMenuItem("Bitmap Image");
    for (int i = 2; i < 6; i++) {
      controlPanelFontsMenu[4].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsMenu[0].add(controlPanelFontsSeparator[1]);
    controlPanelFontsMenuItem[6] = new JMenuItem("Create Shortcut");
    controlPanelFontsMenuItem[7] = new JMenuItem("Delete");
    controlPanelFontsMenuItem[8] = new JMenuItem("Rename");
    controlPanelFontsMenuItem[9] = new JMenuItem("Properties");
    for (int i = 6; i < 10; i++) {
      controlPanelFontsMenuItem[i].setEnabled(false);
      controlPanelFontsMenu[0].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsMenu[0].add(controlPanelFontsSeparator[2]);
    controlPanelFontsMenuItem[10] = new JMenuItem("Close");
    controlPanelFontsMenu[0].add(controlPanelFontsMenuItem[10]);
    controlPanelFontsMenuItem[11] = new JMenuItem("Undo");
    controlPanelFontsMenuItem[11].setAccelerator(ctrlZ);
    controlPanelFontsMenu[1].add(controlPanelFontsMenuItem[11]);
    controlPanelFontsMenu[1].add(controlPanelFontsSeparator[3]);
    controlPanelFontsMenuItem[12] = new JMenuItem("Cut");
    controlPanelFontsMenuItem[12].setAccelerator(ctrlX);
    controlPanelFontsMenuItem[13] = new JMenuItem("Copy");
    controlPanelFontsMenuItem[13].setAccelerator(ctrlC);
    controlPanelFontsMenuItem[14] = new JMenuItem("Paste");
    controlPanelFontsMenuItem[14].setAccelerator(ctrlV);
    controlPanelFontsMenuItem[15] = new JMenuItem("Paste Shortcut");
    for (int i = 11; i < 16; i++) {
      controlPanelFontsMenuItem[i].setEnabled(false);
    }
    for (int i = 12; i < 16; i++) {
      controlPanelFontsMenu[1].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsMenu[1].add(controlPanelFontsSeparator[4]);
    controlPanelFontsMenuItem[16] = new JMenuItem("Select All");
    controlPanelFontsMenuItem[16].setAccelerator(ctrlA);
    controlPanelFontsMenuItem[17] = new JMenuItem("Invert Selection");
    for (int i = 16; i < 18; i++) {
      controlPanelFontsMenu[1].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    controlPanelFontsCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    controlPanelFontsCheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == controlPanelFontsCheckBoxMenuItem[0]) {
          controlPanelFontsStatusText.setText("Shows or hides the toolbar.");
        }
      }
    });
    controlPanelFontsCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    controlPanelFontsCheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == controlPanelFontsCheckBoxMenuItem[1]) {
          controlPanelFontsStatusText.setText("Shows or hides the status bar.");
        }
      }
    });
    controlPanelFontsCheckBoxMenuItem[1].setSelected(true);
    for (int i = 0; i < 2; i++) {
      controlPanelFontsCheckBoxMenuItem[i].addActionListener(this);
      controlPanelFontsCheckBoxMenuItem[i].setFont(MSSansSerif16);
      controlPanelFontsMenu[2].add(controlPanelFontsCheckBoxMenuItem[i]);
    }
    controlPanelFontsMenu[2].add(controlPanelFontsSeparator[5]);
    controlPanelFontsMenuItem[18] = new JMenuItem("Large Icons");
    controlPanelFontsMenuItem[19] = new JMenuItem("Small Icons");
    controlPanelFontsMenuItem[20] = new JMenuItem("List");
    controlPanelFontsMenuItem[21] = new JMenuItem("Details");
    for (int i = 18; i < 22; i++) {
      controlPanelFontsMenu[2].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsMenu[2].add(controlPanelFontsSeparator[6]);
    controlPanelFontsMenu[5] = new JMenu("Arrange Icons");
    controlPanelFontsMenu[2].add(controlPanelFontsMenu[5]);
    controlPanelFontsMenuItem[22] = new JMenuItem("by Name");
    controlPanelFontsMenuItem[23] = new JMenuItem("by Type");
    controlPanelFontsMenuItem[24] = new JMenuItem("by Size");
    controlPanelFontsMenuItem[25] = new JMenuItem("by Date");
    for (int i = 22; i < 26; i++) {
      controlPanelFontsMenu[5].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsMenu[5].add(controlPanelFontsSeparator[7]);
    controlPanelFontsMenuItem[26] = new JMenuItem("Auto Arrange");
    controlPanelFontsMenu[5].add(controlPanelFontsMenuItem[26]);
    controlPanelFontsMenuItem[27] = new JMenuItem("Line up Icons");
    for (int i = 26; i < 28; i++) {
      controlPanelFontsMenuItem[i].setEnabled(false);
    }
    controlPanelFontsMenu[2].add(controlPanelFontsMenuItem[27]);
    controlPanelFontsMenu[2].add(controlPanelFontsSeparator[8]);
    controlPanelFontsMenuItem[28] = new JMenuItem("Refresh");
    controlPanelFontsMenuItem[29] = new JMenuItem("Options...");
    for (int i = 28; i < 30; i++) {
      controlPanelFontsMenu[2].add(controlPanelFontsMenuItem[i]);
    }
    controlPanelFontsMenuItem[30] = new JMenuItem("Help Topics");
    controlPanelFontsMenu[3].add(controlPanelFontsMenuItem[30]);
    controlPanelFontsMenu[3].add(controlPanelFontsSeparator[9]);
    controlPanelFontsMenuItem[31] = new JMenuItem("About Windows 95");
    controlPanelFontsMenu[3].add(controlPanelFontsMenuItem[31]);
    for (int i = 0; i < 6; i++) {
      controlPanelFontsMenu[i].setFont(MSSansSerif16);
    }
    /// Control Panel Status Bar and Control Panel Status Text
    controlPanelFontsStatusBar = new JPanel();
    controlPanelFontsStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    controlPanelFontsStatusBar.setBackground(gray);
    controlPanelFontsStatusBar.setPreferredSize(new Dimension(controlPanelFontsOpen.getWidth(), 24));
    controlPanelFontsStatusBar.setLayout(new BoxLayout(controlPanelFontsStatusBar, BoxLayout.X_AXIS));
    controlPanelFontsStatusText = new JLabel("35 object(s)");
    controlPanelFontsStatusText.setFont(MSSansSerif16);
    controlPanelFontsStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    controlPanelFontsStatusBar.add(controlPanelFontsStatusText);
    controlPanelFontsOpen.add(controlPanelFontsStatusBar, BorderLayout.SOUTH);
    for (int i = 0; i < 32; i++) {
      controlPanelFontsMenuItem[i].addActionListener(this);
      controlPanelFontsMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == controlPanelFontsMenuItem[0]) {
            controlPanelFontsStatusText.setText("Creates a new, empty folder.");
          }
          if (e.getSource() == controlPanelFontsMenuItem[1]) {
            controlPanelFontsStatusText.setText("Creates a new, empty shortcut.");
          }
          for (int i = 2; i < 6; i++) {
            if (e.getSource() == controlPanelFontsMenuItem[i]) {
              controlPanelFontsStatusText.setText("");
            }
          }
          if (e.getSource() == controlPanelFontsMenuItem[6]) {
            controlPanelFontsStatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == controlPanelFontsMenuItem[7]) {
            controlPanelFontsStatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == controlPanelFontsMenuItem[8]) {
            controlPanelFontsStatusText.setText("Renames the selected item.");
          } else if (e.getSource() == controlPanelFontsMenuItem[9]) {
            controlPanelFontsStatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == controlPanelFontsMenuItem[10]) {
            controlPanelFontsStatusText.setText("Closes the window.");
          } else if (e.getSource() == controlPanelFontsMenuItem[11]) {
            controlPanelFontsStatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == controlPanelFontsMenuItem[12]) {
            controlPanelFontsStatusText
              .setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == controlPanelFontsMenuItem[13]) {
            controlPanelFontsStatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == controlPanelFontsMenuItem[14]) {
            controlPanelFontsStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == controlPanelFontsMenuItem[15]) {
            controlPanelFontsStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == controlPanelFontsMenuItem[16]) {
            controlPanelFontsStatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == controlPanelFontsMenuItem[17]) {
            controlPanelFontsStatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == controlPanelFontsMenuItem[18]) {
            controlPanelFontsStatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == controlPanelFontsMenuItem[19]) {
            controlPanelFontsStatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == controlPanelFontsMenuItem[20]) {
            controlPanelFontsStatusText.setText("Displays items in a list.");
          } else if (e.getSource() == controlPanelFontsMenuItem[21]) {
            controlPanelFontsStatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == controlPanelFontsMenuItem[22]) {
            controlPanelFontsStatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == controlPanelFontsMenuItem[23]) {
            controlPanelFontsStatusText.setText("Sorts items by type.");
          } else if (e.getSource() == controlPanelFontsMenuItem[24]) {
            controlPanelFontsStatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == controlPanelFontsMenuItem[25]) {
            controlPanelFontsStatusText.setText("Sorts items by available free space.");
          } else if (e.getSource() == controlPanelFontsMenuItem[26]) {
            controlPanelFontsStatusText.setText("Arranges the icons automatically.");
          } else if (e.getSource() == controlPanelFontsMenuItem[27]) {
            controlPanelFontsStatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == controlPanelFontsMenuItem[28]) {
            controlPanelFontsStatusText.setText("Refresh item information.");
          } else if (e.getSource() == controlPanelFontsMenuItem[29]) {
            controlPanelFontsStatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == controlPanelFontsMenuItem[30]) {
            controlPanelFontsStatusText.setText("Opens help.");
          } else if (e.getSource() == controlPanelFontsMenuItem[31]) {
            controlPanelFontsStatusText
              .setText("Displays program information, version number, and copyright.");
          }
        }
      });
      controlPanelFontsMenuItem[i].setFont(MSSansSerif16);
      controlPanelFontsOpen.add(controlPanelFontsMenuBar, BorderLayout.NORTH);
    }
  }

  public void controlPanelInternetMethod() {
    controlPanelInternetProperties = new JDialog();
    controlPanelInternetProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        controlPanelInternetPropertiesTabbedPane.setSelectedIndex(0);
        controlPanelInternetPropertiesCheckBox.setSelected(false);
      }
    });
    controlPanelInternetProperties.setAlwaysOnTop(true);
    controlPanelInternetProperties.setBounds(50, 0, 590, 675);
    controlPanelInternetProperties.setLayout(null);
    controlPanelInternetProperties.setResizable(false);
    controlPanelInternetProperties.setTitle("Internet Properties");
    controlPanelInternetPropertiesPanel = new JPanel[3];
    for (int i = 0; i < 3; i++) {
      controlPanelInternetPropertiesPanel[i] = new JPanel();
      controlPanelInternetPropertiesPanel[i].setLayout(null);
    }
    controlPanelInternetPropertiesTabbedPane = new JTabbedPane();
    controlPanelInternetPropertiesTabbedPane.addTab("AutoDial", controlPanelInternetPropertiesPanel[1]);
    controlPanelInternetPropertiesTabbedPane.addTab("Advanced", controlPanelInternetPropertiesPanel[2]);
    controlPanelInternetPropertiesTabbedPane.setFont(MSSansSerif16);
    controlPanelInternetPropertiesPanel[0].add(controlPanelInternetPropertiesTabbedPane, BorderLayout.NORTH);
    controlPanelInternetPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    controlPanelInternetPropertiesPanel[0].setBounds(10, 15, 560, 575);
    controlPanelInternetPropertiesPanel[0].setLayout(new GridLayout());
    controlPanelInternetProperties.add(controlPanelInternetPropertiesPanel[0]);
    controlPanelInternetPropertiesLabel = new JLabel[5];
    controlPanelInternetPropertiesLabel[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ControlPanelInternetPropertiesLabel1.png")));
    controlPanelInternetPropertiesLabel[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ControlPanelInternetPropertiesLabel2.png")));
    controlPanelInternetPropertiesLabel[2] = new JLabel("Settings");
    controlPanelInternetPropertiesLabel[3] = new JLabel("Proxy Server:");
    controlPanelInternetPropertiesLabel[4] = new JLabel("Bypass Proxy On:");
    controlPanelInternetPropertiesLabel[0].setBounds(5, 10, 555, 394);
    controlPanelInternetPropertiesLabel[1].setBounds(5, 10, 549, 57);
    controlPanelInternetPropertiesLabel[2].setBounds(15, 115, 200, 30);
    controlPanelInternetPropertiesLabel[3].setBounds(20, 150, 200, 30);
    controlPanelInternetPropertiesLabel[4].setBounds(20, 200, 200, 30);
    controlPanelInternetPropertiesPanel[1].add(controlPanelInternetPropertiesLabel[0]);
    for (int i = 2; i < 5; i++) {
      controlPanelInternetPropertiesLabel[i].setEnabled(false);
      controlPanelInternetPropertiesLabel[i].setFont(MSSansSerif16);
    }
    for (int i = 1; i < 5; i++) {
      controlPanelInternetPropertiesPanel[2].add(controlPanelInternetPropertiesLabel[i]);
    }
    controlPanelInternetPropertiesButton = new JButton[3];
    controlPanelInternetPropertiesButton[0] = new JButton("OK");
    controlPanelInternetPropertiesButton[1] = new JButton("Cancel");
    controlPanelInternetPropertiesButton[2] = new JButton("Apply");
    controlPanelInternetPropertiesButton[0].setBounds(190, 600, 120, 33);
    controlPanelInternetPropertiesButton[1].setBounds(320, 600, 120, 33);
    controlPanelInternetPropertiesButton[2].setBounds(450, 600, 120, 33);
    controlPanelInternetPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      controlPanelInternetPropertiesButton[i].addActionListener(this);
      controlPanelInternetPropertiesButton[i].setFont(MSSansSerif16);
      controlPanelInternetProperties.add(controlPanelInternetPropertiesButton[i]);
    }
    controlPanelInternetPropertiesCheckBox = new JCheckBox("Use Proxy Server");
    controlPanelInternetPropertiesCheckBox.addActionListener(this);
    controlPanelInternetPropertiesCheckBox.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        controlPanelInternetPropertiesButton[2].setEnabled(true);
      }
    });
    controlPanelInternetPropertiesCheckBox.setBounds(5, 90, 200, 30);
    controlPanelInternetPropertiesCheckBox.setFont(MSSansSerif16);
    controlPanelInternetPropertiesPanel[2].add(controlPanelInternetPropertiesCheckBox);
    controlPanelInternetPropertiesTextField = new JTextField();
    controlPanelInternetPropertiesTextField.setBackground(gray);
    controlPanelInternetPropertiesTextField.setBounds(150, 150, 350, 30);
    controlPanelInternetPropertiesTextField.setEnabled(false);
    controlPanelInternetPropertiesPanel[2].add(controlPanelInternetPropertiesTextField);
    controlPanelInternetPropertiesTextArea = new JTextArea();
    controlPanelInternetPropertiesTextArea.setBackground(gray);
    controlPanelInternetPropertiesTextArea.setEnabled(false);
    controlPanelInternetPropertiesScrollPane = new JScrollPane(controlPanelInternetPropertiesTextArea);
    controlPanelInternetPropertiesScrollPane.getHorizontalScrollBar().setBackground(gray);
    controlPanelInternetPropertiesScrollPane.getVerticalScrollBar().setBackground(gray);
    controlPanelInternetPropertiesScrollPane.setBounds(150, 200, 350, 175);
    controlPanelInternetPropertiesScrollPane.setEnabled(false);
    controlPanelInternetPropertiesScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    controlPanelInternetPropertiesScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    controlPanelInternetPropertiesPanel[2].add(controlPanelInternetPropertiesScrollPane);
  }

  @SuppressWarnings("unchecked")
  public void controlPanelJoystickMethod() {
    joystickProperties = new JDialog();
    joystickProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        joystickPropertiesComboBox[0].setSelectedIndex(0);
        joystickPropertiesComboBox[1].setSelectedIndex(2);
        customJoystick.dispose();
        joystickCalibration.dispose();
        joystickTest.dispose();
      }
    });
    joystickProperties.setAlwaysOnTop(true);
    joystickProperties.setBounds(50, 0, 590, 625);
    joystickProperties.setLayout(null);
    joystickProperties.setResizable(false);
    joystickProperties.setTitle("Joystick Properties");
    joystickPropertiesPanel = new JPanel[2];
    for (int i = 0; i < 2; i++) {
      joystickPropertiesPanel[i] = new JPanel();
    }
    joystickPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    joystickPropertiesPanel[0].setBounds(10, 15, 550, 525);
    joystickPropertiesPanel[0].setLayout(new GridLayout());
    joystickPropertiesPanel[1].setLayout(null);
    joystickPropertiesTabbedPane = new JTabbedPane();
    joystickPropertiesTabbedPane.addTab("Joystick", joystickPropertiesPanel[1]);
    joystickPropertiesTabbedPane.setFont(MSSansSerif16);
    joystickPropertiesPanel[0].add(joystickPropertiesTabbedPane);
    joystickProperties.add(joystickPropertiesPanel[0]);
    joystickPropertiesLabel = new JLabel[8];
    joystickPropertiesLabel[0] = new JLabel("Your joystick is not connected correctly.");
    joystickPropertiesLabel[1] = new JLabel("Current joystick:");
    joystickPropertiesLabel[2] = new JLabel("Joystick configuration");
    joystickPropertiesLabel[3] = new JLabel("Joystick selection:");
    joystickPropertiesLabel[4] = new JLabel("Joystick troubleshooter");
    joystickPropertiesLabel[5] = new JLabel(
      "<html>If your joystick no longer works correctly with a game, click<br/> Reset.<html>");
    for (int i = 6; i < 8; i++) {
      joystickPropertiesLabel[i] = new JLabel(
        new ImageIcon(getClass().getClassLoader().getResource("JoystickLabel.png")));
      joystickPropertiesPanel[1].add(joystickPropertiesLabel[i]);
    }
    joystickPropertiesLabel[0].setBounds(25, 5, 300, 30);
    joystickPropertiesLabel[1].setBounds(100, 40, 150, 30);
    joystickPropertiesLabel[2].setBounds(20, 110, 200, 30);
    joystickPropertiesLabel[3].setBounds(100, 140, 200, 30);
    joystickPropertiesLabel[4].setBounds(20, 255, 200, 30);
    joystickPropertiesLabel[5].setBounds(20, 280, 500, 60);
    joystickPropertiesLabel[6].setBounds(25, 45, 58, 56);
    joystickPropertiesLabel[7].setBounds(25, 145, 58, 56);
    for (int i = 4; i < 6; i++) {
      joystickPropertiesLabel[i].setEnabled(false);
    }
    for (int i = 0; i < 6; i++) {
      joystickPropertiesLabel[i].setFont(MSSansSerif16);
      joystickPropertiesPanel[1].add(joystickPropertiesLabel[i]);
    }
    joystickPropertiesComboBox = new JComboBox[2];
    for (int i = 0; i < 2; i++) {
      joystickPropertiesComboBox[i] = new JComboBox < String > ();
      joystickPropertiesComboBox[i].setFont(MSSansSerif16);
      joystickPropertiesPanel[1].add(joystickPropertiesComboBox[i]);
    }
    currentJoystick = new String[17];
    for (int i = 1; i < 17; i++) {
      currentJoystick[i] = "Joystick " + String.valueOf(i);
      joystickPropertiesComboBox[0].addItem(currentJoystick[i]);
    }
    joystickPropertiesComboBox[0].setBounds(100, 70, 400, 30);
    joystickSelection = new String[19];
    joystickSelection[0] = "(none)";
    joystickSelection[1] = "(Custom...)";
    joystickSelection[2] = "2-axis, 2-button joystick";
    joystickSelection[3] = "2-axis, 4-button joystick";
    joystickSelection[4] = "2-button gamepad";
    joystickSelection[5] = "2-button flight yoke";
    joystickSelection[6] = "2-button flight yoke w/throttle";
    joystickSelection[7] = "3-axis, 2-button joystick";
    joystickSelection[8] = "3-axis, 4-button joystick";
    joystickSelection[9] = "4-button gamepad";
    joystickSelection[10] = "4-button flight yoke";
    joystickSelection[11] = "4-button flight yoke w/throttle";
    joystickSelection[12] = "CH Flightstick";
    joystickSelection[13] = "CH Flightstick Pro";
    joystickSelection[14] = "CH Virtual Pilot";
    joystickSelection[15] = "Gravis Analog Joystick";
    joystickSelection[16] = "Gravis Analog Pro Joystick";
    joystickSelection[17] = "Gravis Gamepad";
    joystickSelection[18] = "Thrustmaster Flight Control System";
    for (int i = 0; i < 19; i++) {
      joystickPropertiesComboBox[1].addItem(joystickSelection[i]);
    }
    joystickPropertiesComboBox[0].addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        if (joystickPropertiesComboBox[0].getSelectedIndex() == 0) {
          joystickPropertiesComboBox[1].setSelectedIndex(2);
        }
        for (int i = 1; i < 17; i++) {
          if (joystickPropertiesComboBox[0].getSelectedIndex() == i) {
            joystickPropertiesComboBox[1].setSelectedIndex(0);
          }
        }
      }
    });
    joystickPropertiesComboBox[1].addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        if (joystickPropertiesComboBox[1].getSelectedIndex() == 1) {
          customJoystick.setVisible(true);
        }
      }
    });
    joystickPropertiesComboBox[1].setBounds(100, 170, 400, 30);
    joystickPropertiesComboBox[0].setSelectedIndex(0);
    joystickPropertiesComboBox[1].setSelectedIndex(2);
    joystickPropertiesCheckBox = new JCheckBox("Rudder");
    joystickPropertiesCheckBox.addActionListener(this);
    joystickPropertiesCheckBox.setBounds(100, 210, 150, 30);
    joystickPropertiesCheckBox.setEnabled(false);
    joystickPropertiesCheckBox.setFont(MSSansSerif16);
    joystickPropertiesPanel[1].add(joystickPropertiesCheckBox);
    joystickPropertiesButton = new JButton[6];
    joystickPropertiesButton[0] = new JButton("Calibrate ...");
    joystickPropertiesButton[1] = new JButton("Test ...");
    joystickPropertiesButton[2] = new JButton("Reset");
    joystickPropertiesButton[3] = new JButton("OK");
    joystickPropertiesButton[4] = new JButton("Cancel");
    joystickPropertiesButton[5] = new JButton("Apply");
    joystickPropertiesButton[0].setBounds(260, 210, 120, 33);
    joystickPropertiesButton[1].setBounds(390, 210, 120, 33);
    joystickPropertiesButton[2].setBounds(20, 335, 120, 33);
    joystickPropertiesButton[3].setBounds(190, 550, 120, 33);
    joystickPropertiesButton[4].setBounds(320, 550, 120, 33);
    joystickPropertiesButton[5].setBounds(450, 550, 120, 33);
    for (int i = 0; i < 3; i++) {
      joystickPropertiesButton[i].setEnabled(false);
    }
    joystickPropertiesButton[5].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      joystickPropertiesPanel[1].add(joystickPropertiesButton[i]);
    }
    for (int i = 3; i < 6; i++) {
      joystickProperties.add(joystickPropertiesButton[i]);
    }
    for (int i = 0; i < 6; i++) {
      joystickPropertiesButton[i].addActionListener(this);
      joystickPropertiesButton[i].setFont(MSSansSerif16);
    }
    // Custom Joystick
    customJoystick = new JDialog();
    customJoystick.setAlwaysOnTop(true);
    customJoystick.setBounds(50, 50, 550, 475);
    customJoystick.setLayout(null);
    customJoystick.setResizable(false);
    customJoystick.setTitle("Custom Joystick");
    customJoystickLabel = new JLabel[2];
    customJoystickLabel[0] = new JLabel("Axes");
    customJoystickLabel[1] = new JLabel("Buttons");
    customJoystickLabel[0].setBounds(25, 10, 50, 30);
    customJoystickLabel[1].setBounds(25, 90, 75, 30);
    for (int i = 0; i < 2; i++) {
      customJoystickLabel[i].setFont(MSSansSerif16);
      customJoystick.add(customJoystickLabel[i]);
    }
    customJoystickRadioButton = new JRadioButton[8];
    customJoystickRadioButton[0] = new JRadioButton("2 axes");
    customJoystickRadioButton[1] = new JRadioButton("3 axes");
    customJoystickRadioButton[2] = new JRadioButton("4 axes");
    customJoystickRadioButton[3] = new JRadioButton("2 buttons");
    customJoystickRadioButton[4] = new JRadioButton("4 buttons");
    customJoystickRadioButton[5] = new JRadioButton("Is a flight yoke");
    customJoystickRadioButton[6] = new JRadioButton("Is a game pad");
    customJoystickRadioButton[7] = new JRadioButton("Is a race car controller");
    customJoystickRadioButton[0].setBounds(25, 40, 100, 30);
    customJoystickRadioButton[1].setBounds(150, 40, 100, 30);
    customJoystickRadioButton[2].setBounds(280, 40, 100, 30);
    customJoystickRadioButton[3].setBounds(25, 120, 120, 30);
    customJoystickRadioButton[4].setBounds(150, 120, 120, 30);
    customJoystickRadioButton[5].setBounds(25, 210, 150, 30);
    customJoystickRadioButton[6].setBounds(25, 240, 150, 30);
    customJoystickRadioButton[7].setBounds(25, 270, 300, 30);
    customJoystickRadioButton[0].setSelected(true);
    customJoystickRadioButton[3].setSelected(true);
    for (int i = 5; i < 7; i++) {
      customJoystickRadioButton[i].setEnabled(false);
    }
    for (int i = 0; i < 8; i++) {
      customJoystickRadioButton[i].addActionListener(this);
      customJoystickRadioButton[i].setFont(MSSansSerif16);
      customJoystick.add(customJoystickRadioButton[i]);
    }
    customJoystickButtonGroup = new ButtonGroup[3];
    for (int i = 0; i < 3; i++) {
      customJoystickButtonGroup[i] = new ButtonGroup();
      customJoystickButtonGroup[0].add(customJoystickRadioButton[i]);
    }
    for (int i = 3; i < 5; i++) {
      customJoystickButtonGroup[1].add(customJoystickRadioButton[i]);
    }
    for (int i = 5; i < 8; i++) {
      customJoystickButtonGroup[2].add(customJoystickRadioButton[i]);
    }
    customJoystickCheckBox = new JCheckBox[2];
    customJoystickCheckBox[0] = new JCheckBox("Special features");
    customJoystickCheckBox[1] = new JCheckBox("Has point of view hat");
    customJoystickCheckBox[0].setBounds(25, 180, 150, 30);
    customJoystickCheckBox[1].setBounds(15, 330, 300, 30);
    customJoystickButton = new JButton[2];
    customJoystickButton[0] = new JButton("OK");
    customJoystickButton[1] = new JButton("Cancel");
    customJoystickButton[0].setBounds(270, 395, 120, 33);
    customJoystickButton[1].setBounds(400, 395, 120, 33);
    for (int i = 0; i < 2; i++) {
      customJoystickCheckBox[i].addActionListener(this);
      customJoystickCheckBox[i].setFont(MSSansSerif16);
      customJoystickButton[i].addActionListener(this);
      customJoystickButton[i].setFont(MSSansSerif16);
      customJoystick.add(customJoystickCheckBox[i]);
      customJoystick.add(customJoystickButton[i]);
    }
    // Joystick Calibration
    joystickCalibration = new JDialog();
    joystickCalibration.setAlwaysOnTop(true);
    joystickCalibration.setBounds(75, 75, 500, 500);
    joystickCalibration.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    joystickCalibration.setLayout(null);
    joystickCalibration.setResizable(false);
    joystickCalibration.setTitle("Joystick" + "Calibration");
    joystickCalibrationLabel = new JLabel();
    // Joystick Test
    joystickTest = new JDialog();
    joystickTest.setAlwaysOnTop(true);
    joystickTest.setBounds(75, 75, 500, 500);
    joystickTest.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    joystickTest.setLayout(null);
    joystickTest.setResizable(false);
    joystickTest.setTitle("Joystick" + "Test");
    joystickTestLabel = new JLabel();

  }

  @SuppressWarnings("unchecked")
  public void controlPanelKeyboardMethod() {
    keyboardProperties = new JDialog();
    keyboardProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        keyboardPropertiesAdd.dispose();
        keyboardPropertiesProperties.dispose();
        keyboardPropertiesChange.dispose();
        keyboardPropertiesTabbedPane.setSelectedIndex(0);
      }
    });
    keyboardProperties.setAlwaysOnTop(true);
    keyboardProperties.setBounds(50, 0, 595, 670);
    keyboardProperties.setLayout(null);
    keyboardProperties.setResizable(false);
    keyboardProperties.setTitle("Keyboard Properties");
    keyboardPropertiesPanel = new JPanel[4];
    for (int i = 0; i < 4; i++) {
      keyboardPropertiesPanel[i] = new JPanel();
    }
    for (int i = 1; i < 4; i++) {
      keyboardPropertiesPanel[i].setLayout(null);
    }
    keyboardPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    keyboardPropertiesPanel[0].setBounds(10, 15, 560, 570);
    keyboardPropertiesPanel[0].setLayout(new GridLayout());
    keyboardPropertiesTabbedPane = new JTabbedPane();
    keyboardPropertiesTabbedPane.addTab("Speed", keyboardPropertiesPanel[1]);
    keyboardPropertiesTabbedPane.addTab("Language", keyboardPropertiesPanel[2]);
    keyboardPropertiesTabbedPane.addTab("General", keyboardPropertiesPanel[3]);
    keyboardPropertiesTabbedPane.setFont(MSSansSerif16);
    keyboardPropertiesPanel[0].add(keyboardPropertiesTabbedPane);
    keyboardProperties.add(keyboardPropertiesPanel[0]);
    keyboardPropertiesLabel = new JLabel[20];
    // Speed Tab
    keyboardPropertiesLabel[0] = new JLabel("Character repeat");
    keyboardPropertiesLabel[1] = new JLabel("Repeat delay:");
    keyboardPropertiesLabel[2] = new JLabel("Long");
    keyboardPropertiesLabel[3] = new JLabel("Short");
    keyboardPropertiesLabel[4] = new JLabel("Repeat rate:");
    keyboardPropertiesLabel[5] = new JLabel("Slow");
    keyboardPropertiesLabel[6] = new JLabel("Fast");
    keyboardPropertiesLabel[7] = new JLabel("Click here and hold down a key to test repeat rate:");
    keyboardPropertiesLabel[8] = new JLabel("Cursor blink rate");
    keyboardPropertiesLabel[9] = new JLabel("Slow");
    keyboardPropertiesLabel[10] = new JLabel("Fast");
    keyboardPropertiesLabel[11] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("KeyboardPropertiesRepeatDelay.png")));
    keyboardPropertiesLabel[12] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("KeyboardPropertiesRepeatRate.png")));
    keyboardPropertiesLabel[0].setBounds(20, 20, 200, 30);
    keyboardPropertiesLabel[1].setBounds(100, 50, 200, 30);
    keyboardPropertiesLabel[2].setBounds(100, 80, 60, 30);
    keyboardPropertiesLabel[3].setBounds(475, 80, 60, 30);
    keyboardPropertiesLabel[4].setBounds(100, 200, 100, 30);
    keyboardPropertiesLabel[5].setBounds(100, 240, 100, 30);
    keyboardPropertiesLabel[6].setBounds(475, 240, 100, 30);
    keyboardPropertiesLabel[7].setBounds(25, 280, 400, 30);
    keyboardPropertiesLabel[8].setBounds(20, 350, 150, 30);
    keyboardPropertiesLabel[9].setBounds(100, 400, 100, 30);
    keyboardPropertiesLabel[10].setBounds(475, 400, 100, 30);
    keyboardPropertiesLabel[11].setBounds(20, 50, 53, 51);
    keyboardPropertiesLabel[12].setBounds(20, 200, 50, 29);
    for (int i = 0; i < 13; i++) {
      keyboardPropertiesPanel[1].add(keyboardPropertiesLabel[i]);
    }
    keyboardPropertiesTextField = new JTextField[2];
    keyboardPropertiesTextField[0] = new JTextField();
    keyboardPropertiesTextField[0].setBounds(30, 310, 475, 30);
    keyboardPropertiesPanel[1].add(keyboardPropertiesTextField[0]);
    keyboardPropertiesSlider = new JSlider[3];
    for (int i = 0; i < 3; i++) {
      keyboardPropertiesSlider[i] = new JSlider();
      keyboardPropertiesSlider[i].setPaintTicks(true);
      keyboardPropertiesSlider[i].setPaintTrack(true);
      keyboardPropertiesPanel[1].add(keyboardPropertiesSlider[i]);
    }
    keyboardPropertiesSlider[0].setBounds(150, 89, 300, 30);
    keyboardPropertiesSlider[1].setBounds(150, 249, 300, 30);
    keyboardPropertiesSlider[2].setBounds(150, 409, 300, 30);
    keyboardPropertiesSlider[0].setMajorTickSpacing(25);
    keyboardPropertiesSlider[1].setMinorTickSpacing(5);
    keyboardPropertiesSlider[2].setMajorTickSpacing(10);
    keyboardBlinkingCursorURL = this.getClass().getClassLoader().getResource("KeyboardBlinkingCursor.gif");
    keyboardBlinkingCursor = new JLabel(new ImageIcon("keyboardBlinkingCursorURL"));
    keyboardBlinkingCursor.setBounds(50, 400, 100, 30);
    keyboardPropertiesPanel[1].add(keyboardBlinkingCursor);
    keyboardPropertiesButton = new JButton[8];
    keyboardPropertiesButton[0] = new JButton("OK");
    keyboardPropertiesButton[1] = new JButton("Cancel");
    keyboardPropertiesButton[2] = new JButton("Apply");
    keyboardPropertiesButton[0].setBounds(190, 600, 120, 33);
    keyboardPropertiesButton[1].setBounds(320, 600, 120, 33);
    keyboardPropertiesButton[2].setBounds(450, 600, 120, 33);
    keyboardPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      keyboardProperties.add(keyboardPropertiesButton[i]);
    }
    keyboardPropertiesList = new JList[2];
    // Language Tab
    keyboardPropertiesLabel[13] = new JLabel("Installed keyboard languages and layouts");
    keyboardPropertiesLabel[14] = new JLabel("Language:");
    keyboardPropertiesLabel[15] = new JLabel("Layout:");
    keyboardPropertiesLabel[16] = new JLabel("Default language:  English (United States)");
    keyboardPropertiesLabel[17] = new JLabel("Switch languages");
    keyboardPropertiesLabel[13].setBounds(20, 10, 300, 30);
    keyboardPropertiesLabel[14].setBounds(20, 35, 100, 30);
    keyboardPropertiesLabel[15].setBounds(500, 35, 100, 30);
    keyboardPropertiesLabel[16].setBounds(20, 250, 330, 30);
    keyboardPropertiesLabel[17].setBounds(20, 300, 150, 30);
    for (int i = 13; i < 18; i++) {
      keyboardPropertiesPanel[2].add(keyboardPropertiesLabel[i]);
    }
    languageLayout = new String[2];
    languageLayout[0] = "English (United States)                      United States)";
    keyboardPropertiesList[0] = new JList < Object > (languageLayout);
    keyboardPropertiesList[0].setBounds(20, 65, 500, 125);
    keyboardPropertiesPanel[2].add(keyboardPropertiesList[0]);
    keyboardPropertiesButton[3] = new JButton("Add...");
    keyboardPropertiesButton[4] = new JButton("Properties");
    keyboardPropertiesButton[5] = new JButton("Remove");
    keyboardPropertiesButton[6] = new JButton("Set as Default");
    keyboardPropertiesButton[3].setBounds(30, 200, 160, 33);
    keyboardPropertiesButton[4].setBounds(200, 200, 160, 33);
    keyboardPropertiesButton[5].setBounds(370, 200, 160, 33);
    keyboardPropertiesButton[6].setBounds(370, 255, 160, 33);
    for (int i = 5; i < 7; i++) {
      keyboardPropertiesButton[i].setEnabled(false);
    }
    for (int i = 3; i < 7; i++) {
      keyboardPropertiesPanel[2].add(keyboardPropertiesButton[i]);
    }
    keyboardPropertiesRadioButton = new JRadioButton[3];
    keyboardPropertiesRadioButton[0] = new JRadioButton("Left Alt+Shift");
    keyboardPropertiesRadioButton[1] = new JRadioButton("Ctrl+Shift");
    keyboardPropertiesRadioButton[2] = new JRadioButton("None");
    keyboardPropertiesRadioButton[0].setBounds(20, 330, 120, 30);
    keyboardPropertiesRadioButton[1].setBounds(150, 330, 100, 30);
    keyboardPropertiesRadioButton[2].setBounds(270, 330, 100, 30);
    keyboardPropertiesButtonGroup = new ButtonGroup();
    for (int i = 0; i < 3; i++) {
      keyboardPropertiesRadioButton[i].addActionListener(this);
      keyboardPropertiesRadioButton[i].setEnabled(false);
      keyboardPropertiesRadioButton[i].setFont(MSSansSerif16);
      keyboardPropertiesButtonGroup.add(keyboardPropertiesRadioButton[i]);
      keyboardPropertiesPanel[2].add(keyboardPropertiesRadioButton[i]);
    }
    keyboardPropertiesCheckBox = new JCheckBox("Enable indicator on taskbar");
    keyboardPropertiesCheckBox.addActionListener(this);
    keyboardPropertiesCheckBox.setBounds(18, 375, 200, 30);
    keyboardPropertiesCheckBox.setEnabled(false);
    keyboardPropertiesCheckBox.setFont(MSSansSerif16);
    keyboardPropertiesPanel[2].add(keyboardPropertiesCheckBox);
    keyboardPropertiesDialogComboBox = new JComboBox[2];
    for (int i = 0; i < 2; i++) {
      keyboardPropertiesDialogComboBox[i] = new JComboBox < String > ();
    }
    // Add Language
    keyboardPropertiesAdd = new JDialog();
    keyboardPropertiesAdd.setAlwaysOnTop(true);
    keyboardPropertiesAdd.setBounds(50, 50, 500, 300);
    keyboardPropertiesAdd.setLayout(null);
    keyboardPropertiesAdd.setResizable(false);
    keyboardPropertiesAdd.setTitle("Add Language");
    addLanguage = new String[49];
    addLanguage[0] = "Afrikaans";
    addLanguage[1] = "Basque";
    addLanguage[2] = "Catalan";
    addLanguage[3] = "Danish";
    addLanguage[4] = "Dutch (Belgian)";
    addLanguage[5] = "Dutch (Standard)";
    addLanguage[6] = "English (Australian)";
    addLanguage[7] = "English (British)";
    addLanguage[8] = "English (Canadian)";
    addLanguage[9] = "English (Caribbean)";
    addLanguage[10] = "English (Ireland)";
    addLanguage[11] = "English (Jamaica)";
    addLanguage[12] = "English (New Zealand";
    addLanguage[13] = "English (South Africa)";
    addLanguage[14] = "Finnish";
    addLanguage[15] = "French (Belgian)";
    addLanguage[16] = "French (Canadian)";
    addLanguage[17] = "French (Luxembourg)";
    addLanguage[18] = "French (Standard)";
    addLanguage[19] = "French (Swiss)";
    addLanguage[20] = "German (Austrian)";
    addLanguage[21] = "German (Liechtenstein)";
    addLanguage[22] = "German (Luxembourg)";
    addLanguage[23] = "German (Standard)";
    addLanguage[24] = "German (Swiss)";
    addLanguage[25] = "Icelandic";
    addLanguage[26] = "Indonesian";
    addLanguage[27] = "Italian (Standard)";
    addLanguage[28] = "Italian (Swiss)";
    addLanguage[29] = "Norwegian (Bokmal)";
    addLanguage[30] = "Norwegian (Nynorsk)";
    addLanguage[31] = "Portuguese (Brazilian)";
    addLanguage[32] = "Portuguese (Standard)";
    addLanguage[33] = "Spanish (Argentina)";
    addLanguage[34] = "Spanish (Chile)";
    addLanguage[35] = "Spanish (Colombia)";
    addLanguage[36] = "Spanish (Costa Rica)";
    addLanguage[37] = "Spanish (Dominican Republic)";
    addLanguage[38] = "Spanish (Ecuador)";
    addLanguage[39] = "Spanish (Guatemala)";
    addLanguage[40] = "Spanish (Mexican)";
    addLanguage[41] = "Spanish (Modern Sort)";
    addLanguage[42] = "Spanish (Panama)";
    addLanguage[43] = "Spanish (Paraguay)";
    addLanguage[44] = "Spanish (Peru)";
    addLanguage[45] = "Spanish (Traidtional Sort)";
    addLanguage[46] = "Spanish (Uruguay)";
    addLanguage[47] = "Spanish (Venezuela)";
    addLanguage[48] = "Swedish";
    for (int i = 0; i < 49; i++) {
      keyboardPropertiesDialogComboBox[0].addItem(addLanguage[i]);
    }
    keyboardPropertiesDialogComboBox[0].setBounds(50, 50, 300, 30);
    keyboardPropertiesDialogComboBox[0].setSelectedIndex(0);
    keyboardPropertiesAdd.add(keyboardPropertiesDialogComboBox[0]);
    keyboardPropertiesDialogButton = new JButton[4];
    keyboardPropertiesDialogButton[0] = new JButton("OK");
    keyboardPropertiesDialogButton[1] = new JButton("Cancel");
    keyboardPropertiesDialogButton[0].setBounds(270, 200, 120, 33);
    keyboardPropertiesDialogButton[1].setBounds(400, 200, 120, 33);
    for (int i = 0; i < 2; i++) {
      keyboardPropertiesAdd.add(keyboardPropertiesDialogButton[i]);
    }
    // Language Properties
    keyboardPropertiesProperties = new JDialog();
    keyboardPropertiesProperties.setAlwaysOnTop(true);
    keyboardPropertiesProperties.setBounds(75, 75, 500, 300);
    keyboardPropertiesProperties.setLayout(null);
    keyboardPropertiesProperties.setResizable(false);
    keyboardPropertiesProperties.setTitle("Language Properties");
    keyboardLayout = new String[26];
    keyboardLayout[0] = "Belgian";
    keyboardLayout[1] = "British";
    keyboardLayout[2] = "Canadian Multilingual";
    keyboardLayout[3] = "Danish";
    keyboardLayout[4] = "Dutch";
    keyboardLayout[5] = "Finnish";
    keyboardLayout[6] = "French";
    keyboardLayout[7] = "French Canadian";
    keyboardLayout[8] = "German (IBM)";
    keyboardLayout[9] = "German (Standard)";
    keyboardLayout[10] = "Icelandic";
    keyboardLayout[11] = "Irish";
    keyboardLayout[12] = "Italian";
    keyboardLayout[13] = "Italian 142";
    keyboardLayout[14] = "Latin American";
    keyboardLayout[15] = "Norwegian";
    keyboardLayout[16] = "Portuguese (Brazilian ABNT2)";
    keyboardLayout[17] = "Portuguese (Brazilian standard)";
    keyboardLayout[18] = "Portuguese (Standard)";
    keyboardLayout[19] = "Spanish";
    keyboardLayout[20] = "Swedish";
    keyboardLayout[21] = "Swiss French";
    keyboardLayout[22] = "Swish German";
    keyboardLayout[23] = "United States";
    keyboardLayout[24] = "United States-Dvorak";
    keyboardLayout[25] = "United States-International";
    for (int i = 0; i < 26; i++) {
      keyboardPropertiesDialogComboBox[1].addItem(keyboardLayout[i]);
    }
    keyboardPropertiesDialogComboBox[1].setBounds(50, 50, 300, 30);
    keyboardPropertiesDialogComboBox[1].setSelectedIndex(23);
    keyboardPropertiesProperties.add(keyboardPropertiesDialogComboBox[1]);
    keyboardPropertiesDialogButton[2] = new JButton("OK");
    keyboardPropertiesDialogButton[3] = new JButton("Cancel");
    keyboardPropertiesDialogButton[2].setBounds(270, 200, 120, 33);
    keyboardPropertiesDialogButton[3].setBounds(400, 200, 120, 33);
    for (int i = 2; i < 4; i++) {
      keyboardPropertiesProperties.add(keyboardPropertiesDialogButton[i]);
    }
    // General Tab
    keyboardPropertiesLabel[18] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("KeyboardPropertiesType.png")));
    keyboardPropertiesLabel[18].setBounds(20, 30, 52, 46);
    keyboardPropertiesPanel[3].add(keyboardPropertiesLabel[18]);
    keyboardPropertiesLabel[19] = new JLabel("Keyboard type:");
    keyboardPropertiesTextField[1] = new JTextField("PC/AT Keyboard (84-Key)");
    keyboardPropertiesTextField[1].setBackground(gray);
    keyboardPropertiesTextField[1].setBounds(20, 90, 400, 30);
    keyboardPropertiesTextField[1].setEditable(false);
    keyboardPropertiesTextField[1].setFont(MSSansSerif16);
    keyboardPropertiesPanel[3].add(keyboardPropertiesTextField[1]);
    keyboardPropertiesButton[7] = new JButton("Change...");
    keyboardPropertiesButton[7].setBounds(430, 90, 120, 33);
    keyboardPropertiesPanel[3].add(keyboardPropertiesButton[7]);
    // Select Device
    keyboardPropertiesChange = new JDialog();
    keyboardPropertiesChange.setAlwaysOnTop(true);
    keyboardPropertiesChange.setBounds(50, 50, 500, 400);
    keyboardPropertiesChange.setLayout(null);
    keyboardPropertiesChange.setResizable(false);
    keyboardPropertiesChange.setTitle("Select Device");
    // Font etc. Settings
    for (int i = 0; i < 8; i++) {
      keyboardPropertiesButton[i].addActionListener(this);
      keyboardPropertiesButton[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 20; i++) {
      keyboardPropertiesLabel[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 1; i++) {
      keyboardPropertiesList[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 4; i++) {
      keyboardPropertiesDialogButton[i].addActionListener(this);
      keyboardPropertiesDialogButton[i].setFont(MSSansSerif16);
    }
  }

  public void controlPanelModemsMethod() {
    modemsInstallNewModem = new JDialog();
    modemsInstallNewModem.setAlwaysOnTop(true);
    modemsInstallNewModem.getContentPane().setBackground(gray);
    modemsInstallNewModem.setBounds(120, 60, 830, 580);
    modemsInstallNewModem.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    modemsInstallNewModem.setLayout(null);
    modemsInstallNewModem.setTitle("Install New Modem");
    modemsInstallNewModemButton = new JButton[5];
    modemsInstallNewModemButton[0] = new JButton("< Back");
    modemsInstallNewModemButton[1] = new JButton("Next >");
    modemsInstallNewModemButton[2] = new JButton("Cancel");
    modemsInstallNewModemButton[3] = new JButton("Have Disk...");
    modemsInstallNewModemButton[0].setBounds(400, 500, 110, 40);
    modemsInstallNewModemButton[1].setBounds(510, 500, 110, 40);
    modemsInstallNewModemButton[2].setBounds(680, 500, 110, 40);
    for (int i = 0; i < 3; i++) {
      modemsInstallNewModem.add(modemsInstallNewModemButton[i]);
    }
    for (int i = 0; i < 4; i++) {
      modemsInstallNewModemButton[i].addActionListener(this);
      modemsInstallNewModemButton[i].setFont(MSSansSerif16);
    }
    modemsInstallNewModemButton[3].setBounds(660, 355, 140, 40);
    modemsInstallNewModemButton[0].setEnabled(false);
    modemsInstallNewModemCheckBox = new JCheckBox("Don't detect my modem; I will select it from a list.");
    modemsInstallNewModem.add(modemsInstallNewModemCheckBox);
    modemsInstallNewModemCheckBox.addActionListener(this);
    modemsInstallNewModemCheckBox.setBounds(230, 340, 500, 50);
    modemsInstallNewModemCheckBox.setFont(MSSansSerif16);
    modemsInstallNewModemLabel = new JLabel[10];
    modemsInstallNewModemLabel[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallNewModemImage.png")));
    modemsInstallNewModemLabel[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("InstallNewModemSeparator.png")));
    modemsInstallNewModemLabel[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("DetectYourModem.png")));
    modemsInstallNewModemLabel[3] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("LookingForAModem.png")));
    modemsInstallNewModemLabel[4] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ClickTheManufacturer.png")));
    modemsInstallNewModemLabel[5] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("Standard300bpsModem.png")));
    modemsInstallNewModemLabel[6] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("PleaseWaitInstallYourModem.png")));
    modemsInstallNewModemLabel[0].setBounds(20, 20, 200, 400);
    modemsInstallNewModemLabel[1].setBounds(10, 480, 780, 10);
    modemsInstallNewModemLabel[2].setBounds(230, 10, 565, 305);
    for (int i = 0; i < 3; i++) {
      modemsInstallNewModem.add(modemsInstallNewModemLabel[i]);
    }
    modemsInstallNewModemLabel[3].setBounds(230, 10, 550, 242);
    modemsInstallNewModemLabel[4].setBounds(-22, 10, 885, 200);
    modemsInstallNewModemLabel[5].setBounds(250, 0, 567, 165);
    modemsInstallNewModemLabel[6].setBounds(230, 50, 522, 40);
    // Modems Properties
    modemsProperties = new JDialog();;
  }

  public void controlPanelMouseMethod() {
    mouseProperties = new JDialog();
    mouseProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        mousePropertiesSaveScheme.dispose();
        mousePropertiesChange.dispose();
        mousePropertiesTabbedPane.setSelectedIndex(0);
        mousePropertiesButton[2].setEnabled(false);
      }
    });
    mouseProperties.setAlwaysOnTop(true);
    mouseProperties.setBounds(50, 0, 590, 675);
    mouseProperties.setLayout(null);
    mouseProperties.setResizable(false);
    mouseProperties.setTitle("Mouse Properties");
    mousePropertiesPanel = new JPanel[5];
    for (int i = 0; i < 5; i++) {
      mousePropertiesPanel[i] = new JPanel();
    }
    for (int i = 1; i < 5; i++) {
      mousePropertiesPanel[i].setLayout(null);
    }
    mousePropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    mousePropertiesPanel[0].setBounds(10, 15, 560, 575);
    mousePropertiesPanel[0].setLayout(new GridLayout());
    mousePropertiesTabbedPane = new JTabbedPane();
    mousePropertiesTabbedPane.addTab("Buttons", mousePropertiesPanel[1]);
    mousePropertiesTabbedPane.addTab("Pointers", mousePropertiesPanel[2]);
    mousePropertiesTabbedPane.addTab("Motion", mousePropertiesPanel[3]);
    mousePropertiesTabbedPane.addTab("General", mousePropertiesPanel[4]);
    mousePropertiesTabbedPane.setFont(MSSansSerif16);
    mousePropertiesPanel[0].add(mousePropertiesTabbedPane);
    mouseProperties.add(mousePropertiesPanel[0]);
    mousePropertiesRadioButton = new JRadioButton[2];
    mousePropertiesRadioButton[0] = new JRadioButton("Right-handed");
    mousePropertiesRadioButton[1] = new JRadioButton("Left-handed");
    mousePropertiesRadioButton[0].setBounds(20, 70, 150, 30);
    mousePropertiesRadioButton[1].setBounds(180, 70, 150, 30);
    mousePropertiesRadioButton[0].setSelected(true);
    mousePropertiesButtonGroup = new ButtonGroup();
    for (int i = 0; i < 2; i++) {
      mousePropertiesRadioButton[i].addActionListener(this);
      mousePropertiesRadioButton[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          mousePropertiesButton[2].setEnabled(true);
        }
      });
      mousePropertiesRadioButton[i].setFont(MSSansSerif16);
      mousePropertiesButtonGroup.add(mousePropertiesRadioButton[i]);
      mousePropertiesPanel[1].add(mousePropertiesRadioButton[i]);
    }
    mousePropertiesLabel = new JLabel[50];
    // Buttons Tab
    mousePropertiesLabel[0] = new JLabel("Button configuration");
    mousePropertiesLabel[1] = new JLabel("Double-click speed");
    mousePropertiesLabel[2] = new JLabel("Slow");
    mousePropertiesLabel[3] = new JLabel("Fast");
    mousePropertiesLabel[4] = new JLabel("Test Area:");
    mousePropertiesLabel[0].setBounds(20, 20, 240, 30);
    mousePropertiesLabel[1].setBounds(20, 300, 240, 33);
    mousePropertiesLabel[2].setBounds(20, 360, 60, 33);
    mousePropertiesLabel[3].setBounds(330, 360, 60, 33);
    mousePropertiesLabel[4].setBounds(380, 330, 150, 33);
    for (int i = 0; i < 5; i++) {
      mousePropertiesLabel[i].setFont(MSSansSerif16);
    }
    mousePropertiesLabel[5] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesRightHanded.png")));
    mousePropertiesLabel[6] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesLeftHanded.png")));
    mousePropertiesTestAreaURL = this.getClass().getClassLoader().getResource("MousePropertiesTestArea.gif");
    mousePropertiesLabel[7] = new JLabel(new ImageIcon(mousePropertiesTestAreaURL));
    mousePropertiesLabel[5].setBounds(20, 80, 500, 200);
    mousePropertiesLabel[6].setBounds(20, 80, 500, 200);
    mousePropertiesLabel[7].setBounds(375, 360, 138, 140);
    for (int i = 0; i < 8; i++) {
      mousePropertiesPanel[1].add(mousePropertiesLabel[i]);
    }
    mousePropertiesSlider = new JSlider[4];
    for (int i = 0; i < 4; i++) {
      mousePropertiesSlider[i] = new JSlider();
    }
    mousePropertiesSlider[0].setBounds(60, 365, 260, 30);
    mousePropertiesPanel[1].add(mousePropertiesSlider[0]);
    // Buttons
    mousePropertiesButton = new JButton[8];
    mousePropertiesButton[0] = new JButton("OK");
    mousePropertiesButton[1] = new JButton("Cancel");
    mousePropertiesButton[2] = new JButton("Apply");
    mousePropertiesButton[0].setBounds(190, 600, 120, 33);
    mousePropertiesButton[1].setBounds(320, 600, 120, 33);
    mousePropertiesButton[2].setBounds(450, 600, 120, 33);
    // Pointers Tab
    mousePropertiesLabel[8] = new JLabel("Scheme");
    mousePropertiesLabel[8].setBounds(20, 10, 100, 30);
    mousePropertiesLabel[8].setFont(MSSansSerif16);
    mousePropertiesPanel[2].add(mousePropertiesLabel[8]);
    mousePropertiesComboBox = new JComboBox < String > ();
    mousePropertiesComboBox.addItem("(None)");
    mousePropertiesComboBox.addItem("Animated Hourglasses");
    mousePropertiesComboBox.addItem("Windows Standard");
    mousePropertiesComboBox.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        mousePropertiesButton[2].setEnabled(true);
        if (mousePropertiesComboBox.getSelectedIndex() == 1) {

        }
      }
    });
    mousePropertiesComboBox.setBounds(20, 40, 390, 30);
    mousePropertiesComboBox.setFont(MSSansSerif16);
    mousePropertiesPanel[2].add(mousePropertiesComboBox);
    mousePropertiesButton[3] = new JButton("Save As...");
    mousePropertiesButton[4] = new JButton("Delete");
    mousePropertiesButton[3].setBounds(150, 90, 120, 33);
    mousePropertiesButton[4].setBounds(280, 90, 120, 33);
    mousePropertiesLabel[9] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesNormalSelect.png")));
    mousePropertiesLabel[10] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesNormalSelectSelected.png")));
    mousePropertiesLabel[11] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesNormalSelectCorner.png")));
    mousePropertiesLabel[12] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesHelpSelect.png")));
    mousePropertiesLabel[13] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesHelpSelectSelected.png")));
    mousePropertiesLabel[14] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesHelpSelectCorner.png")));
    mousePropertiesLabel[15] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesWorkingInBackground.png")));
    mousePropertiesLabel[16] = new JLabel(new ImageIcon(
      getClass().getClassLoader().getResource("MousePropertiesWorkingInBackgroundSelected.png")));
    mousePropertiesLabel[17] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesWorkingInBackgroundCorner.png")));
    mousePropertiesLabel[18] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesBusy.png")));
    mousePropertiesLabel[19] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesBusySelected.png")));
    mousePropertiesLabel[20] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesBusyCorner.png")));
    mousePropertiesLabel[21] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesPrecisionSelect.png")));
    mousePropertiesLabel[22] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesPrecisionSelectSelected.png")));
    mousePropertiesLabel[23] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesPrecisionSelectCorner.png")));
    mousePropertiesLabel[24] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesTextSelect.png")));
    mousePropertiesLabel[25] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesTextSelectSelected.png")));
    mousePropertiesLabel[26] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MousePropertiesTextSelectCorner.png")));
    mousePropertiesLabel[9].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          mousePropertiesPanel[2].remove(mousePropertiesLabel[9]);
          mousePropertiesPanel[2].add(mousePropertiesLabel[10]);
          mousePropertiesPanel[2].revalidate();
          mousePropertiesPanel[2].repaint();
          for (int i = 13; i < 26; i += 3) {
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[i - 1]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
          for (int i = 14; i < 27; i += 3) {
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[11]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
        }
      }
    });
    mousePropertiesLabel[12].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          mousePropertiesPanel[2].remove(mousePropertiesLabel[12]);
          mousePropertiesPanel[2].add(mousePropertiesLabel[13]);
          mousePropertiesPanel[2].revalidate();
          mousePropertiesPanel[2].repaint();
          for (int i = 10; i < 26; i += 3) {
            if (i == 13) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[i - 1]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
          for (int i = 11; i < 27; i += 3) {
            if (i == 14) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[14]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
        }
      }
    });
    mousePropertiesLabel[15].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          mousePropertiesPanel[2].remove(mousePropertiesLabel[15]);
          mousePropertiesPanel[2].add(mousePropertiesLabel[16]);
          mousePropertiesPanel[2].revalidate();
          mousePropertiesPanel[2].repaint();
          for (int i = 10; i < 26; i += 3) {
            if (i == 16) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[i - 1]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
          for (int i = 11; i < 27; i += 3) {
            if (i == 17) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[17]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
        }
      }
    });
    mousePropertiesLabel[18].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          mousePropertiesPanel[2].remove(mousePropertiesLabel[18]);
          mousePropertiesPanel[2].add(mousePropertiesLabel[19]);
          mousePropertiesPanel[2].revalidate();
          mousePropertiesPanel[2].repaint();
          for (int i = 10; i < 26; i += 3) {
            if (i == 19) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[i - 1]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
          for (int i = 11; i < 27; i += 3) {
            if (i == 20) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[20]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
        }
      }
    });
    mousePropertiesLabel[21].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          mousePropertiesPanel[2].remove(mousePropertiesLabel[21]);
          mousePropertiesPanel[2].add(mousePropertiesLabel[22]);
          mousePropertiesPanel[2].revalidate();
          mousePropertiesPanel[2].repaint();
          for (int i = 10; i < 26; i += 3) {
            if (i == 22) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[i - 1]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
          for (int i = 11; i < 27; i += 3) {
            if (i == 23) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[23]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
        }
      }
    });
    mousePropertiesLabel[24].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          mousePropertiesPanel[2].remove(mousePropertiesLabel[24]);
          mousePropertiesPanel[2].add(mousePropertiesLabel[25]);
          mousePropertiesPanel[2].revalidate();
          mousePropertiesPanel[2].repaint();
          for (int i = 10; i < 26; i += 3) {
            if (i == 25) {
              continue;
            }
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[i - 1]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
          for (int i = 11; i < 24; i += 3) {
            if (mousePropertiesLabel[i].getParent() != null) {
              mousePropertiesPanel[2].remove(mousePropertiesLabel[i]);
              mousePropertiesPanel[2].add(mousePropertiesLabel[26]);
              mousePropertiesPanel[2].revalidate();
              mousePropertiesPanel[2].repaint();
            }
          }
        }
      }
    });
    for (int i = 9; i < 11; i++) {
      mousePropertiesLabel[i].setBounds(10, 138, 515, 54);
    }
    for (int i = 12; i < 14; i++) {
      mousePropertiesLabel[i].setBounds(10, 192, 515, 54);
    }
    for (int i = 15; i < 17; i++) {
      mousePropertiesLabel[i].setBounds(10, 246, 515, 54);
    }
    for (int i = 18; i < 20; i++) {
      mousePropertiesLabel[i].setBounds(10, 300, 515, 54);
    }
    for (int i = 21; i < 23; i++) {
      mousePropertiesLabel[i].setBounds(10, 354, 515, 54);
    }
    for (int i = 24; i < 26; i++) {
      mousePropertiesLabel[i].setBounds(10, 408, 515, 54);
    }
    for (int i = 11; i < 27; i += 3) {
      mousePropertiesLabel[i].setBounds(420, 15, 123, 119);
    }
    for (int i = 10; i < 13; i++) {
      mousePropertiesPanel[2].add(mousePropertiesLabel[i]);
    }
    mousePropertiesPanel[2].add(mousePropertiesLabel[15]);
    mousePropertiesPanel[2].add(mousePropertiesLabel[18]);
    mousePropertiesPanel[2].add(mousePropertiesLabel[21]);
    mousePropertiesPanel[2].add(mousePropertiesLabel[24]);
    mousePropertiesButton[5] = new JButton("Use Default");
    mousePropertiesButton[6] = new JButton("Browse...");
    mousePropertiesButton[5].setBounds(260, 490, 120, 33);
    mousePropertiesButton[6].setBounds(390, 490, 120, 33);
    for (int i = 2; i < 6; i++) {
      if (i == 3) {
        continue;
      }
      mousePropertiesButton[i].setEnabled(false);
    }
    for (int i = 0; i < 3; i++) {
      mouseProperties.add(mousePropertiesButton[i]);
    }
    for (int i = 3; i < 7; i++) {
      mousePropertiesPanel[2].add(mousePropertiesButton[i]);
    }
    // Motion Tab
    mousePropertiesSlider[1].setBounds(120, 50, 375, 30);
    mousePropertiesCheckBox = new JCheckBox("Show pointer trails");
    mousePropertiesCheckBox.addActionListener(this);
    mousePropertiesCheckBox.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        mousePropertiesButton[2].setEnabled(true);
      }
    });
    mousePropertiesSlider[2].setBounds(120, 240, 375, 30);
    for (int i = 1; i < 3; i++) {
      mousePropertiesPanel[3].add(mousePropertiesSlider[i]);
    }
    // General Tab
    mousePropertiesTextField = new JTextField("Standard PS/2 Port Mouse");
    mousePropertiesTextField.setBackground(gray);
    mousePropertiesTextField.setBounds(20, 150, 350, 30);
    mousePropertiesTextField.setEditable(false);
    mousePropertiesTextField.setFont(MSSansSerif16);
    mousePropertiesPanel[4].add(mousePropertiesTextField);
    mousePropertiesButton[7] = new JButton("Change...");
    mousePropertiesButton[7].setBounds(400, 150, 120, 33);
    mousePropertiesPanel[4].add(mousePropertiesButton[7]);
    mousePropertiesCheckBox.setBounds(100, 200, 200, 30);
    mousePropertiesCheckBox.setFont(MSSansSerif16);
    mousePropertiesPanel[3].add(mousePropertiesCheckBox);
    for (int i = 0; i < 8; i++) {
      mousePropertiesButton[i].addActionListener(this);
      mousePropertiesButton[i].setFont(MSSansSerif16);
    }
    // Dialog Button
    mousePropertiesDialogButton = new JButton[8];
    // Save Scheme
    mousePropertiesSaveScheme = new JDialog();
    mousePropertiesSaveScheme.setAlwaysOnTop(true);
    mousePropertiesSaveScheme.setBounds(150, 150, 500, 270);
    mousePropertiesSaveScheme.setLayout(null);
    mousePropertiesSaveScheme.setResizable(false);
    mousePropertiesSaveScheme.setTitle("Save Scheme");
    mousePropertiesSaveSchemeTextField = new JTextField();
    mousePropertiesSaveSchemeTextField.setBounds(10, 20, 450, 30);
    mousePropertiesSaveScheme.add(mousePropertiesSaveSchemeTextField);
    mousePropertiesDialogButton[0] = new JButton("OK");
    mousePropertiesDialogButton[1] = new JButton("Cancel");
    mousePropertiesDialogButton[0].setBounds(150, 100, 120, 30);
    mousePropertiesDialogButton[1].setBounds(280, 100, 120, 30);
    mousePropertiesDialogButton[0].setEnabled(false);
    for (int i = 0; i < 2; i++) {
      mousePropertiesDialogButton[i].addActionListener(this);
      mousePropertiesDialogButton[i].setFont(MSSansSerif16);
      mousePropertiesSaveScheme.add(mousePropertiesDialogButton[i]);
    }
    // Select Device
    mousePropertiesChange = new JDialog();
    mousePropertiesChange.setAlwaysOnTop(true);
    mousePropertiesChange.setBounds(50, 50, 500, 500);
    mousePropertiesChange.setLayout(null);
    mousePropertiesChange.setResizable(false);
    mousePropertiesChange.setTitle("Select Device");

  }

  public void controlPanelMultimediaMethod() {
    multimediaProperties = new JDialog();
    multimediaProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        multimediaPropertiesTabbedPane.setSelectedIndex(0);
        for (int i = 0; i < 3; i++) {
          multimediaPropertiesComboBox[i].setSelectedIndex(1);
        }
        multimediaPropertiesCheckBox[0].setSelected(true);
        multimediaPropertiesCheckBox[1].setSelected(false);
        multimediaPropertiesRadioButton[0].setSelected(true);
        multimediaPropertiesRadioButton[1].setSelected(false);
        multimediaPropertiesRadioButton[2].setSelected(true);
        multimediaPropertiesRadioButton[3].setSelected(false);
        multimediaPropertiesTextField.setEnabled(true);
        multimediaPropertiesList.setEnabled(true);
        multimediaPropertiesComboBox[4].setEnabled(false);
        multimediaPropertiesButton[2].setEnabled(false);
        multimediaPropertiesButton[4].setEnabled(false);
        multimediaPropertiesComboBox[3].setSelectedIndex(0);
        for (int i = 12; i < 18; i++) {
          multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
          multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[11]);
          multimediaPropertiesPanel[2].revalidate();
          multimediaPropertiesPanel[2].repaint();
        }
      }
    });
    multimediaProperties.setAlwaysOnTop(true);
    multimediaProperties.setBounds(50, 0, 590, 675);
    multimediaProperties.setLayout(null);
    multimediaProperties.setResizable(false);
    multimediaProperties.setTitle("Multimedia Properties");
    multimediaPropertiesPanel = new JPanel[6];
    for (int i = 0; i < 6; i++) {
      multimediaPropertiesPanel[i] = new JPanel();
    }
    multimediaPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    multimediaPropertiesPanel[0].setBounds(10, 15, 560, 575);
    multimediaPropertiesPanel[0].setLayout(new GridLayout());
    for (int i = 1; i < 6; i++) {
      multimediaPropertiesPanel[i].setLayout(null);
    }
    multimediaPropertiesTabbedPane = new JTabbedPane();
    multimediaPropertiesTabbedPane.addTab("Audio", multimediaPropertiesPanel[1]);
    multimediaPropertiesTabbedPane.addTab("Video", multimediaPropertiesPanel[2]);
    multimediaPropertiesTabbedPane.addTab("MIDI", multimediaPropertiesPanel[3]);
    multimediaPropertiesTabbedPane.addTab("CD Music", multimediaPropertiesPanel[4]);
    multimediaPropertiesTabbedPane.addTab("Advanced", multimediaPropertiesPanel[5]);
    multimediaPropertiesTabbedPane.setFont(MSSansSerif16);
    multimediaPropertiesPanel[0].add(multimediaPropertiesTabbedPane);
    multimediaProperties.add(multimediaPropertiesPanel[0]);
    multimediaPropertiesLabel = new JLabel[27];
    multimediaPropertiesSlider = new JSlider[3];
    for (int i = 0; i < 3; i++) {
      multimediaPropertiesSlider[i] = new JSlider();
    }
    multimediaPropertiesComboBox = new JComboBox[6];
    for (int i = 0; i < 6; i++) {
      multimediaPropertiesComboBox[i] = new JComboBox < String > ();
    }
    multimediaPropertiesCheckBox = new JCheckBox[5];
    multimediaPropertiesButton = new JButton[10];
    // Multimedia Properties Buttons
    multimediaPropertiesButton[0] = new JButton("OK");
    multimediaPropertiesButton[1] = new JButton("Cancel");
    multimediaPropertiesButton[2] = new JButton("Apply");
    multimediaPropertiesButton[0].setBounds(190, 600, 120, 33);
    multimediaPropertiesButton[1].setBounds(320, 600, 120, 33);
    multimediaPropertiesButton[2].setBounds(450, 600, 120, 33);
    multimediaPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      multimediaProperties.add(multimediaPropertiesButton[i]);
    }
    multimediaPropertiesRadioButton = new JRadioButton[4];
    multimediaPropertiesButtonGroup = new ButtonGroup[2];
    for (int i = 0; i < 2; i++) {
      multimediaPropertiesButtonGroup[i] = new ButtonGroup();
    }
    // Audio Tab
    multimediaPropertiesLabel[0] = new JLabel("Playback");
    multimediaPropertiesLabel[1] = new JLabel("Volume:  Low");
    multimediaPropertiesLabel[2] = new JLabel("High");
    multimediaPropertiesLabel[3] = new JLabel("Preferred device:");
    multimediaPropertiesLabel[4] = new JLabel("Recording");
    multimediaPropertiesLabel[5] = new JLabel("Volume:  Low");
    multimediaPropertiesLabel[6] = new JLabel("High");
    multimediaPropertiesLabel[7] = new JLabel("Preferred device:");
    multimediaPropertiesLabel[8] = new JLabel("Preferred quality:");
    multimediaPropertiesLabel[9] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaPropertiesPlayback.png")));
    multimediaPropertiesLabel[10] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaPropertiesRecording.png")));
    multimediaPropertiesLabel[0].setBounds(20, 20, 100, 30);
    multimediaPropertiesLabel[1].setBounds(120, 55, 200, 30);
    multimediaPropertiesLabel[2].setBounds(450, 55, 75, 30);
    multimediaPropertiesLabel[3].setBounds(120, 100, 200, 30);
    multimediaPropertiesLabel[4].setBounds(20, 220, 150, 30);
    multimediaPropertiesLabel[5].setBounds(120, 245, 150, 30);
    multimediaPropertiesLabel[6].setBounds(450, 245, 100, 30);
    multimediaPropertiesLabel[7].setBounds(120, 300, 200, 30);
    multimediaPropertiesLabel[8].setBounds(120, 375, 200, 30);
    multimediaPropertiesLabel[9].setBounds(20, 55, 53, 53);
    multimediaPropertiesLabel[10].setBounds(20, 245, 53, 53);
    for (int i = 0; i < 11; i++) {
      multimediaPropertiesPanel[1].add(multimediaPropertiesLabel[i]);
    }
    multimediaPropertiesSlider[0].setBounds(220, 60, 200, 30);
    multimediaPropertiesSlider[1].setBounds(220, 250, 200, 30);
    for (int i = 0; i < 2; i++) {
      multimediaPropertiesPanel[1].add(multimediaPropertiesSlider[i]);
    }
    for (int i = 0; i < 2; i++) {
      multimediaPropertiesComboBox[i].addItem("(None)");
      multimediaPropertiesComboBox[i].addItem("SB16 Wave Out (220)");
    }
    multimediaPropertiesComboBox[2].addItem("CD Quality");
    multimediaPropertiesComboBox[2].addItem("Radio Quality");
    multimediaPropertiesComboBox[2].addItem("Telephone Quality");
    multimediaPropertiesComboBox[2].setBounds(120, 400, 200, 30);
    for (int i = 0; i < 3; i++) {
      multimediaPropertiesComboBox[i].setFont(MSSansSerif16);
      multimediaPropertiesComboBox[i].setSelectedIndex(1);
      multimediaPropertiesPanel[1].add(multimediaPropertiesComboBox[i]);
    }
    multimediaPropertiesComboBox[0].setBounds(120, 130, 350, 30);
    multimediaPropertiesComboBox[1].setBounds(120, 330, 350, 30);
    multimediaPropertiesCheckBox[0] = new JCheckBox("Show volume control on the taskbar");
    multimediaPropertiesCheckBox[1] = new JCheckBox("Use preferred devices only");
    multimediaPropertiesCheckBox[0].setBounds(120, 165, 400, 30);
    multimediaPropertiesCheckBox[1].setBounds(25, 490, 300, 30);
    multimediaPropertiesCheckBox[0].setSelected(true);
    for (int i = 0; i < 2; i++) {
      multimediaPropertiesCheckBox[i].addActionListener(this);
      multimediaPropertiesCheckBox[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          multimediaPropertiesButton[2].setEnabled(true);
        }
      });
      multimediaPropertiesCheckBox[i].setFont(MSSansSerif16);
      multimediaPropertiesPanel[1].add(multimediaPropertiesCheckBox[i]);
    }
    multimediaPropertiesButton[3] = new JButton("Customize...");
    multimediaPropertiesButton[3].setBounds(350, 400, 125, 33);
    multimediaPropertiesPanel[1].add(multimediaPropertiesButton[3]);
    // Video Tab
    multimediaPropertiesLabel[11] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaPropertiesOriginalSize.png")));
    multimediaPropertiesLabel[12] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaPropertiesDoubleOriginalSize.png")));
    multimediaPropertiesLabel[13] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaProperties1_16OfScreenSize.png")));
    multimediaPropertiesLabel[14] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaProperties1_4OfScreenSize.png")));
    multimediaPropertiesLabel[15] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaProperties1_2OfScreenSize.png")));
    multimediaPropertiesLabel[16] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaPropertiesMaximized.png")));
    multimediaPropertiesLabel[17] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("MultimediaPropertiesFullScreen.png")));
    for (int i = 11; i < 18; i++) {
      multimediaPropertiesLabel[i].setBounds(140, 10, 290, 263);
    }
    multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[11]);
    multimediaPropertiesLabel[18] = new JLabel("Show video in");
    multimediaPropertiesLabel[18].setBounds(25, 300, 150, 30);
    multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[18]);
    multimediaPropertiesRadioButton[0] = new JRadioButton("Window");
    multimediaPropertiesRadioButton[1] = new JRadioButton("Full screen");
    multimediaPropertiesRadioButton[0].setBounds(25, 330, 100, 30);
    multimediaPropertiesRadioButton[1].setBounds(25, 365, 150, 30);
    multimediaPropertiesRadioButton[0].setSelected(true);
    for (int i = 0; i < 2; i++) {
      multimediaPropertiesButtonGroup[0].add(multimediaPropertiesRadioButton[i]);
      multimediaPropertiesPanel[2].add(multimediaPropertiesRadioButton[i]);
    }
    multimediaPropertiesComboBox[3].addItem("Original size");
    multimediaPropertiesComboBox[3].addItem("Double original size");
    multimediaPropertiesComboBox[3].addItem("1/16 of screen size");
    multimediaPropertiesComboBox[3].addItem("1/4 of screen size");
    multimediaPropertiesComboBox[3].addItem("1/2 of screen size");
    multimediaPropertiesComboBox[3].addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        multimediaPropertiesButton[2].setEnabled(true);
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == 0) {
          for (int i = 12; i < 18; i++) {
            multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
            multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[11]);
            multimediaPropertiesPanel[2].revalidate();
            multimediaPropertiesPanel[2].repaint();
          }
        }
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == 1) {
          for (int i = 11; i < 18; i++) {
            if (i == 12) {
              continue;
            }
            multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
            multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[12]);
            multimediaPropertiesPanel[2].revalidate();
            multimediaPropertiesPanel[2].repaint();
          }
        }
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == 2) {
          for (int i = 11; i < 18; i++) {
            if (i == 13) {
              continue;
            }
            multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
            multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[13]);
            multimediaPropertiesPanel[2].revalidate();
            multimediaPropertiesPanel[2].repaint();
          }
        }
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == 3) {
          for (int i = 11; i < 18; i++) {
            if (i == 14) {
              continue;
            }
            multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
            multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[14]);
            multimediaPropertiesPanel[2].revalidate();
            multimediaPropertiesPanel[2].repaint();
          }
        }
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == 4) {
          for (int i = 11; i < 18; i++) {
            if (i == 15) {
              continue;
            }
            multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
            multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[15]);
            multimediaPropertiesPanel[2].revalidate();
            multimediaPropertiesPanel[2].repaint();
          }
        }
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == 5) {
          for (int i = 11; i < 18; i++) {
            if (i == 16) {
              continue;
            }
            multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
            multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[16]);
            multimediaPropertiesPanel[2].revalidate();
            multimediaPropertiesPanel[2].repaint();
          }
        }
      }
    });
    multimediaPropertiesComboBox[3].setBounds(150, 330, 350, 30);
    multimediaPropertiesPanel[2].add(multimediaPropertiesComboBox[3]);
    // MIDI Tab
    multimediaPropertiesLabel[19] = new JLabel("MIDI output");
    multimediaPropertiesLabel[20] = new JLabel("MIDI scheme:");
    multimediaPropertiesLabel[19].setBounds(20, 20, 150, 30);
    multimediaPropertiesLabel[20].setBounds(50, 300, 150, 30);
    for (int i = 19; i < 21; i++) {
      multimediaPropertiesPanel[3].add(multimediaPropertiesLabel[i]);
    }
    multimediaPropertiesRadioButton[2] = new JRadioButton("Single instrument");
    multimediaPropertiesRadioButton[3] = new JRadioButton("Custom configuration");
    multimediaPropertiesRadioButton[2].setBounds(50, 50, 300, 30);
    multimediaPropertiesRadioButton[3].setBounds(50, 260, 300, 30);
    for (int i = 2; i < 4; i++) {
      multimediaPropertiesButtonGroup[1].add(multimediaPropertiesRadioButton[i]);
      multimediaPropertiesPanel[3].add(multimediaPropertiesRadioButton[i]);
    }
    for (int i = 0; i < 4; i++) {
      multimediaPropertiesRadioButton[i].addActionListener(this);
      multimediaPropertiesRadioButton[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          multimediaPropertiesButton[2].setEnabled(true);
        }
      });
      multimediaPropertiesRadioButton[i].setFont(MSSansSerif16);
    }
    multimediaPropertiesTextField = new JTextField("MIDI for MPU-401 Compatible");
    multimediaPropertiesTextField.setBorder(BorderFactory.createRaisedBevelBorder());
    multimediaPropertiesTextField.setBounds(50, 100, 450, 30);
    multimediaPropertiesTextField.setEditable(false);
    multimediaPropertiesTextField.setFont(MSSansSerif16);
    multimediaPropertiesPanel[3].add(multimediaPropertiesTextField);
    MIDIoutput = new String[2];
    MIDIoutput[0] = "MIDI for MPU-401 Compatible";
    multimediaPropertiesList = new JList < Object > (MIDIoutput);
    multimediaPropertiesList.setBorder(BorderFactory.createRaisedBevelBorder());
    multimediaPropertiesList.setBounds(50, 150, 450, 100);
    multimediaPropertiesList.setFont(MSSansSerif16);
    multimediaPropertiesList.setSelectedIndex(0);
    multimediaPropertiesPanel[3].add(multimediaPropertiesList);
    multimediaPropertiesComboBox[4].addItem("Default");
    multimediaPropertiesComboBox[4].setBounds(50, 340, 300, 30);
    multimediaPropertiesComboBox[4].setEnabled(false);
    multimediaPropertiesPanel[3].add(multimediaPropertiesComboBox[4]);
    for (int i = 0; i < 5; i++) {
      multimediaPropertiesComboBox[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          multimediaPropertiesButton[2].setEnabled(true);
        }
      });
      multimediaPropertiesComboBox[i].setFont(MSSansSerif16);
    }
    multimediaPropertiesButton[4] = new JButton("Configure...");
    multimediaPropertiesButton[4].setEnabled(false);
    multimediaPropertiesButton[5] = new JButton("Add New Instrument...");
    multimediaPropertiesButton[4].setBounds(370, 340, 120, 33);
    multimediaPropertiesButton[5].setBounds(320, 400, 200, 33);
    for (int i = 4; i < 6; i++) {
      multimediaPropertiesPanel[3].add(multimediaPropertiesButton[i]);
    }
    // CD Music Tab
    multimediaPropertiesLabel[21] = new JLabel("Volume settings");
    multimediaPropertiesLabel[22] = new JLabel("CD-ROM drive:");
    multimediaPropertiesLabel[23] = new JLabel("Headphone:");
    multimediaPropertiesLabel[24] = new JLabel("Low");
    multimediaPropertiesLabel[25] = new JLabel("High");
    multimediaPropertiesLabel[21].setBounds(20, 20, 200, 30);
    multimediaPropertiesLabel[22].setBounds(20, 60, 200, 30);
    multimediaPropertiesLabel[23].setBounds(20, 100, 200, 30);
    multimediaPropertiesLabel[24].setBounds(150, 100, 100, 30);
    multimediaPropertiesLabel[25].setBounds(400, 100, 100, 30);
    for (int i = 21; i < 26; i++) {
      multimediaPropertiesPanel[4].add(multimediaPropertiesLabel[i]);
    }
    multimediaPropertiesComboBox[5].addItem("");
    multimediaPropertiesComboBox[5].setBounds(150, 60, 65, 30);
    multimediaPropertiesComboBox[5].setEnabled(false);
    multimediaPropertiesPanel[4].add(multimediaPropertiesComboBox[5]);
    multimediaPropertiesSlider[2].setBounds(200, 105, 200, 30);
    multimediaPropertiesPanel[4].add(multimediaPropertiesSlider[2]);
    for (int i = 0; i < 3; i++) {
      multimediaPropertiesSlider[i].setPaintTicks(true);
      multimediaPropertiesSlider[i].setMajorTickSpacing(9);
    }
    // Advanced Tab
    multimediaPropertiesLabel[26] = new JLabel("Multimedia devices:");
    multimediaPropertiesLabel[26].setBounds(30, 30, 200, 30);
    multimediaPropertiesPanel[5].add(multimediaPropertiesLabel[26]);
    for (int i = 0; i < 27; i++) {
      multimediaPropertiesLabel[i].setFont(MSSansSerif16);
    }
    multimediaPropertiesButton[6] = new JButton("Properties");
    multimediaPropertiesButton[6].setBounds(380, 490, 150, 33);
    multimediaPropertiesButton[6].setEnabled(false);
    multimediaPropertiesPanel[5].add(multimediaPropertiesButton[6]);
    for (int i = 0; i < 7; i++) {
      multimediaPropertiesButton[i].addActionListener(this);
      multimediaPropertiesButton[i].setFont(MSSansSerif16);
    }

  }

  public void controlPanelNetworkMethod() {
    controlPanelNetwork = new JDialog();
    controlPanelNetwork.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        if (controlPanelNetworkLabel[3].getParent() != null) {
          controlPanelNetworkPanel[1].remove(controlPanelNetworkLabel[3]);
          controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[2]);
          controlPanelNetworkPanel[1].revalidate();
          controlPanelNetworkPanel[1].repaint();
        }
      }
    });
    controlPanelNetwork.setAlwaysOnTop(true);
    controlPanelNetwork.setBounds(50, 0, 590, 675);
    controlPanelNetwork.setLayout(null);
    controlPanelNetwork.setResizable(false);
    controlPanelNetwork.setTitle("Network");
    controlPanelNetworkPanel = new JPanel[2];
    for (int i = 0; i < 2; i++) {
      controlPanelNetworkPanel[i] = new JPanel();
    }
    controlPanelNetworkPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    controlPanelNetworkPanel[0].setBounds(10, 15, 560, 575);
    controlPanelNetworkPanel[0].setLayout(new GridLayout());
    controlPanelNetworkPanel[1].setLayout(null);
    controlPanelNetworkTabbedPane = new JTabbedPane();
    controlPanelNetworkTabbedPane.addTab("Configuration", controlPanelNetworkPanel[1]);
    controlPanelNetworkTabbedPane.setFont(MSSansSerif16);
    controlPanelNetworkPanel[0].add(controlPanelNetworkTabbedPane);
    controlPanelNetwork.add(controlPanelNetworkPanel[0]);
    controlPanelNetworkLabel = new JLabel[4];
    controlPanelNetworkLabel[0] = new JLabel("The following network components are installed:");
    controlPanelNetworkLabel[1] = new JLabel("Primary Network Logon:");
    controlPanelNetworkLabel[0].setBounds(25, 20, 400, 30);
    controlPanelNetworkLabel[1].setBounds(25, 270, 400, 30);
    for (int i = 0; i < 2; i++) {
      controlPanelNetworkLabel[i].setFont(MSSansSerif16);
      controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[i]);
    }
    controlPanelNetworkLabel[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("ControlPanelNetworkDescriptionEmpty.png")));
    controlPanelNetworkLabel[3] = new JLabel(new ImageIcon(
      getClass().getClassLoader().getResource("ControlPanelNetworkDescriptionWindowsLogon.png")));
    for (int i = 2; i < 4; i++) {
      controlPanelNetworkLabel[i].setBounds(30, 410, 479, 115);
    }
    controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[2]);
    networkComponent = new String[2];
    networkComponent[0] = "";
    controlPanelNetworkList = new JList < Object > (networkComponent);
    controlPanelNetworkList.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (controlPanelNetworkLabel[3].getParent() != null) {
          controlPanelNetworkPanel[1].remove(controlPanelNetworkLabel[3]);
          controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[2]);
          controlPanelNetworkPanel[1].revalidate();
          controlPanelNetworkPanel[1].repaint();
        }
      }
    });
    controlPanelNetworkList.setBounds(25, 55, 500, 200);
    controlPanelNetworkList.setFont(MSSansSerif16);
    controlPanelNetworkPanel[1].add(controlPanelNetworkList);
    controlPanelNetworkButton = new JButton[6];
    controlPanelNetworkButton[0] = new JButton("Add...");
    controlPanelNetworkButton[1] = new JButton("Remove");
    controlPanelNetworkButton[2] = new JButton("Properties");
    controlPanelNetworkButton[3] = new JButton("File and Print Sharing...");
    controlPanelNetworkButton[4] = new JButton("OK");
    controlPanelNetworkButton[5] = new JButton("Cancel");
    controlPanelNetworkButton[0].setBounds(25, 300, 150, 33);
    controlPanelNetworkButton[1].setBounds(185, 300, 150, 33);
    controlPanelNetworkButton[2].setBounds(345, 300, 150, 33);
    controlPanelNetworkButton[3].setBounds(25, 375, 215, 33);
    controlPanelNetworkButton[4].setBounds(320, 600, 120, 33);
    controlPanelNetworkButton[5].setBounds(450, 600, 120, 33);
    for (int i = 1; i < 4; i++) {
      controlPanelNetworkButton[i].setEnabled(false);
    }
    for (int i = 0; i < 4; i++) {
      controlPanelNetworkPanel[1].add(controlPanelNetworkButton[i]);
    }
    for (int i = 4; i < 6; i++) {
      controlPanelNetwork.add(controlPanelNetworkButton[i]);
    }
    for (int i = 0; i < 6; i++) {
      controlPanelNetworkButton[i].addActionListener(this);
      controlPanelNetworkButton[i].setFont(MSSansSerif16);
    }
    controlPanelNetworkComboBox = new JComboBox < String > ();
    controlPanelNetworkComboBox.addItem("Windows Logon");
    controlPanelNetworkComboBox.addPopupMenuListener(new PopupMenuListener() {
      public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
        controlPanelNetworkPanel[1].remove(controlPanelNetworkLabel[2]);
        controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[3]);
        controlPanelNetworkPanel[1].revalidate();
        controlPanelNetworkPanel[1].repaint();
      }

      public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {

      }

      public void popupMenuCanceled(PopupMenuEvent e) {

      }
    });
    controlPanelNetworkComboBox.setBounds(25, 340, 450, 33);
    controlPanelNetworkComboBox.setFont(MSSansSerif16);
    controlPanelNetworkPanel[1].add(controlPanelNetworkComboBox);

  }

  public void controlPanelPasswordsMethod() {
    passwordsProperties = new JDialog();
    passwordsProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        passwordsPropertiesRadioButton[0].setSelected(true);
        passwordsPropertiesRadioButton[1].setSelected(false);
        passwordsPropertiesLabel.setEnabled(false);
        for (int i = 0; i < 2; i++) {
          passwordsPropertiesCheckBox[i].setEnabled(false);
          passwordsPropertiesCheckBox[i].setSelected(false);
        }
      }
    });
    passwordsProperties.setAlwaysOnTop(true);
    passwordsProperties.setBounds(50, 0, 590, 675);
    passwordsProperties.setLayout(null);
    passwordsProperties.setResizable(false);
    passwordsProperties.setTitle("Passwords Properties");
    passwordsPropertiesPanel = new JPanel[2];
    for (int i = 0; i < 2; i++) {
      passwordsPropertiesPanel[i] = new JPanel();
    }
    passwordsPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    passwordsPropertiesPanel[0].setBounds(10, 15, 560, 575);
    passwordsPropertiesPanel[0].setLayout(new GridLayout());
    passwordsPropertiesPanel[1].setLayout(null);
    passwordsPropertiesTabbedPane = new JTabbedPane();
    passwordsPropertiesTabbedPane.addTab("User Profiles", passwordsPropertiesPanel[1]);
    passwordsPropertiesTabbedPane.setFont(MSSansSerif16);
    passwordsPropertiesPanel[0].add(passwordsPropertiesTabbedPane);
    passwordsProperties.add(passwordsPropertiesPanel[0]);
    passwordsPropertiesRadioButton = new JRadioButton[2];
    passwordsPropertiesRadioButton[0] = new JRadioButton(
      "<html>All users of this PC use the same preferences and<br>" + "desktop settings.</html>");
    passwordsPropertiesRadioButton[1] = new JRadioButton(
      "<html>Users can customize their preferences and desktop<br>" +
      "settings. Windows switches to your personal settings <br>" + "whenever you log in.</html>");
    passwordsPropertiesRadioButton[0].setBounds(30, 20, 560, 60);
    passwordsPropertiesRadioButton[1].setBounds(30, 125, 550, 90);
    passwordsPropertiesRadioButton[0].setSelected(true);
    passwordsPropertiesButtonGroup = new ButtonGroup();
    for (int i = 0; i < 2; i++) {
      passwordsPropertiesRadioButton[i].addActionListener(this);
      passwordsPropertiesRadioButton[i].setFont(MSSansSerif16);
      passwordsPropertiesButtonGroup.add(passwordsPropertiesRadioButton[i]);
      passwordsPropertiesPanel[1].add(passwordsPropertiesRadioButton[i]);
    }
    passwordsPropertiesLabel = new JLabel("User Profile Settings");
    passwordsPropertiesLabel.setBounds(30, 240, 300, 30);
    passwordsPropertiesLabel.setEnabled(false);
    passwordsPropertiesLabel.setFont(MSSansSerif16);
    passwordsPropertiesPanel[1].add(passwordsPropertiesLabel);
    passwordsPropertiesCheckBox = new JCheckBox[2];
    passwordsPropertiesCheckBox[0] = new JCheckBox(
      "<html>Include desktop icons and Network Neighborhood<br>" + "contents in user settings</html>");
    passwordsPropertiesCheckBox[1] = new JCheckBox(
      "<html>Include Start Menu and Program groups in user<br>" + "settings</html>");
    passwordsPropertiesCheckBox[0].setBounds(30, 275, 560, 60);
    passwordsPropertiesCheckBox[1].setBounds(30, 350, 550, 60);
    for (int i = 0; i < 2; i++) {
      passwordsPropertiesCheckBox[i].addActionListener(this);
      passwordsPropertiesCheckBox[i].setEnabled(false);
      passwordsPropertiesCheckBox[i].setFont(MSSansSerif16);
      passwordsPropertiesPanel[1].add(passwordsPropertiesCheckBox[i]);
    }
    passwordsPropertiesButton = new JButton[2];
    passwordsPropertiesButton[0] = new JButton("OK");
    passwordsPropertiesButton[1] = new JButton("Cancel");
    passwordsPropertiesButton[0].setBounds(320, 600, 120, 33);
    passwordsPropertiesButton[1].setBounds(450, 600, 120, 33);
    for (int i = 0; i < 2; i++) {
      passwordsPropertiesButton[i].addActionListener(this);
      passwordsPropertiesButton[i].setFont(MSSansSerif16);
      passwordsProperties.add(passwordsPropertiesButton[i]);
    }
  }

  @SuppressWarnings("unchecked")
  public void controlPanelRegionalSettingsMethod() {
    regionalSettingsProperties = new JDialog();
    regionalSettingsProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        regionalSettingsPropertiesTabbedPane.setSelectedIndex(0);
        regionalSettingsPropertiesButton[2].setEnabled(false);
        regionalSettingsPropertiesComboBox[0].setSelectedIndex(14);
        regionalSettingsPropertiesComboBox[1].setSelectedIndex(0);
        regionalSettingsPropertiesComboBox[2].setSelectedIndex(2);
        regionalSettingsPropertiesComboBox[3].setSelectedIndex(0);
        regionalSettingsPropertiesComboBox[4].setSelectedIndex(3);
        regionalSettingsPropertiesComboBox[5].setSelectedIndex(0);
        for (int i = 6; i < 9; i++) {
          regionalSettingsPropertiesComboBox[i].setSelectedIndex(1);
        }
        for (int i = 9; i < 14; i++) {
          regionalSettingsPropertiesComboBox[i].setSelectedIndex(0);
        }
        regionalSettingsPropertiesComboBox[14].setSelectedIndex(2);
        regionalSettingsPropertiesComboBox[15].setSelectedIndex(0);
        regionalSettingsPropertiesComboBox[16].setSelectedIndex(3);
        for (int i = 17; i < 25; i++) {
          if (i == 21) {
            continue;
          }
          regionalSettingsPropertiesComboBox[i].setSelectedIndex(0);
        }
      }
    });
    regionalSettingsProperties.setAlwaysOnTop(true);
    regionalSettingsProperties.setBounds(50, 0, 590, 675);
    regionalSettingsProperties.setLayout(null);
    regionalSettingsProperties.setResizable(false);
    regionalSettingsProperties.setTitle("Regional Settings Properties");
    regionalSettingsPropertiesPanel = new JPanel[6];
    for (int i = 0; i < 6; i++) {
      regionalSettingsPropertiesPanel[i] = new JPanel();
    }
    regionalSettingsPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    regionalSettingsPropertiesPanel[0].setBounds(10, 15, 560, 570);
    regionalSettingsPropertiesPanel[0].setLayout(new GridLayout());
    for (int i = 1; i < 6; i++) {
      regionalSettingsPropertiesPanel[i].setLayout(null);
    }
    regionalSettingsPropertiesTabbedPane = new JTabbedPane();
    regionalSettingsPropertiesTabbedPane.addTab("Regional Settings", regionalSettingsPropertiesPanel[1]);
    regionalSettingsPropertiesTabbedPane.addTab("Number", regionalSettingsPropertiesPanel[2]);
    regionalSettingsPropertiesTabbedPane.addTab("Currency ", regionalSettingsPropertiesPanel[3]);
    regionalSettingsPropertiesTabbedPane.addTab("Time  ", regionalSettingsPropertiesPanel[4]);
    regionalSettingsPropertiesTabbedPane.addTab("Date  ", regionalSettingsPropertiesPanel[5]);
    regionalSettingsPropertiesTabbedPane.setFont(MSSansSerif16);
    regionalSettingsPropertiesPanel[0].add(regionalSettingsPropertiesTabbedPane);
    regionalSettingsProperties.add(regionalSettingsPropertiesPanel[0]);
    regionalSettingsPropertiesLabel = new JLabel[39];
    regionalSettingsPropertiesLabel[0] = new JLabel(
      "<html>Many programs support international settings. Changing the Regional<br>" +
      "Settins affects the way these programs display and sort dates, tims,<br>" +
      "currency, and numbers.</html>");
    regionalSettingsPropertiesLabel[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("RegionalSettingsPropertiesMap.png")));
    regionalSettingsPropertiesLabel[0].setBounds(10, 20, 500, 90);
    regionalSettingsPropertiesLabel[1].setBounds(10, 160, 542, 285);
    for (int i = 0; i < 2; i++) {
      regionalSettingsPropertiesPanel[1].add(regionalSettingsPropertiesLabel[i]);
    }
    regionalSettingsPropertiesLabel[2] = new JLabel("Appearance samples");
    regionalSettingsPropertiesLabel[3] = new JLabel("Positive:");
    regionalSettingsPropertiesLabel[4] = new JLabel("Negative:");
    regionalSettingsPropertiesLabel[5] = new JLabel("Decimal symbol:");
    regionalSettingsPropertiesLabel[6] = new JLabel("No. of digits after decimal:");
    regionalSettingsPropertiesLabel[7] = new JLabel("Digit grouping symbol:");
    regionalSettingsPropertiesLabel[8] = new JLabel("No. of digits in group:");
    regionalSettingsPropertiesLabel[9] = new JLabel("Negative sign symbol:");
    regionalSettingsPropertiesLabel[10] = new JLabel("Negative number format:");
    regionalSettingsPropertiesLabel[11] = new JLabel("Display leading zeroes:");
    regionalSettingsPropertiesLabel[12] = new JLabel("Measurement system:");
    regionalSettingsPropertiesLabel[13] = new JLabel("List separator:");
    regionalSettingsPropertiesLabel[2].setBounds(30, 20, 300, 30);
    regionalSettingsPropertiesLabel[3].setBounds(30, 50, 100, 30);
    regionalSettingsPropertiesLabel[4].setBounds(280, 50, 100, 30);
    regionalSettingsPropertiesLabel[5].setBounds(30, 100, 200, 30);
    regionalSettingsPropertiesLabel[6].setBounds(30, 140, 300, 30);
    regionalSettingsPropertiesLabel[7].setBounds(30, 180, 300, 30);
    regionalSettingsPropertiesLabel[8].setBounds(30, 220, 300, 30);
    regionalSettingsPropertiesLabel[9].setBounds(30, 280, 300, 30);
    regionalSettingsPropertiesLabel[10].setBounds(30, 320, 300, 30);
    regionalSettingsPropertiesLabel[11].setBounds(30, 360, 300, 30);
    regionalSettingsPropertiesLabel[12].setBounds(30, 400, 300, 30);
    regionalSettingsPropertiesLabel[13].setBounds(30, 440, 300, 30);
    for (int i = 2; i < 14; i++) {
      regionalSettingsPropertiesPanel[2].add(regionalSettingsPropertiesLabel[i]);
    }
    regionalSettingsPropertiesLabel[14] = new JLabel("Appearance samples");
    regionalSettingsPropertiesLabel[15] = new JLabel("Positive:");
    regionalSettingsPropertiesLabel[16] = new JLabel("Negative:");
    regionalSettingsPropertiesLabel[17] = new JLabel("¤ = Universal currency symbol");
    regionalSettingsPropertiesLabel[18] = new JLabel("Currency symbol:");
    regionalSettingsPropertiesLabel[19] = new JLabel("Position of currency symbol:");
    regionalSettingsPropertiesLabel[20] = new JLabel("Negative number format:");
    regionalSettingsPropertiesLabel[21] = new JLabel("Decimal symbol:");
    regionalSettingsPropertiesLabel[22] = new JLabel("No. of digits after decimal:");
    regionalSettingsPropertiesLabel[23] = new JLabel("Digit grouping symbol:");
    regionalSettingsPropertiesLabel[24] = new JLabel("Number of digits in group:");
    regionalSettingsPropertiesLabel[14].setBounds(30, 20, 300, 30);
    regionalSettingsPropertiesLabel[15].setBounds(30, 50, 100, 30);
    regionalSettingsPropertiesLabel[16].setBounds(280, 50, 100, 30);
    regionalSettingsPropertiesLabel[17].setBounds(30, 100, 350, 30);
    regionalSettingsPropertiesLabel[18].setBounds(30, 140, 300, 30);
    regionalSettingsPropertiesLabel[19].setBounds(30, 180, 300, 30);
    regionalSettingsPropertiesLabel[20].setBounds(30, 220, 300, 30);
    regionalSettingsPropertiesLabel[21].setBounds(30, 280, 300, 30);
    regionalSettingsPropertiesLabel[22].setBounds(30, 320, 300, 30);
    regionalSettingsPropertiesLabel[23].setBounds(30, 360, 300, 30);
    regionalSettingsPropertiesLabel[24].setBounds(30, 400, 300, 30);
    for (int i = 14; i < 25; i++) {
      regionalSettingsPropertiesPanel[3].add(regionalSettingsPropertiesLabel[i]);
    }
    regionalSettingsPropertiesLabel[25] = new JLabel("Appearance");
    regionalSettingsPropertiesLabel[26] = new JLabel("Time sample:");
    regionalSettingsPropertiesLabel[27] = new JLabel("Time style:");
    regionalSettingsPropertiesLabel[28] = new JLabel("Time separator:");
    regionalSettingsPropertiesLabel[29] = new JLabel("AM symbol:");
    regionalSettingsPropertiesLabel[30] = new JLabel("PM symbol:");
    regionalSettingsPropertiesLabel[25].setBounds(30, 20, 200, 30);
    regionalSettingsPropertiesLabel[26].setBounds(30, 60, 200, 30);
    regionalSettingsPropertiesLabel[27].setBounds(30, 100, 200, 30);
    regionalSettingsPropertiesLabel[28].setBounds(30, 140, 200, 30);
    regionalSettingsPropertiesLabel[29].setBounds(30, 200, 200, 30);
    regionalSettingsPropertiesLabel[30].setBounds(30, 240, 200, 30);
    for (int i = 25; i < 31; i++) {
      regionalSettingsPropertiesPanel[4].add(regionalSettingsPropertiesLabel[i]);
    }
    regionalSettingsPropertiesLabel[31] = new JLabel("Calender type:");
    regionalSettingsPropertiesLabel[32] = new JLabel("Short date");
    regionalSettingsPropertiesLabel[33] = new JLabel("Short date sample:");
    regionalSettingsPropertiesLabel[34] = new JLabel("Short date style:");
    regionalSettingsPropertiesLabel[35] = new JLabel("Date separator:");
    regionalSettingsPropertiesLabel[36] = new JLabel("Long date");
    regionalSettingsPropertiesLabel[37] = new JLabel("Long date sample:");
    regionalSettingsPropertiesLabel[38] = new JLabel("Long date style:");
    regionalSettingsPropertiesLabel[31].setBounds(30, 20, 200, 30);
    regionalSettingsPropertiesLabel[32].setBounds(30, 60, 200, 30);
    regionalSettingsPropertiesLabel[33].setBounds(30, 90, 300, 30);
    regionalSettingsPropertiesLabel[34].setBounds(30, 130, 300, 30);
    regionalSettingsPropertiesLabel[35].setBounds(30, 170, 200, 30);
    regionalSettingsPropertiesLabel[36].setBounds(30, 230, 200, 30);
    regionalSettingsPropertiesLabel[37].setBounds(30, 270, 300, 30);
    regionalSettingsPropertiesLabel[38].setBounds(30, 310, 300, 30);
    for (int i = 31; i < 39; i++) {
      regionalSettingsPropertiesPanel[5].add(regionalSettingsPropertiesLabel[i]);
    }
    for (int i = 0; i < 39; i++) {
      regionalSettingsPropertiesLabel[i].setFont(MSSansSerif16);
    }
    regionalSettingsPropertiesComboBox = new JComboBox[25];
    for (int i = 0; i < 25; i++) {
      regionalSettingsPropertiesComboBox[i] = new JComboBox < String > ();
    }
    regionalSettingsString = new String[50];
    regionalSettingsString[0] = "Afrikaans";
    regionalSettingsString[1] = "Basque";
    regionalSettingsString[2] = "Catalan";
    regionalSettingsString[3] = "Danish";
    regionalSettingsString[4] = "Dutch (Belgian)";
    regionalSettingsString[5] = "Dutch (Standard)";
    regionalSettingsString[6] = "English (Australian)";
    regionalSettingsString[7] = "English (British)";
    regionalSettingsString[8] = "English (Canadian)";
    regionalSettingsString[9] = "English (Caribbean)";
    regionalSettingsString[10] = "English (Ireland)";
    regionalSettingsString[11] = "English (Jamaica)";
    regionalSettingsString[12] = "English (New Zealand";
    regionalSettingsString[13] = "English (South Africa)";
    regionalSettingsString[14] = "English (United States)";
    regionalSettingsString[15] = "Finnish";
    regionalSettingsString[16] = "French (Belgian)";
    regionalSettingsString[17] = "French (Canadian)";
    regionalSettingsString[18] = "French (Luxembourg)";
    regionalSettingsString[19] = "French (Standard)";
    regionalSettingsString[20] = "French (Swiss)";
    regionalSettingsString[21] = "German (Austrian)";
    regionalSettingsString[22] = "German (Liechtenstein)";
    regionalSettingsString[23] = "German (Luxembourg)";
    regionalSettingsString[24] = "German (Standard)";
    regionalSettingsString[25] = "German (Swiss)";
    regionalSettingsString[26] = "Icelandic";
    regionalSettingsString[27] = "Indonesian";
    regionalSettingsString[28] = "Italian (Standard)";
    regionalSettingsString[29] = "Italian (Swiss)";
    regionalSettingsString[30] = "Norwegian (Bokmal)";
    regionalSettingsString[31] = "Norwegian (Nynorsk)";
    regionalSettingsString[32] = "Portuguese (Brazilian)";
    regionalSettingsString[33] = "Portuguese (Standard)";
    regionalSettingsString[34] = "Spanish (Argentina)";
    regionalSettingsString[35] = "Spanish (Chile)";
    regionalSettingsString[36] = "Spanish (Colombia)";
    regionalSettingsString[37] = "Spanish (Costa Rica)";
    regionalSettingsString[38] = "Spanish (Dominican Republic)";
    regionalSettingsString[39] = "Spanish (Ecuador)";
    regionalSettingsString[40] = "Spanish (Guatemala)";
    regionalSettingsString[41] = "Spanish (Mexican)";
    regionalSettingsString[42] = "Spanish (Modern Sort)";
    regionalSettingsString[43] = "Spanish (Panama)";
    regionalSettingsString[44] = "Spanish (Paraguay)";
    regionalSettingsString[45] = "Spanish (Peru)";
    regionalSettingsString[46] = "Spanish (Traidtional Sort)";
    regionalSettingsString[47] = "Spanish (Uruguay)";
    regionalSettingsString[48] = "Spanish (Venezuela)";
    regionalSettingsString[49] = "Swedish";
    for (int i = 0; i < 50; i++) {
      regionalSettingsPropertiesComboBox[0].addItem(regionalSettingsString[i]);
    }
    regionalSettingsPropertiesComboBox[0].addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        if (regionalSettingsPropertiesComboBox[0].getSelectedIndex() != 14) {
          regionalSettingsPropertiesTabbedPane.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
              if (regionalSettingsPropertiesTabbedPane.getSelectedIndex() != 0) {
                if (controlPanelOpen.isVisible() == true) {
                  controlPanelOpen.setAlwaysOnTop(false);
                }

                regionalSettingsProperties.setAlwaysOnTop(false);
                UIManager.put("OptionPane.yesButtonText", "Yes");
                UIManager.put("OptionPane.noButtonText", "No");
                int responseChangeRegionalSettings = JOptionPane.showConfirmDialog(null,
                  "You must restart your computer before the new setting will take\n" +
                  "effect.\n\n" + "Do you want to restart your computer now?",
                  "Change Regional Settings", JOptionPane.YES_NO_OPTION,
                  JOptionPane.QUESTION_MESSAGE, questionMark);
                if (responseChangeRegionalSettings == JOptionPane.YES_OPTION) {
                  disposeEveryWindowMethod();
                  rebootRequestURL = this.getClass().getClassLoader()
                    .getResource("RebootRequested.gif");
                  rebootRequest = new JLabel(new ImageIcon(rebootRequestURL));
                  mainFrame.remove(desktop);
                  mainFrame.add(rebootRequest);
                  mainFrame.revalidate();
                  mainFrame.repaint();
                  controlPanelOpen.setAlwaysOnTop(true);
                  regionalSettingsProperties.setAlwaysOnTop(true);
                  try {
                    Thread.sleep(3000);
                  } catch (InterruptedException ex) {
                    ex.printStackTrace();
                  }
                  bootingMethodThread.start();
                  new Windows95Desktop();
                } else {
                  controlPanelOpen.setAlwaysOnTop(true);
                  regionalSettingsProperties.setAlwaysOnTop(true);
                }
              }
            }
          });
        }
      }
    });
    regionalSettingsPropertiesComboBox[0].setBounds(40, 120, 470, 30);
    regionalSettingsPropertiesComboBox[0].setFont(MSSansSerif16);
    regionalSettingsPropertiesComboBox[0].setSelectedIndex(14);
    regionalSettingsPropertiesComboBox[1].addItem(".");
    for (int i = 0; i < 10; i++) {
      regionalSettingsPropertiesComboBox[2].addItem(String.valueOf(i));
      regionalSettingsPropertiesComboBox[4].addItem(String.valueOf(i));
      regionalSettingsPropertiesComboBox[14].addItem(String.valueOf(i));
      regionalSettingsPropertiesComboBox[16].addItem(String.valueOf(i));
    }
    regionalSettingsPropertiesComboBox[2].setSelectedIndex(2);
    regionalSettingsPropertiesComboBox[3].addItem(",");
    regionalSettingsPropertiesComboBox[4].setSelectedIndex(3);
    regionalSettingsPropertiesComboBox[5].addItem("-");
    regionalSettingsPropertiesComboBox[6].addItem("(1.1)");
    regionalSettingsPropertiesComboBox[6].addItem("-1.1");
    regionalSettingsPropertiesComboBox[6].addItem("- 1.1");
    regionalSettingsPropertiesComboBox[6].addItem("1.1-");
    regionalSettingsPropertiesComboBox[6].addItem("1.1 -");
    regionalSettingsPropertiesComboBox[6].setSelectedIndex(1);
    regionalSettingsPropertiesComboBox[7].addItem(".7");
    regionalSettingsPropertiesComboBox[7].addItem("0.7");
    regionalSettingsPropertiesComboBox[7].setSelectedIndex(1);
    regionalSettingsPropertiesComboBox[8].addItem("Metric");
    regionalSettingsPropertiesComboBox[8].addItem("U.S.");
    regionalSettingsPropertiesComboBox[8].setSelectedIndex(1);
    regionalSettingsPropertiesComboBox[9].addItem(",");
    regionalSettingsPropertiesComboBox[1].setBounds(240, 100, 200, 30);
    regionalSettingsPropertiesComboBox[2].setBounds(240, 100, 200, 30);
    regionalSettingsPropertiesComboBox[2].setBounds(240, 140, 200, 30);
    regionalSettingsPropertiesComboBox[3].setBounds(240, 180, 200, 30);
    regionalSettingsPropertiesComboBox[4].setBounds(240, 220, 200, 30);
    regionalSettingsPropertiesComboBox[5].setBounds(240, 280, 200, 30);
    regionalSettingsPropertiesComboBox[6].setBounds(240, 320, 200, 30);
    regionalSettingsPropertiesComboBox[7].setBounds(240, 360, 200, 30);
    regionalSettingsPropertiesComboBox[8].setBounds(240, 400, 200, 30);
    regionalSettingsPropertiesComboBox[9].setBounds(240, 440, 200, 30);
    regionalSettingsPropertiesComboBox[1].setEditable(true);
    regionalSettingsPropertiesComboBox[3].setEditable(true);
    regionalSettingsPropertiesComboBox[5].setEditable(true);
    regionalSettingsPropertiesComboBox[9].setEditable(true);
    for (int i = 1; i < 10; i++) {
      regionalSettingsPropertiesPanel[2].add(regionalSettingsPropertiesComboBox[i]);
    }
    regionalSettingsPropertiesComboBox[10].addItem("$");
    regionalSettingsPropertiesComboBox[11].addItem("¤1.1");
    regionalSettingsPropertiesComboBox[11].addItem("1.1¤");
    regionalSettingsPropertiesComboBox[11].addItem("¤ 1.1");
    regionalSettingsPropertiesComboBox[11].addItem("1.1 ¤");
    regionalSettingsPropertiesComboBox[11].setSelectedIndex(0);
    regionalSettingsPropertiesComboBox[12].addItem("(¤1.1)");
    regionalSettingsPropertiesComboBox[12].addItem("-¤1.1");
    regionalSettingsPropertiesComboBox[12].addItem("¤-1.1");
    regionalSettingsPropertiesComboBox[12].addItem("¤1.1-");
    regionalSettingsPropertiesComboBox[12].addItem("(1.1¤)");
    regionalSettingsPropertiesComboBox[12].addItem("-1.1¤");
    regionalSettingsPropertiesComboBox[12].addItem("1.1-¤");
    regionalSettingsPropertiesComboBox[12].addItem("1.1¤-");
    regionalSettingsPropertiesComboBox[12].addItem("-1.1 ¤");
    regionalSettingsPropertiesComboBox[12].addItem("-¤ 1.1");
    regionalSettingsPropertiesComboBox[12].addItem("1.1 ¤-");
    regionalSettingsPropertiesComboBox[12].addItem("¤ 1.1-");
    regionalSettingsPropertiesComboBox[12].addItem("¤ -1.1 ");
    regionalSettingsPropertiesComboBox[12].addItem("1.1- ¤");
    regionalSettingsPropertiesComboBox[12].addItem("(¤ 1.1)");
    regionalSettingsPropertiesComboBox[12].addItem("( 1.1 ¤)");
    regionalSettingsPropertiesComboBox[12].setSelectedIndex(0);
    regionalSettingsPropertiesComboBox[13].addItem(".");
    regionalSettingsPropertiesComboBox[14].setSelectedIndex(2);
    regionalSettingsPropertiesComboBox[15].addItem(",");
    regionalSettingsPropertiesComboBox[16].setSelectedIndex(3);
    regionalSettingsPropertiesComboBox[10].setBounds(240, 140, 200, 30);
    regionalSettingsPropertiesComboBox[11].setBounds(240, 180, 200, 30);
    regionalSettingsPropertiesComboBox[12].setBounds(240, 220, 200, 30);
    regionalSettingsPropertiesComboBox[13].setBounds(240, 280, 200, 30);
    regionalSettingsPropertiesComboBox[14].setBounds(240, 320, 200, 30);
    regionalSettingsPropertiesComboBox[15].setBounds(240, 360, 200, 30);
    regionalSettingsPropertiesComboBox[16].setBounds(240, 400, 200, 30);
    regionalSettingsPropertiesComboBox[10].setEditable(true);
    regionalSettingsPropertiesComboBox[13].setEditable(true);
    for (int i = 10; i < 17; i++) {
      regionalSettingsPropertiesPanel[3].add(regionalSettingsPropertiesComboBox[i]);
    }
    regionalSettingsPropertiesComboBox[17].addItem("h:mm:ss tt");
    regionalSettingsPropertiesComboBox[17].addItem("hh:mm:ss tt");
    regionalSettingsPropertiesComboBox[17].addItem("H:mm:ss");
    regionalSettingsPropertiesComboBox[17].addItem("HH:mm:ss");
    regionalSettingsPropertiesComboBox[17].setSelectedIndex(0);
    regionalSettingsPropertiesComboBox[18].addItem(":");
    regionalSettingsPropertiesComboBox[19].addItem("AM");
    regionalSettingsPropertiesComboBox[20].addItem("PM");
    regionalSettingsPropertiesComboBox[17].setBounds(145, 100, 390, 30);
    regionalSettingsPropertiesComboBox[18].setBounds(145, 140, 100, 30);
    regionalSettingsPropertiesComboBox[19].setBounds(145, 200, 100, 30);
    regionalSettingsPropertiesComboBox[20].setBounds(145, 240, 100, 30);
    for (int i = 17; i < 21; i++) {
      regionalSettingsPropertiesComboBox[i].setEditable(true);
      regionalSettingsPropertiesPanel[4].add(regionalSettingsPropertiesComboBox[i]);
    }
    regionalSettingsPropertiesComboBox[21].addItem("Gregorian Calendar");
    regionalSettingsPropertiesComboBox[22].addItem("M/d/yy");
    regionalSettingsPropertiesComboBox[22].addItem("M/d/yyyy");
    regionalSettingsPropertiesComboBox[22].addItem("MM/dd/yy");
    regionalSettingsPropertiesComboBox[22].addItem("MM/dd/yyyy");
    regionalSettingsPropertiesComboBox[22].addItem("yy/MM/dd");
    regionalSettingsPropertiesComboBox[22].addItem("dd-MMM-yy");
    regionalSettingsPropertiesComboBox[22].setSelectedIndex(0);
    regionalSettingsPropertiesComboBox[23].addItem("/");
    regionalSettingsPropertiesComboBox[24].addItem("dddd, MMMM dd, yyyy");
    regionalSettingsPropertiesComboBox[24].addItem("MMMM dd, yyyy");
    regionalSettingsPropertiesComboBox[24].addItem("dddd, dd MMMM, yyyy");
    regionalSettingsPropertiesComboBox[24].addItem("dd MMMM, yyyy");
    regionalSettingsPropertiesComboBox[24].setSelectedIndex(0);
    regionalSettingsPropertiesComboBox[21].setEnabled(false);
    regionalSettingsPropertiesComboBox[21].setBounds(170, 20, 370, 30);
    regionalSettingsPropertiesComboBox[22].setBounds(170, 130, 340, 30);
    regionalSettingsPropertiesComboBox[23].setBounds(170, 170, 100, 30);
    regionalSettingsPropertiesComboBox[24].setBounds(170, 310, 340, 30);
    for (int i = 22; i < 25; i++) {
      regionalSettingsPropertiesComboBox[i].setEditable(true);
    }
    for (int i = 21; i < 25; i++) {
      regionalSettingsPropertiesPanel[5].add(regionalSettingsPropertiesComboBox[i]);
    }
    for (int i = 0; i < 25; i++) {
      regionalSettingsPropertiesComboBox[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          regionalSettingsPropertiesButton[2].setEnabled(true);
        }
      });
      regionalSettingsPropertiesComboBox[i].setFont(MSSansSerif16);
    }
    for (int i = 1; i < 10; i++) {
      if (i == 2 || i == 4 || i == 6 || i == 7 || i == 8) {
        continue;
      }
      regionalSettingsPropertiesComboBox[i].getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
          char c = e.getKeyChar();
          if (!(c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            if (regionalSettingsPropertiesComboBox[1].getEditor().getItem().toString().length() < 3) {
              Toolkit.getDefaultToolkit().beep();
              e.consume();
            }
            if (regionalSettingsPropertiesComboBox[3].getEditor().getItem().toString().length() < 3) {
              Toolkit.getDefaultToolkit().beep();
              e.consume();
            }
            if (regionalSettingsPropertiesComboBox[5].getEditor().getItem().toString().length() < 4) {
              Toolkit.getDefaultToolkit().beep();
              e.consume();
            }
            if (regionalSettingsPropertiesComboBox[9].getEditor().getItem().toString().length() < 3) {
              Toolkit.getDefaultToolkit().beep();
              e.consume();
            } else {
              e.consume();
            }
          }
        }
      });
    }
    regionalSettingsPropertiesPanel[1].add(regionalSettingsPropertiesComboBox[0]);
    regionalSettingsPropertiesTextField = new JTextField[7];
    regionalSettingsPropertiesTextField[0] = new JTextField("123,456,789.00");
    regionalSettingsPropertiesTextField[1] = new JTextField("-123,456,789.00");
    regionalSettingsPropertiesTextField[0].setBounds(110, 50, 150, 30);
    regionalSettingsPropertiesTextField[1].setBounds(360, 50, 150, 30);
    for (int i = 0; i < 2; i++) {
      regionalSettingsPropertiesPanel[2].add(regionalSettingsPropertiesTextField[i]);
    }
    regionalSettingsPropertiesTextField[2] = new JTextField("$123,456,789.00");
    regionalSettingsPropertiesTextField[3] = new JTextField("($123,456,789.00)");
    regionalSettingsPropertiesTextField[2].setBounds(110, 50, 150, 30);
    regionalSettingsPropertiesTextField[3].setBounds(360, 50, 150, 30);
    for (int i = 2; i < 4; i++) {
      regionalSettingsPropertiesPanel[3].add(regionalSettingsPropertiesTextField[i]);
    }
    SES3 = Executors.newScheduledThreadPool(1);
    SES3.scheduleWithFixedDelay(new Runnable() {
      public void run() {
        try {
          zoneId = ZoneId.of("PRC");
          locale = Locale.US;
          // Time Sample
          timeSampleFormat = DateTimeFormatter.ofPattern("h:mm:ss a", locale);
          timeSample = ZonedDateTime.now(zoneId);
          formattedTimeSample = timeSample.format(timeSampleFormat);
          regionalSettingsPropertiesTextField[4] = new JTextField(formattedTimeSample);
          regionalSettingsPropertiesTextField[4].setBounds(145, 60, 390, 30);
          regionalSettingsPropertiesPanel[4].add(regionalSettingsPropertiesTextField[4]);
          // Short Date Sample
          shortDateSampleFormat = DateTimeFormatter.ofPattern("dd/MM/yy", locale);
          shortDateSample = ZonedDateTime.now(zoneId);
          formattedShortDateSample = shortDateSample.format(shortDateSampleFormat);
          regionalSettingsPropertiesTextField[5] = new JTextField(formattedShortDateSample);
          regionalSettingsPropertiesTextField[5].setBounds(170, 90, 340, 30);
          // Long Date Sample
          longDateSampleFormat = DateTimeFormatter.ofPattern("EEEE, MMMM dd, yyyy", locale);
          longDateSample = ZonedDateTime.now(zoneId);
          formattedLongDateSample = longDateSample.format(longDateSampleFormat);
          regionalSettingsPropertiesTextField[6] = new JTextField(formattedLongDateSample);
          regionalSettingsPropertiesTextField[6].setBounds(170, 270, 340, 30);
          for (int i = 5; i < 7; i++) {
            regionalSettingsPropertiesPanel[5].add(regionalSettingsPropertiesTextField[i]);
          }
          for (int i = 0; i < 7; i++) {
            regionalSettingsPropertiesTextField[i].setEnabled(false);
            regionalSettingsPropertiesTextField[i].setFont(MSSansSerif16);
          }
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }, 0, 1, TimeUnit.SECONDS);
    regionalSettingsPropertiesButton = new JButton[3];
    regionalSettingsPropertiesButton[0] = new JButton("OK");
    regionalSettingsPropertiesButton[1] = new JButton("Cancel");
    regionalSettingsPropertiesButton[2] = new JButton("Apply");
    regionalSettingsPropertiesButton[0].setBounds(190, 600, 120, 33);
    regionalSettingsPropertiesButton[1].setBounds(320, 600, 120, 33);
    regionalSettingsPropertiesButton[2].setBounds(450, 600, 120, 33);
    regionalSettingsPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      regionalSettingsPropertiesButton[i].addActionListener(this);
      regionalSettingsPropertiesButton[i].setFont(MSSansSerif16);
      regionalSettingsProperties.add(regionalSettingsPropertiesButton[i]);
    }
  }

  @SuppressWarnings({
    "unchecked"
  })
  public void controlPanelSoundsMethod() {
    soundsProperties = new JDialog();
    soundsProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        soundsPropertiesEventsList.setSelectedIndex(0);
        for (int i = 2; i < 4; i++) {
          soundsPropertiesButton[i].setEnabled(false);
        }
        for (int i = 7; i < 9; i++) {
          soundsPropertiesButton[i].setEnabled(false);
        }
        soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
        soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[3]);
        for (int i = 0; i < 2; i++) {
          soundsPropertiesComboBox[i].setSelectedIndex(0);
        }
        soundsPropertiesComboBox[0].setEnabled(false);
        soundsPropertiesLabel[3].setEnabled(false);
        if (soundsPropertiesLabel[6].getParent() != null) {
          soundsPropertiesPanel[1].remove(soundsPropertiesLabel[6]);
          soundsPropertiesPanel[1].add(soundsPropertiesLabel[5]);
          soundsPropertiesPanel[1].revalidate();
          soundsPropertiesPanel[1].repaint();
        }
      }
    });
    soundsProperties.setAlwaysOnTop(true);
    soundsProperties.setBounds(50, 0, 590, 675);
    soundsProperties.setLayout(null);
    soundsProperties.setResizable(false);
    soundsProperties.setTitle("Sounds Properties");
    soundsPropertiesPanel = new JPanel[2];
    for (int i = 0; i < 2; i++) {
      soundsPropertiesPanel[i] = new JPanel();
    }
    soundsPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    soundsPropertiesPanel[0].setBounds(10, 15, 560, 575);
    soundsPropertiesPanel[0].setLayout(new GridLayout());
    soundsPropertiesPanel[1].setLayout(null);
    soundsPropertiesTabbedPane = new JTabbedPane();
    soundsPropertiesTabbedPane.addTab("Sounds", soundsPropertiesPanel[1]);
    soundsPropertiesTabbedPane.setFont(MSSansSerif16);
    soundsPropertiesPanel[0].add(soundsPropertiesTabbedPane);
    soundsProperties.add(soundsPropertiesPanel[0]);
    soundsPropertiesLabel = new JLabel[7];
    soundsPropertiesLabel[0] = new JLabel("Events:");
    soundsPropertiesLabel[1] = new JLabel("Sound");
    soundsPropertiesLabel[2] = new JLabel("Name:");
    soundsPropertiesLabel[3] = new JLabel("Preview:");
    soundsPropertiesLabel[4] = new JLabel("Schemes");
    soundsPropertiesLabel[0].setBounds(20, 0, 120, 30);
    soundsPropertiesLabel[1].setBounds(20, 220, 120, 30);
    soundsPropertiesLabel[2].setBounds(20, 255, 120, 30);
    soundsPropertiesLabel[3].setBounds(300, 255, 120, 30);
    soundsPropertiesLabel[4].setBounds(20, 400, 120, 33);
    soundsPropertiesLabel[3].setEnabled(false);
    for (int i = 0; i < 5; i++) {
      soundsPropertiesLabel[i].setFont(MSSansSerif16);
    }
    soundsPropertiesLabel[5] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SoundsPropertiesPreviewEmpty.png")));
    for (int i = 0; i < 6; i++) {
      soundsPropertiesPanel[1].add(soundsPropertiesLabel[i]);
    }
    soundsPropertiesLabel[6] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SoundsPropertiesPreviewWindows.png")));
    for (int i = 5; i < 7; i++) {
      soundsPropertiesLabel[i].setBounds(300, 285, 86, 82);
    }
    soundsPropertiesButton = new JButton[10];
    soundsPropertiesButton[0] = new JButton("OK");
    soundsPropertiesButton[1] = new JButton("Cancel");
    soundsPropertiesButton[2] = new JButton("Apply");
    soundsPropertiesButton[0].setBounds(190, 600, 120, 33);
    soundsPropertiesButton[1].setBounds(320, 600, 120, 33);
    soundsPropertiesButton[2].setBounds(450, 600, 120, 33);
    soundsPropertiesButton[2].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      soundsProperties.add(soundsPropertiesButton[i]);
    }
    soundsPropertiesButton[3] = new JButton("Browse...");
    soundsPropertiesButton[4] = new JButton("Details...");
    soundsPropertiesButton[5] = new JButton("Save As...");
    soundsPropertiesButton[6] = new JButton("Delete");
    soundsPropertiesButton[3].setBounds(20, 320, 120, 33);
    soundsPropertiesButton[4].setBounds(150, 320, 120, 33);
    soundsPropertiesButton[5].setBounds(280, 485, 120, 33);
    soundsPropertiesButton[6].setBounds(410, 485, 120, 33);
    for (int i = 3; i < 5; i++) {
      soundsPropertiesButton[i].setEnabled(false);
    }
    for (int i = 3; i < 7; i++) {
      soundsPropertiesPanel[1].add(soundsPropertiesButton[i]);
    }
    soundsPropertiesIcon = new ImageIcon[5];
    soundsPropertiesIcon[0] = new ImageIcon(
      getClass().getClassLoader().getResource("SoundsPropertiesPreviewPlayButton.png"));
    soundsPropertiesIcon[1] = new ImageIcon(
      getClass().getClassLoader().getResource("SoundsPropertiesPreviewPlayButtonDisabled.png"));
    soundsPropertiesIcon[2] = new ImageIcon(
      getClass().getClassLoader().getResource("SoundsPropertiesPreviewPlayButtonEnabled.png"));
    soundsPropertiesIcon[3] = new ImageIcon(
      getClass().getClassLoader().getResource("SoundsPropertiesPreviewStopButtonDisabled.png"));
    soundsPropertiesIcon[4] = new ImageIcon(
      getClass().getClassLoader().getResource("SoundsPropertiesPreviewStopButtonEnabled.png"));
    soundsPropertiesButton[7] = new JButton();
    soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
    soundsPropertiesButton[8] = new JButton();
    soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[3]);
    soundsPropertiesButton[7].setBounds(400, 285, 30, 30);
    soundsPropertiesButton[8].setBounds(430, 285, 30, 30);
    for (int i = 7; i < 9; i++) {
      soundsPropertiesButton[i].addActionListener(this);
      soundsPropertiesButton[i].setEnabled(false);
      soundsPropertiesPanel[1].add(soundsPropertiesButton[i]);
    }
    for (int i = 0; i < 7; i++) {
      soundsPropertiesButton[i].addActionListener(this);
      soundsPropertiesButton[i].setFont(MSSansSerif16);
    }
    soundsPropertiesComboBox = new JComboBox[2];
    for (int i = 0; i < 2; i++) {
      soundsPropertiesComboBox[i] = new JComboBox < String > ();
      soundsPropertiesComboBox[i].addItemListener(new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          soundsPropertiesButton[2].setEnabled(true);
          if (soundsPropertiesComboBox[0].getSelectedIndex() == 0) {
            soundsPropertiesPanel[1].remove(soundsPropertiesLabel[6]);
            soundsPropertiesPanel[1].add(soundsPropertiesLabel[5]);
            soundsPropertiesPanel[1].revalidate();
            soundsPropertiesPanel[1].repaint();
            soundsPropertiesButton[7].setEnabled(false);
            soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
          }
          if (soundsPropertiesComboBox[0].getSelectedIndex() == 1) {
            soundsPropertiesPanel[1].remove(soundsPropertiesLabel[5]);
            soundsPropertiesPanel[1].add(soundsPropertiesLabel[6]);
            soundsPropertiesPanel[1].revalidate();
            soundsPropertiesPanel[1].repaint();
            soundsPropertiesButton[7].setEnabled(true);
            soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[2]);
          }
          for (int i = 1; i < 3; i++) {
            if (soundsPropertiesComboBox[1].getSelectedIndex() == i) {
              if (controlPanel.isVisible()) {
                controlPanelOpen.setAlwaysOnTop(false);
              }
              soundsProperties.setAlwaysOnTop(false);
              UIManager.put("OptionPane.yesButtonText", "Yes");
              UIManager.put("OptionPane.noButtonText", "No");
              UIManager.put("OptionPane.cancelButtonText", "Cancel");
              int responseSaveScheme = JOptionPane.showConfirmDialog(null,
                "If you choose a new scheme, your previous scheme will be lost\n" +
                "because you did not save i. Do you want to save the previous\n" +
                "scheme?",
                "Save Scheme", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                questionMark);
              if (responseSaveScheme == JOptionPane.YES_OPTION) {
                if (controlPanel.isVisible()) {
                  controlPanelOpen.setAlwaysOnTop(true);
                }
                soundsProperties.setAlwaysOnTop(true);
              } else if (responseSaveScheme == JOptionPane.NO_OPTION) {
                if (controlPanel.isVisible()) {
                  controlPanelOpen.setAlwaysOnTop(true);
                }
                soundsProperties.setAlwaysOnTop(true);
              } else {
                if (controlPanel.isVisible()) {
                  controlPanelOpen.setAlwaysOnTop(true);
                }
                soundsProperties.setAlwaysOnTop(true);
              }
            }
          }
        }
      });
      soundsPropertiesComboBox[i].setFont(MSSansSerif16);
      soundsPropertiesPanel[1].add(soundsPropertiesComboBox[i]);
    }
    soundsPropertiesComboBox[0].addItem("(None)");
    soundsPropertiesComboBox[0].addItem("The Microsoft Sound");
    soundsPropertiesComboBox[1].addItem("");
    soundsPropertiesComboBox[1].addItem("No Sounds");
    soundsPropertiesComboBox[1].addItem("Windows Default");
    soundsPropertiesComboBox[0].setBounds(20, 285, 245, 30);
    soundsPropertiesComboBox[1].setBounds(20, 430, 475, 30);
    soundsPropertiesEvent = new String[25];
    soundsPropertiesEvent[0] = "     Window";
    soundsPropertiesEvent[1] = "          Asterisk";
    soundsPropertiesEvent[2] = "          Close program";
    soundsPropertiesEvent[3] = "          Critical Stop";
    soundsPropertiesEvent[4] = "          Default sound";
    soundsPropertiesEvent[5] = "          Exclamation";
    soundsPropertiesEvent[6] = "          Exit Windows";
    soundsPropertiesEvent[7] = "          Maximize";
    soundsPropertiesEvent[8] = "          Menu command";
    soundsPropertiesEvent[9] = "          Menu popup";
    soundsPropertiesEvent[10] = "          Minimize";
    soundsPropertiesEvent[11] = "          Open program";
    soundsPropertiesEvent[12] = "          Program error";
    soundsPropertiesEvent[13] = "          Question";
    soundsPropertiesEvent[14] = "          Restore Down";
    soundsPropertiesEvent[15] = "          Restore Up";
    soundsPropertiesEvent[16] = "          Start Windows";
    soundsPropertiesEvent[17] = "     Windows Explorer";
    soundsPropertiesEvent[18] = "          Empty Recycle Bin";
    soundsPropertiesEvent[19] = "     Sound Recorder";
    soundsPropertiesEvent[20] = "          Close program";
    soundsPropertiesEvent[21] = "          Open program";
    soundsPropertiesEvent[22] = "     Media Player";
    soundsPropertiesEvent[23] = "          Close program";
    soundsPropertiesEvent[24] = "          Open program";
    soundsPropertiesEventsList = new JList < Object > (soundsPropertiesEvent);
    soundsPropertiesEventsList.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        int selectedEvent = soundsPropertiesEventsList.getSelectedIndex();
        if (selectedEvent == 0 || selectedEvent == 17 || selectedEvent == 19 || selectedEvent == 22) {
          soundsPropertiesComboBox[0].setEnabled(false);
          soundsPropertiesComboBox[0].setSelectedIndex(0);
          soundsPropertiesLabel[3].setEnabled(false);
          soundsPropertiesButton[3].setEnabled(false);
          soundsPropertiesButton[7].setEnabled(false);
          soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
        } else {
          soundsPropertiesComboBox[0].setEnabled(true);
          soundsPropertiesLabel[3].setEnabled(true);
          soundsPropertiesButton[3].setEnabled(true);
        }
      }
    });
    soundsPropertiesEventsList.setFont(MSSansSerif16);
    soundsPropertiesEventsList.setSelectedIndex(0);
    soundsPropertiesEventsList.setVisibleRowCount(7);
    soundsPropertiesScrollPane = new JScrollPane(soundsPropertiesEventsList);
    soundsPropertiesScrollPane.setBounds(20, 35, 500, 185);
    soundsPropertiesScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    soundsPropertiesPanel[1].add(soundsPropertiesScrollPane);
  }

  @SuppressWarnings("unchecked")
  public void controlPanelSystemMethod() {
    controlPanelSystemProperties = new JDialog();
    controlPanelSystemProperties.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        controlPanelSystemPropertiesTabbedPane.setSelectedIndex(0);
        controlPanelSystemPropertiesRadioButton[0].setSelected(true);
        controlPanelSystemPropertiesRadioButton[1].setSelected(false);
        if (controlPanelSystemPropertiesTree[1].getParent() != null) {
          controlPanelSystemPropertiesPanel[2].remove(controlPanelSystemPropertiesScrollPane[1]);
          controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesScrollPane[0]);
          controlPanelSystemPropertiesPanel[2].revalidate();
          controlPanelSystemPropertiesPanel[2].repaint();
        }
        for (int i = 0; i < 2; i++) {
          controlPanelSystemPropertiesTree[i].setSelectionRow(0);
        }
        controlPanelSystemPropertiesList[1].clearSelection();
        controlPanelSystemPropertiesButton[9].setEnabled(false);
      }
    });
    controlPanelSystemProperties.setAlwaysOnTop(true);
    controlPanelSystemProperties.setBounds(50, 0, 590, 675);
    controlPanelSystemProperties.setLayout(null);
    controlPanelSystemProperties.setResizable(false);
    controlPanelSystemProperties.setTitle("System Properties");
    controlPanelSystemPropertiesPanel = new JPanel[5];
    for (int i = 0; i < 5; i++) {
      controlPanelSystemPropertiesPanel[i] = new JPanel();
    }
    controlPanelSystemPropertiesPanel[0].setBorder(BorderFactory.createRaisedBevelBorder());
    controlPanelSystemPropertiesPanel[0].setBounds(10, 15, 560, 575);
    controlPanelSystemPropertiesPanel[0].setLayout(new GridLayout());
    for (int i = 1; i < 5; i++) {
      controlPanelSystemPropertiesPanel[i].setLayout(null);
    }
    controlPanelSystemPropertiesTabbedPane = new JTabbedPane();
    controlPanelSystemPropertiesTabbedPane.addTab("General", controlPanelSystemPropertiesPanel[1]);
    controlPanelSystemPropertiesTabbedPane.addTab("Device Manager", controlPanelSystemPropertiesPanel[2]);
    controlPanelSystemPropertiesTabbedPane.addTab("Hardware Profiles", controlPanelSystemPropertiesPanel[3]);
    controlPanelSystemPropertiesTabbedPane.addTab("Performance", controlPanelSystemPropertiesPanel[4]);
    controlPanelSystemPropertiesTabbedPane.setFont(MSSansSerif16);
    controlPanelSystemPropertiesPanel[0].add(controlPanelSystemPropertiesTabbedPane);
    controlPanelSystemProperties.add(controlPanelSystemPropertiesPanel[0]);
    controlPanelSystemPropertiesLabel = new JLabel[10];
    controlPanelSystemPropertiesLabel[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemPropertiesGeneralImage.png")));
    controlPanelSystemPropertiesLabel[0].setBounds(0, 0, 592, 539);
    controlPanelSystemPropertiesPanel[1].add(controlPanelSystemPropertiesLabel[0]);
    controlPanelSystemPropertiesButton = new JButton[13];
    controlPanelSystemPropertiesButton[0] = new JButton("OK");
    controlPanelSystemPropertiesButton[1] = new JButton("Cancel");
    controlPanelSystemPropertiesButton[0].setBounds(320, 600, 120, 33);
    controlPanelSystemPropertiesButton[1].setBounds(450, 600, 120, 33);
    for (int i = 0; i < 2; i++) {
      controlPanelSystemProperties.add(controlPanelSystemPropertiesButton[i]);
    }
    // Device Manager Tab
    controlPanelSystemPropertiesRadioButton = new JRadioButton[2];
    controlPanelSystemPropertiesRadioButton[0] = new JRadioButton("View devices by type");
    controlPanelSystemPropertiesRadioButton[1] = new JRadioButton("View devices by connection");
    controlPanelSystemPropertiesRadioButton[0].setBounds(20, 20, 200, 30);
    controlPanelSystemPropertiesRadioButton[1].setBounds(240, 20, 300, 30);
    controlPanelSystemPropertiesRadioButton[0].setSelected(true);
    controlPanelSystemPropertiesButtonGroup = new ButtonGroup[3];
    for (int i = 0; i < 3; i++) {
      controlPanelSystemPropertiesButtonGroup[i] = new ButtonGroup();
    }
    for (int i = 0; i < 2; i++) {
      controlPanelSystemPropertiesRadioButton[i].addActionListener(this);
      controlPanelSystemPropertiesRadioButton[i].setFont(MSSansSerif16);
      controlPanelSystemPropertiesButtonGroup[0].add(controlPanelSystemPropertiesRadioButton[i]);
      controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesRadioButton[i]);
    }
    controlPanelSystemPropertiesNode = new DefaultMutableTreeNode[47];
    controlPanelSystemPropertiesNode[0] = new DefaultMutableTreeNode("Computer");
    controlPanelSystemPropertiesNode[1] = new DefaultMutableTreeNode("Display adapters");
    controlPanelSystemPropertiesNode[2] = new DefaultMutableTreeNode("Keyboard");
    controlPanelSystemPropertiesNode[3] = new DefaultMutableTreeNode("Monitor");
    controlPanelSystemPropertiesNode[4] = new DefaultMutableTreeNode("Mouse");
    controlPanelSystemPropertiesNode[5] = new DefaultMutableTreeNode("Ports (COM & LPT)");
    controlPanelSystemPropertiesNode[6] = new DefaultMutableTreeNode("Sound, video and game controllers");
    controlPanelSystemPropertiesNode[7] = new DefaultMutableTreeNode("System devices");
    for (int i = 1; i < 8; i++) {
      controlPanelSystemPropertiesNode[0].add(controlPanelSystemPropertiesNode[i]);
    }
    controlPanelSystemPropertiesNode[8] = new DefaultMutableTreeNode("S3 Inc. 801/805");
    controlPanelSystemPropertiesNode[9] = new DefaultMutableTreeNode("PC/AT Keyboard (84-Key)");
    controlPanelSystemPropertiesNode[10] = new DefaultMutableTreeNode("(Unknown Monitor)");
    controlPanelSystemPropertiesNode[11] = new DefaultMutableTreeNode("Standard PS/2 Port Mouse");
    for (int i = 8; i < 12; i++) {
      controlPanelSystemPropertiesNode[i - 7].add(controlPanelSystemPropertiesNode[i]);
    }
    controlPanelSystemPropertiesNode[12] = new DefaultMutableTreeNode("Communications Port (COM1)");
    controlPanelSystemPropertiesNode[13] = new DefaultMutableTreeNode("Communications Port (COM2)");
    controlPanelSystemPropertiesNode[14] = new DefaultMutableTreeNode("Printer Port (LPT1)");
    for (int i = 12; i < 15; i++) {
      controlPanelSystemPropertiesNode[5].add(controlPanelSystemPropertiesNode[i]);
    }
    controlPanelSystemPropertiesNode[15] = new DefaultMutableTreeNode("Creative Labs Sound Blaster 16 or AWE-32");
    controlPanelSystemPropertiesNode[16] = new DefaultMutableTreeNode("Gameport Joystick");
    controlPanelSystemPropertiesNode[17] = new DefaultMutableTreeNode("MPU-401 Compatible");
    for (int i = 15; i < 18; i++) {
      controlPanelSystemPropertiesNode[6].add(controlPanelSystemPropertiesNode[i]);
    }
    controlPanelSystemPropertiesNode[18] = new DefaultMutableTreeNode("Direct memory access controller");
    controlPanelSystemPropertiesNode[19] = new DefaultMutableTreeNode(
      "IO read data port for ISA Plug and Play enumerator");
    controlPanelSystemPropertiesNode[20] = new DefaultMutableTreeNode("ISA Plug and Play bus");
    controlPanelSystemPropertiesNode[21] = new DefaultMutableTreeNode("Numeric data processor");
    controlPanelSystemPropertiesNode[22] = new DefaultMutableTreeNode("Programmable interrupt controller");
    controlPanelSystemPropertiesNode[23] = new DefaultMutableTreeNode("System board");
    controlPanelSystemPropertiesNode[24] = new DefaultMutableTreeNode("System CMOS/real time clock");
    controlPanelSystemPropertiesNode[25] = new DefaultMutableTreeNode("System speaker");
    controlPanelSystemPropertiesNode[26] = new DefaultMutableTreeNode("System timer");
    for (int i = 18; i < 27; i++) {
      controlPanelSystemPropertiesNode[7].add(controlPanelSystemPropertiesNode[i]);
    }
    controlPanelSystemPropertiesNode[27] = new DefaultMutableTreeNode("Computer");
    controlPanelSystemPropertiesNode[28] = new DefaultMutableTreeNode("S3 Inc. 801/805");
    controlPanelSystemPropertiesNode[29] = new DefaultMutableTreeNode("Communications Port (COM1)");
    controlPanelSystemPropertiesNode[30] = new DefaultMutableTreeNode("Communications Port (COM2)");
    controlPanelSystemPropertiesNode[31] = new DefaultMutableTreeNode("Creative Labs Sound Blaster 16 or AWE-32");
    controlPanelSystemPropertiesNode[32] = new DefaultMutableTreeNode("Direct memory access controller");
    controlPanelSystemPropertiesNode[33] = new DefaultMutableTreeNode("Gameport Joystick");
    controlPanelSystemPropertiesNode[34] = new DefaultMutableTreeNode("ISA Plug and Play bus");
    controlPanelSystemPropertiesNode[35] = new DefaultMutableTreeNode("MPU-401 Compatible");
    controlPanelSystemPropertiesNode[36] = new DefaultMutableTreeNode("Numeric data processor");
    controlPanelSystemPropertiesNode[37] = new DefaultMutableTreeNode("PC/AT Keyboard (84-Key)");
    controlPanelSystemPropertiesNode[38] = new DefaultMutableTreeNode("Printer Port (LPT1)");
    controlPanelSystemPropertiesNode[39] = new DefaultMutableTreeNode("Programmable interrupt controller");
    controlPanelSystemPropertiesNode[40] = new DefaultMutableTreeNode("Standard PS/2 Port Mouse");
    controlPanelSystemPropertiesNode[41] = new DefaultMutableTreeNode("System board");
    controlPanelSystemPropertiesNode[42] = new DefaultMutableTreeNode("System CMOS/real time clock");
    controlPanelSystemPropertiesNode[43] = new DefaultMutableTreeNode("System speaker");
    controlPanelSystemPropertiesNode[44] = new DefaultMutableTreeNode("System timer");
    for (int i = 28; i < 45; i++) {
      controlPanelSystemPropertiesNode[27].add(controlPanelSystemPropertiesNode[i]);
    }
    controlPanelSystemPropertiesNode[45] = new DefaultMutableTreeNode("(Unknown Monitor)");
    controlPanelSystemPropertiesNode[46] = new DefaultMutableTreeNode(
      "IO read data port for ISA Plug and Play enumerator");
    controlPanelSystemPropertiesNode[28].add(controlPanelSystemPropertiesNode[45]);
    controlPanelSystemPropertiesNode[34].add(controlPanelSystemPropertiesNode[46]);
    controlPanelSystemPropertiesTree = new JTree[2];
    controlPanelSystemPropertiesTree[0] = new JTree(controlPanelSystemPropertiesNode[0]);
    controlPanelSystemPropertiesTree[1] = new JTree(controlPanelSystemPropertiesNode[27]);
    controlPanelSystemPropertiesScrollPane = new JScrollPane[2];
    for (int i = 0; i < 2; i++) {
      controlPanelSystemPropertiesTree[i].setFont(MSSansSerif16);
      controlPanelSystemPropertiesScrollPane[i] = new JScrollPane(controlPanelSystemPropertiesTree[i]);
      controlPanelSystemPropertiesScrollPane[i].setBounds(20, 50, 520, 415);
    }
    controlPanelSystemPropertiesScrollPane[0].setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    controlPanelSystemPropertiesScrollPane[1].setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesScrollPane[0]);
    controlPanelSystemPropertiesButton[2] = new JButton("Properties");
    controlPanelSystemPropertiesButton[3] = new JButton("Refresh");
    controlPanelSystemPropertiesButton[4] = new JButton("Remove");
    controlPanelSystemPropertiesButton[5] = new JButton("Print...");
    controlPanelSystemPropertiesButton[2].setBounds(20, 475, 120, 33);
    controlPanelSystemPropertiesButton[3].setBounds(150, 475, 120, 33);
    controlPanelSystemPropertiesButton[4].setBounds(280, 475, 120, 33);
    controlPanelSystemPropertiesButton[5].setBounds(410, 475, 120, 33);
    for (int i = 2; i < 6; i++) {
      controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesButton[i]);
    }
    // Hardware Profiles Tab
    controlPanelSystemPropertiesLabel[1] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemPropertiesHardwareProfiles.png")));
    controlPanelSystemPropertiesLabel[1].setBounds(10, 10, 533, 119);
    controlPanelSystemPropertiesPanel[3].add(controlPanelSystemPropertiesLabel[1]);
    controlPanelSystemPropertiesList = new JList[2];
    hardwareProfile = new String[2];
    hardwareProfile[0] = "Original Configuration";
    controlPanelSystemPropertiesList[0] = new JList < Object > (hardwareProfile);
    controlPanelSystemPropertiesList[0].setBounds(20, 140, 500, 180);
    controlPanelSystemPropertiesList[0].setSelectedIndex(0);
    controlPanelSystemPropertiesPanel[3].add(controlPanelSystemPropertiesList[0]);
    controlPanelSystemPropertiesButton[6] = new JButton("Copy...");
    controlPanelSystemPropertiesButton[7] = new JButton("Rename...");
    controlPanelSystemPropertiesButton[8] = new JButton("Delete");
    controlPanelSystemPropertiesButton[6].setBounds(20, 350, 160, 33);
    controlPanelSystemPropertiesButton[7].setBounds(190, 350, 160, 33);
    controlPanelSystemPropertiesButton[8].setBounds(360, 350, 160, 33);
    for (int i = 6; i < 9; i++) {
      controlPanelSystemPropertiesPanel[3].add(controlPanelSystemPropertiesButton[i]);
    }
    // Performance Tab
    controlPanelSystemPropertiesLabel[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SystemPropertiesPerformanceStatus.png")));
    controlPanelSystemPropertiesLabel[2].setBounds(0, 0, 568, 266);
    controlPanelSystemPropertiesPanel[4].add(controlPanelSystemPropertiesLabel[2]);
    performanceItem = new String[3];
    performanceItem[0] = "Compatibility mode paging reduces overall system performance.";
    performanceItem[1] = "Drive A: using MS-DOS compatibility mode file system.";
    performanceItem[2] = "Drive C: using MS-DOS compatibility mode file system.";
    controlPanelSystemPropertiesList[1] = new JList < Object > (performanceItem);
    controlPanelSystemPropertiesList[1].addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        for (int i = 0; i < 3; i++) {
          if (controlPanelSystemPropertiesList[1].getSelectedIndex() == i) {
            controlPanelSystemPropertiesButton[9].setEnabled(true);
          }
        }
      }
    });
    controlPanelSystemPropertiesList[1].setBounds(30, 270, 490, 90);
    for (int i = 0; i < 2; i++) {
      controlPanelSystemPropertiesList[i].setFont(MSSansSerif16);
    }
    controlPanelSystemPropertiesPanel[4].add(controlPanelSystemPropertiesList[1]);
    controlPanelSystemPropertiesButton[9] = new JButton("Details...");
    controlPanelSystemPropertiesButton[10] = new JButton("File System...");
    controlPanelSystemPropertiesButton[11] = new JButton("Graphics...");
    controlPanelSystemPropertiesButton[12] = new JButton("Virtual Memory...");
    controlPanelSystemPropertiesButton[9].setBounds(400, 370, 120, 33);
    controlPanelSystemPropertiesButton[10].setBounds(20, 460, 160, 33);
    controlPanelSystemPropertiesButton[11].setBounds(190, 460, 160, 33);
    controlPanelSystemPropertiesButton[12].setBounds(360, 460, 160, 33);
    for (int i = 8; i < 10; i++) {
      controlPanelSystemPropertiesButton[i].setEnabled(false);
    }
    for (int i = 9; i < 13; i++) {
      controlPanelSystemPropertiesPanel[4].add(controlPanelSystemPropertiesButton[i]);
    }
    for (int i = 0; i < 13; i++) {
      controlPanelSystemPropertiesButton[i].addActionListener(this);
      controlPanelSystemPropertiesButton[i].setFont(MSSansSerif16);
    }
  }

  @SuppressWarnings("unchecked")
  public void myComputerPrintersMethod() {
    /// Setting up Printers when Open
    printersIcon = new ImageIcon(getClass().getClassLoader().getResource("PrintersIcon.png"));
    printersOpen = new JFrame();
    printersOpen.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        if (addPrinter[1].getParent() != null) {
          printersOpenPanel.remove(addPrinter[1]);
          printersOpenPanel.add(addPrinter[0]);
          printersOpenPanel.revalidate();
          printersOpenPanel.repaint();
          printersStatusText.setText("1 object(s)");
        }
      }
    });
    printersOpen.getContentPane().setBackground(white);
    printersOpen.setAlwaysOnTop(true);
    printersOpen.setBounds(50, 0, 290, 275);
    printersOpen.setIconImage(printersIcon.getImage());
    printersOpen.setTitle("Printers");
    printersOpenPanel = new JPanel();
    printersOpenPanel.setBackground(white);
    printersOpenPanel.setLayout(null);
    /// Printers Open Popup Menu
    printersOpenPopup = new JPopupMenu();
    printersOpenPopupSeparator = new JSeparator[4];
    for (int i = 0; i < 4; i++) {
      printersOpenPopupSeparator[i] = new JSeparator();
    }
    printersOpenPopupMenu = new JMenu[2];
    printersOpenPopupMenu[0] = new JMenu("View");
    printersOpenPopupMenu[1] = new JMenu("Arrange Icons");
    for (int i = 0; i < 2; i++) {
      printersOpenPopupMenu[i].setFont(MSSansSerif16);
    }
    printersOpenPopupMenuItem = new JMenuItem[11];
    printersOpenPopupMenuItem[0] = new JMenuItem("Large Icons");
    printersOpenPopupMenuItem[1] = new JMenuItem("Small Icons");
    printersOpenPopupMenuItem[2] = new JMenuItem("List");
    printersOpenPopupMenuItem[3] = new JMenuItem("Details");
    for (int i = 0; i < 4; i++) {
      printersOpenPopupMenu[0].add(printersOpenPopupMenuItem[i]);
    }
    printersOpenPopup.add(printersOpenPopupMenu[0]);
    printersOpenPopup.add(printersOpenPopupSeparator[0]);
    printersOpenPopupMenuItem[4] = new JMenuItem("by Name");
    printersOpenPopupMenu[1].add(printersOpenPopupMenuItem[4]);
    printersOpenPopupMenu[1].add(printersOpenPopupSeparator[1]);
    printersOpenPopupMenuItem[5] = new JMenuItem("Auto Arrange");
    printersOpenPopupMenu[1].add(printersOpenPopupMenuItem[5]);
    printersOpenPopup.add(printersOpenPopupMenu[1]);
    printersOpenPopupMenuItem[6] = new JMenuItem("Line up Icons");
    printersOpenPopup.add(printersOpenPopupMenuItem[6]);
    printersOpenPopup.add(printersOpenPopupSeparator[2]);
    printersOpenPopupMenuItem[7] = new JMenuItem("Paste");
    printersOpenPopupMenuItem[8] = new JMenuItem("Paste Shortcut");
    for (int i = 7; i < 9; i++) {
      printersOpenPopupMenuItem[i].setEnabled(false);
      printersOpenPopup.add(printersOpenPopupMenuItem[i]);
    }
    printersOpenPopup.add(printersOpenPopupSeparator[3]);
    printersOpenPopupMenuItem[9] = new JMenuItem("Capture Printer Port...");
    printersOpenPopupMenuItem[10] = new JMenuItem("End Capture...");
    for (int i = 9; i < 11; i++) {
      printersOpenPopup.add(printersOpenPopupMenuItem[i]);
    }
    for (int i = 0; i < 11; i++) {
      printersOpenPopupMenuItem[i].addActionListener(this);
      printersOpenPopupMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == printersOpenPopupMenuItem[0]) {
            printersStatusText.setText("Displays items by using large icons.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[1]) {
            printersStatusText.setText("Displays items by using small icons.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[2]) {
            printersStatusText.setText("Displays items in a list.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[3]) {
            printersStatusText.setText("Displays information about each item in the window.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[4]) {
            printersStatusText.setText("Sorts items alphabetically by name.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[5]) {
            printersStatusText.setText("Arranges the icons automatically.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[6]) {
            printersStatusText.setText("Arranges icons in a grid.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[7]) {
            printersStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[8]) {
            printersStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[9]) {
            printersStatusText.setText("Maps a printer port to a network resource.");
          }
          if (e.getSource() == printersOpenPopupMenuItem[10]) {
            printersStatusText.setText("Disconnects a network printer.");
          }
        }
      });
      printersOpenPopupMenuItem[i].setFont(MSSansSerif16);
    }
    printersOpenPanel.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (addPrinter[1].getParent() != null) {
          printersOpenPanel.remove(addPrinter[1]);
          printersOpenPanel.add(addPrinter[0]);
          printersOpenPanel.revalidate();
          printersOpenPanel.repaint();
          printersStatusText.setText("1 object(s)");
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          printersOpenPopup.show(e.getComponent(), e.getX(), e.getY());
          if (addPrinter[1].getParent() != null) {
            printersOpenPanel.remove(addPrinter[1]);
            printersOpenPanel.add(addPrinter[0]);
            printersOpenPanel.revalidate();
            printersOpenPanel.repaint();
            printersStatusText.setText("1 object(s)");
          }
        }
      }
    });
    ///// Printers Objects
    printersMenu = new JMenu[5];
    printersMenu[0] = new JMenu("File");
    printersMenu[1] = new JMenu("Edit");
    printersMenu[2] = new JMenu("View");
    printersMenu[3] = new JMenu("Help");
    printersMenuBar = new JMenuBar();
    for (int i = 0; i < 4; i++) {
      printersMenu[i].addMenuListener(new MenuListener() {
        public void menuSelected(MenuEvent e) {
          if (e.getSource() == printersMenu[0]) {
            printersStatusText.setText("Contains commands for working with the selected items.");
          }
          if (e.getSource() == printersMenu[1]) {
            printersStatusText.setText("Contains commands for selecting and transferring items.");
          }
          if (e.getSource() == printersMenu[2]) {
            printersStatusText.setText("Contains commands for customizing this window.");
          }
          if (e.getSource() == printersMenu[3]) {
            printersStatusText.setText("Contains commands for displaying Help.");
          }
        }

        public void menuDeselected(MenuEvent e) {

        }

        public void menuCanceled(MenuEvent e) {}
      });
      printersMenuBar.add(printersMenu[i]);
    }
    printersMenuItem = new JMenuItem[26];
    printersMenuItem[0] = new JMenuItem("Create Shortcut");
    printersMenuItem[1] = new JMenuItem("Delete");
    printersMenuItem[2] = new JMenuItem("Rename");
    printersMenuItem[3] = new JMenuItem("Properties");
    for (int i = 0; i < 4; i++) {
      printersMenu[0].add(printersMenuItem[i]);
      printersMenuItem[i].setEnabled(false);
    }
    printersSeparator = new JSeparator[7];
    for (int i = 0; i < 7; i++) {
      printersSeparator[i] = new JSeparator();
    }
    printersMenu[0].add(printersSeparator[0]);
    printersMenuItem[4] = new JMenuItem("Close");
    printersMenu[0].add(printersMenuItem[4]);
    /// Printers Menubar Edit Menu
    printersMenuItem[5] = new JMenuItem("Undo");
    printersMenuItem[5].setAccelerator(ctrlZ);
    printersMenuItem[5].setEnabled(false);
    printersMenu[1].add(printersMenuItem[5]);
    printersMenu[1].add(printersSeparator[1]);
    printersMenuItem[6] = new JMenuItem("Cut");
    printersMenuItem[6].setAccelerator(ctrlX);
    printersMenuItem[7] = new JMenuItem("Copy");
    printersMenuItem[7].setAccelerator(ctrlC);
    printersMenuItem[8] = new JMenuItem("Paste");
    printersMenuItem[8].setAccelerator(ctrlV);
    printersMenuItem[9] = new JMenuItem("Paste Shortcut");
    for (int i = 6; i < 10; i++) {
      printersMenu[1].add(printersMenuItem[i]);
      printersMenuItem[i].setEnabled(false);
    }
    printersMenu[1].add(printersSeparator[2]);
    printersMenuItem[10] = new JMenuItem("Select All");
    printersMenuItem[10].setAccelerator(ctrlA);
    printersMenuItem[11] = new JMenuItem("Invert Selection");
    for (int i = 10; i < 12; i++) {
      printersMenu[1].add(printersMenuItem[i]);
    }
    /// Printers Menubar View Menu
    printersCheckBoxMenuItem = new JCheckBoxMenuItem[2];
    printersCheckBoxMenuItem[0] = new JCheckBoxMenuItem("Toolbar");
    printersCheckBoxMenuItem[0].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == printersCheckBoxMenuItem[0]) {
          printersStatusText.setText("Shows or hides the toolbar.");
        }
      }
    });
    printersCheckBoxMenuItem[1] = new JCheckBoxMenuItem("Status Bar");
    printersCheckBoxMenuItem[1].setSelected(true);
    printersCheckBoxMenuItem[1].addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent e) {
        if (e.getSource() == printersCheckBoxMenuItem[1]) {
          printersStatusText.setText("Shows or hides the status bar.");
        }
      }
    });
    for (int i = 0; i < 2; i++) {
      printersCheckBoxMenuItem[i].addActionListener(this);
      printersCheckBoxMenuItem[i].setFont(MSSansSerif16);
      printersMenu[2].add(printersCheckBoxMenuItem[i]);
    }
    printersMenu[2].add(printersSeparator[3]);
    printersMenuItem[12] = new JMenuItem("Large Icons");
    printersMenuItem[13] = new JMenuItem("Small Icons");
    printersMenuItem[14] = new JMenuItem("List");
    printersMenuItem[15] = new JMenuItem("Details");
    for (int i = 12; i < 16; i++) {
      printersMenu[2].add(printersMenuItem[i]);
    }
    printersMenu[2].add(printersSeparator[4]);
    printersMenu[4] = new JMenu("Arrange Icons");
    printersMenuItem[16] = new JMenuItem("by Drive Letter");
    printersMenuItem[17] = new JMenuItem("by Type");
    printersMenuItem[18] = new JMenuItem("by Size");
    printersMenuItem[19] = new JMenuItem("by Free Space");
    printersMenuItem[20] = new JMenuItem("Auto Arrange");
    for (int i = 16; i < 20; i++) {
      printersMenu[4].add(printersMenuItem[i]);
    }
    printersMenu[4].add(printersSeparator[5]);
    printersMenu[4].add(printersMenuItem[20]);
    printersMenu[2].add(printersMenu[4]);
    printersMenuItem[21] = new JMenuItem("Line up Icons");
    printersMenu[2].add(printersMenuItem[20]);
    printersMenu[2].add(printersSeparator[6]);
    printersMenuItem[22] = new JMenuItem("Refresh");
    printersMenuItem[23] = new JMenuItem("Options...");
    for (int i = 22; i < 24; i++) {
      printersMenu[2].add(printersMenuItem[i]);
    }
    /// Printers Menubar Help Menu
    printersMenuItem[24] = new JMenuItem("Help Topics");
    printersMenu[3].add(printersMenuItem[24]);
    printersMenu[3].add(printersSeparator[6]);
    printersMenuItem[25] = new JMenuItem("About Windows 95");
    printersMenu[3].add(printersMenuItem[25]);
    // Add Printer
    addPrinter = new JLabel[2];
    addPrinter[0] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AddPrinter.png")));
    addPrinter[1] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("AddPrinterSelected.png")));
    for (int i = 0; i < 2; i++) {
      addPrinter[i].setBounds(10, 5, 81, 71);
    }
    printersOpenPanel.add(addPrinter[0]);
    printersOpen.add(printersOpenPanel);
    addPrinterPopup = new JPopupMenu();
    addPrinterPopupSeparator = new JSeparator[2];
    for (int i = 0; i < 2; i++) {
      addPrinterPopupSeparator[i] = new JSeparator();
    }
    addPrinterPopupMenuItem = new JMenuItem[3];
    addPrinterPopupMenuItem[0] = new JMenuItem("Open");
    addPrinterPopupMenuItem[0].setFont(MSSansSerif16Bold);
    addPrinterPopup.add(addPrinterPopupMenuItem[0]);
    addPrinterPopup.add(addPrinterPopupSeparator[0]);
    addPrinterPopupMenuItem[1] = new JMenuItem("Create Shortcut");
    addPrinterPopup.add(addPrinterPopupMenuItem[1]);
    addPrinterPopup.add(addPrinterPopupSeparator[1]);
    addPrinterPopupMenuItem[2] = new JMenuItem("Properties");
    addPrinterPopupMenuItem[2].setEnabled(false);
    addPrinterPopup.add(addPrinterPopupMenuItem[2]);
    for (int i = 1; i < 3; i++) {
      addPrinterPopupMenuItem[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 3; i++) {
      addPrinterPopupMenuItem[i].addActionListener(this);
      addPrinterPopupMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == addPrinterPopupMenuItem[0]) {
            printersStatusText.setText("Opens the selected items.");
          }
          if (e.getSource() == addPrinterPopupMenuItem[1]) {
            printersStatusText.setText("Creates shortcuts to the selected items.");
          }
          if (e.getSource() == addPrinterPopupMenuItem[2]) {
            printersStatusText.setText("Displays the properties of the selected items.");
          }
        }
      });
    }
    addPrinterWizard = new JDialog();
    addPrinterWizard.setAlwaysOnTop(true);
    addPrinterWizard.setBounds(50, 0, 650, 450);
    // addPrinterWizard.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    addPrinterWizard.setLayout(null);
    // addPrinterWizard.setResizable(false);
    addPrinterWizard.setTitle("Add Printer Wizard");
    addPrinterWizardLabel = new JLabel[5];
    addPrinterWizardLabel[0] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddPrinterWizardImage.png")));
    addPrinterWizardLabel[1] = new JLabel(
      "<html>This Wizard will help you to install your printer quickly and easily.<br><br>" +
      "To begin installing your printer, click Next.<html/>");
    addPrinterWizardLabel[2] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddPrinterWizardSeparator.png")));
    addPrinterWizardLabel[3] = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("AddPrinterWizard2.png")));
    addPrinterWizardLabel[0].setBounds(0, 0, 178, 338);
    addPrinterWizardLabel[1].setBounds(200, -50, 400, 200);
    addPrinterWizardLabel[2].setBounds(0, 360, 400, 200);
    addPrinterWizardLabel[3].setBounds(0, 0, 590, 132);
    addPrinterWizardLabel[1].setFont(MSSansSerif16);
    for (int i = 0; i < 3; i++) {
      addPrinterWizard.add(addPrinterWizardLabel[i]);
    }
    addPrinterWizardButton = new JButton[5];
    addPrinterWizardButton[0] = new JButton("< Back");
    addPrinterWizardButton[1] = new JButton("Next >");
    addPrinterWizardButton[2] = new JButton("Cancel");
    addPrinterWizardButton[0].setBounds(260, 375, 120, 33);
    addPrinterWizardButton[1].setBounds(380, 375, 120, 33);
    addPrinterWizardButton[2].setBounds(510, 375, 120, 33);
    addPrinterWizardButton[0].setEnabled(false);
    for (int i = 0; i < 3; i++) {
      addPrinterWizard.add(addPrinterWizardButton[i]);
    }
    addPrinterWizardButton[3] = new JButton("Have Disk...");
    addPrinterWizardButton[4] = new JButton("Configure Port...");
    addPrinterWizardButton[3].setBounds(490, 330, 140, 33);
    for (int i = 0; i < 5; i++) {
      addPrinterWizardButton[i].addActionListener(this);
      addPrinterWizardButton[i].setFont(MSSansSerif16);
    }
    printerManufacturer = new String[40];
    printerManufacturer[0] = "Apple";
    printerManufacturer[1] = "AST";
    printerManufacturer[2] = "AT&T";
    printerManufacturer[3] = "Brother";
    printerManufacturer[4] = "Bull";
    printerManufacturer[5] = "C-Itoh";
    printerManufacturer[6] = "Canon";
    printerManufacturer[7] = "Citizen";
    printerManufacturer[8] = "Compaq";
    printerManufacturer[9] = "Dataproducts";
    printerManufacturer[10] = "Diconix";
    printerManufacturer[11] = "Digital";
    printerManufacturer[12] = "Epson";
    printerManufacturer[13] = "Fujitsu";
    printerManufacturer[14] = "Generic";
    printerManufacturer[15] = "Hermes";
    printerManufacturer[16] = "HP";
    printerManufacturer[17] = "IBM/Lexmark";
    printerManufacturer[18] = "Kodak";
    printerModel = new String[12];
    printerModel[0] = "Apple LaserWriter";
    printerModel[1] = "Apple LaserWriter II NT";
    printerModel[2] = "Apple LaserWriter Personal NT";
    printerModel[3] = "Apple LaserWriter II NTX";
    printerModel[4] = "Apple LaserWriter IIf";
    printerModel[5] = "Apple LaserWriter IIg";
    printerModel[6] = "Apple LaserWriter Plus";
    printerModel[7] = "Apple LaserWriter Pro 600";
    printerModel[8] = "Apple LaserWriter Pro 630";
    printerModel[9] = "Apple LaserWriter Pro 810";
    printerModel[10] = "Apple LaserWriter Select 360";
    printerModel[11] = "Apple Personal LaserWriter NTR";
    addPrinterWizardList = new JList[3];
    addPrinterWizardList[0] = new JList < Object > (printerManufacturer);
    addPrinterWizardList[1] = new JList < Object > (printerModel);
    addPrinterWizardScrollPane = new JScrollPane[2];
    for (int i = 0; i < 2; i++) {
      addPrinterWizardList[i].setFont(MSSansSerif16);
      addPrinterWizardScrollPane[i] = new JScrollPane(addPrinterWizardList[i]);
      addPrinterWizardScrollPane[i].setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    }
    addPrinterWizardScrollPane[0].setBounds(20, 170, 200, 100);
    addPrinterWizardScrollPane[1].setBounds(230, 170, 300, 100);
    addPrinter[0].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          if (addPrinter[0].getParent() != null) {
            printersOpenPanel.remove(addPrinter[0]);
            printersOpenPanel.add(addPrinter[1]);
            printersOpenPanel.revalidate();
            printersOpenPanel.repaint();
            printersStatusText.setText("1 object(s) selected");
          }
        }
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          addPrinterWizard.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          addPrinterPopup.show(e.getComponent(), e.getX(), e.getY());
          if (addPrinter[0].getParent() != null) {
            printersOpenPanel.remove(addPrinter[0]);
            printersOpenPanel.add(addPrinter[1]);
            printersOpenPanel.revalidate();
            printersOpenPanel.repaint();
            printersStatusText.setText("1 object(s) selected");
          }
        }
      }
    });
    addPrinter[1].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          addPrinterWizard.setVisible(true);
        }
      }

      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          addPrinterPopup.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    /// Printers Status Bar and Printers Status Text
    printersStatusBar = new JPanel();
    printersStatusBar.setBorder(new BevelBorder(BevelBorder.LOWERED));
    printersStatusBar.setBackground(gray);
    printersStatusBar.setPreferredSize(new Dimension(printersOpen.getWidth(), 24));
    printersStatusBar.setLayout(new BoxLayout(printersStatusBar, BoxLayout.X_AXIS));
    printersStatusText = new JLabel("0 object(s)");
    printersStatusText.setFont(MSSansSerif16);
    printersStatusText.setHorizontalAlignment(SwingConstants.LEFT);
    printersStatusBar.add(printersStatusText);
    printersOpen.add(printersStatusBar, BorderLayout.SOUTH);
    /// Adding MouseListener to, Setting Font and Size for All Printers Menubar
    /// Menus and Menu Items
    for (int i = 0; i < 5; i++) {
      printersMenu[i].setFont(MSSansSerif16);
    }
    for (int i = 0; i < 26; i++) {
      printersMenuItem[i].addActionListener(this);
      printersMenuItem[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          if (e.getSource() == printersMenuItem[0]) {
            printersStatusText.setText("Creates shortcuts to the selected items.");
          } else if (e.getSource() == printersMenuItem[1]) {
            printersStatusText.setText("Deletes the selected items.");
          } else if (e.getSource() == printersMenuItem[2]) {
            printersStatusText.setText("Renames the selected item.");
          } else if (e.getSource() == printersMenuItem[3]) {
            printersStatusText.setText("Displays the properties of the selected items.");
          } else if (e.getSource() == printersMenuItem[4]) {
            printersStatusText.setText("Closes the window.");
          } else if (e.getSource() == printersMenuItem[5]) {
            printersStatusText.setText("Undoes the previous file operation.");
          } else if (e.getSource() == printersMenuItem[6]) {
            printersStatusText.setText("Removes the selected items and copies hem onto the Clipboard.");
          } else if (e.getSource() == printersMenuItem[7]) {
            printersStatusText.setText(
              "Copies the selected items to the Clipboard. Use Paste to put them in the new location.");
          } else if (e.getSource() == printersMenuItem[8]) {
            printersStatusText
              .setText("Inserts the items you have copied or cut into the selected location.");
          } else if (e.getSource() == printersMenuItem[9]) {
            printersStatusText.setText(
              "Creates shorcuts to the items you have copied or cut into the selected location.");
          } else if (e.getSource() == printersMenuItem[10]) {
            printersStatusText.setText("Selects all items in the window.");
          } else if (e.getSource() == printersMenuItem[11]) {
            printersStatusText.setText("Reverses which items are selected and which are not.");
          } else if (e.getSource() == printersMenuItem[12]) {
            printersStatusText.setText("Displays items by using large icons.");
          } else if (e.getSource() == printersMenuItem[13]) {
            printersStatusText.setText("Displays items by using small icons.");
          } else if (e.getSource() == printersMenuItem[14]) {
            printersStatusText.setText("Displays items in a list.");
          } else if (e.getSource() == printersMenuItem[15]) {
            printersStatusText.setText("Displays information about each item in the window.");
          } else if (e.getSource() == printersMenuItem[16]) {
            printersStatusText.setText("Sorts items alphabetically by name.");
          } else if (e.getSource() == printersMenuItem[17]) {
            printersStatusText.setText("Sorts items by type.");
          } else if (e.getSource() == printersMenuItem[18]) {
            printersStatusText.setText("Sorts items by size, from smallest to largest.");
          } else if (e.getSource() == printersMenuItem[19]) {
            printersStatusText.setText("Sorts items by available free space.");
          } else if (e.getSource() == printersMenuItem[20]) {
            printersStatusText.setText("Arranges the icons automatically.");
          } else if (e.getSource() == printersMenuItem[21]) {
            printersStatusText.setText("Arranges icons in a grid.");
          } else if (e.getSource() == printersMenuItem[22]) {
            printersStatusText.setText("Refresh item information.");
          } else if (e.getSource() == printersMenuItem[23]) {
            printersStatusText.setText("Changes the display options for this window.");
          } else if (e.getSource() == printersMenuItem[24]) {
            printersStatusText.setText("Opens help.");
          } else if (e.getSource() == printersMenuItem[25]) {
            printersStatusText.setText("Displays program information, version number, and copyright.");
          }
        }
      });
      printersMenuItem[i].setFont(MSSansSerif16);
      printersOpen.add(printersMenuBar, BorderLayout.NORTH);
    }
    /// Adding MouseListener to Printers Separators
    for (int i = 0; i < 7; i++) {
      printersSeparator[i].addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
          for (int i = 0; i < 7; i++) {
            if (e.getSource() == printersSeparator[i]) {
              printersStatusText.setText("");
            }
          }
        }
      });
    }
  }

  public void exploringMyComputerMethod() {
    // Exploring - My Computer and Its Objects
    exploringMyComputer = new JFrame();
    exploringMyComputer.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        for (int i = 3; i < 5; i++) {
          exploringMyComputerPath = new TreePath(exploringMyComputerAllFoldersNode[i].getPath());
        }
        exploringMyComputerTree[0].collapsePath(exploringMyComputerPath);
      }
    });
    exploringMyComputer.setBounds(50, 0, 600, 500);
    exploringMyComputer.setTitle("Exploring - My Computer");
    exploringMyComputerAllFoldersNode = new DefaultMutableTreeNode[42];
    exploringMyComputerAllFoldersNode[0] = new DefaultMutableTreeNode("Desktop");
    exploringMyComputerAllFoldersNode[1] = new DefaultMutableTreeNode("My Computer");
    exploringMyComputerAllFoldersNode[2] = new DefaultMutableTreeNode("Recycle Bin");
    for (int i = 1; i < 3; i++) {
      exploringMyComputerAllFoldersNode[0].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[3] = new DefaultMutableTreeNode("Removable Disk (A:)");
    exploringMyComputerAllFoldersNode[4] = new DefaultMutableTreeNode("Playdosgame (C:)");
    exploringMyComputerAllFoldersNode[5] = new DefaultMutableTreeNode("Control Panel");
    exploringMyComputerAllFoldersNode[6] = new DefaultMutableTreeNode("Printers");
    for (int i = 3; i < 7; i++) {
      exploringMyComputerAllFoldersNode[1].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[7] = new DefaultMutableTreeNode("Program Files");
    exploringMyComputerAllFoldersNode[8] = new DefaultMutableTreeNode("Windows");
    for (int i = 7; i < 9; i++) {
      exploringMyComputerAllFoldersNode[4].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[9] = new DefaultMutableTreeNode("Accessories");
    exploringMyComputerAllFoldersNode[10] = new DefaultMutableTreeNode("Microsoft Exchange");
    exploringMyComputerAllFoldersNode[11] = new DefaultMutableTreeNode("Plus!");
    exploringMyComputerAllFoldersNode[12] = new DefaultMutableTreeNode("The Microsoft Network");
    for (int i = 9; i < 13; i++) {
      exploringMyComputerAllFoldersNode[7].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[13] = new DefaultMutableTreeNode("Command");
    exploringMyComputerAllFoldersNode[14] = new DefaultMutableTreeNode("Config");
    exploringMyComputerAllFoldersNode[15] = new DefaultMutableTreeNode("Cursors");
    exploringMyComputerAllFoldersNode[16] = new DefaultMutableTreeNode("Fonts");
    exploringMyComputerAllFoldersNode[17] = new DefaultMutableTreeNode("Help");
    exploringMyComputerAllFoldersNode[18] = new DefaultMutableTreeNode("Inf");
    exploringMyComputerAllFoldersNode[19] = new DefaultMutableTreeNode("Media");
    exploringMyComputerAllFoldersNode[20] = new DefaultMutableTreeNode("Pif");
    exploringMyComputerAllFoldersNode[21] = new DefaultMutableTreeNode("Recent");
    exploringMyComputerAllFoldersNode[22] = new DefaultMutableTreeNode("SendTo");
    exploringMyComputerAllFoldersNode[23] = new DefaultMutableTreeNode("ShellNew");
    exploringMyComputerAllFoldersNode[24] = new DefaultMutableTreeNode("Spool");
    exploringMyComputerAllFoldersNode[25] = new DefaultMutableTreeNode("Start Menu");
    exploringMyComputerAllFoldersNode[26] = new DefaultMutableTreeNode("Sysbckup");
    exploringMyComputerAllFoldersNode[27] = new DefaultMutableTreeNode("System");
    exploringMyComputerAllFoldersNode[28] = new DefaultMutableTreeNode("Temp");
    for (int i = 13; i < 29; i++) {
      exploringMyComputerAllFoldersNode[8].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[29] = new DefaultMutableTreeNode("Microsoft Internet");
    exploringMyComputerAllFoldersNode[11].add(exploringMyComputerAllFoldersNode[29]);
    exploringMyComputerAllFoldersNode[30] = new DefaultMutableTreeNode("Printers");
    exploringMyComputerAllFoldersNode[24].add(exploringMyComputerAllFoldersNode[30]);
    exploringMyComputerAllFoldersNode[31] = new DefaultMutableTreeNode("Programs");
    exploringMyComputerAllFoldersNode[25].add(exploringMyComputerAllFoldersNode[31]);
    exploringMyComputerAllFoldersNode[32] = new DefaultMutableTreeNode("Color");
    exploringMyComputerAllFoldersNode[33] = new DefaultMutableTreeNode("losubsys");
    exploringMyComputerAllFoldersNode[34] = new DefaultMutableTreeNode("Vmm32");
    for (int i = 32; i < 35; i++) {
      exploringMyComputerAllFoldersNode[27].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[35] = new DefaultMutableTreeNode("Accessories");
    exploringMyComputerAllFoldersNode[36] = new DefaultMutableTreeNode("StartUp");
    for (int i = 35; i < 37; i++) {
      exploringMyComputerAllFoldersNode[31].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerAllFoldersNode[37] = new DefaultMutableTreeNode("Games");
    exploringMyComputerAllFoldersNode[38] = new DefaultMutableTreeNode("Internet Tools");
    exploringMyComputerAllFoldersNode[39] = new DefaultMutableTreeNode("Multimedia");
    exploringMyComputerAllFoldersNode[40] = new DefaultMutableTreeNode("System Tools");
    for (int i = 37; i < 41; i++) {
      exploringMyComputerAllFoldersNode[35].add(exploringMyComputerAllFoldersNode[i]);
    }
    exploringMyComputerTree = new JTree[2];
    exploringMyComputerTree[0] = new JTree(exploringMyComputerAllFoldersNode[0]);
    exploringMyComputerContentsNode = new DefaultMutableTreeNode[100];
    exploringMyComputerContentsNode[0] = new DefaultMutableTreeNode("Removable Disk (A:)");
    exploringMyComputerContentsNode[1] = new DefaultMutableTreeNode("Playdosgame (C:)");
    exploringMyComputerContentsNode[2] = new DefaultMutableTreeNode("Control Panel");
    exploringMyComputerContentsNode[3] = new DefaultMutableTreeNode("Printers");
    exploringMyComputerContentsNode[4] = new DefaultMutableTreeNode(
      "Contents of 'My Computer' Invisible Root Node");
    for (int i = 0; i < 4; i++) {
      exploringMyComputerContentsNode[4].add(exploringMyComputerContentsNode[i]);
    }
    exploringMyComputerTree[1] = new JTree(exploringMyComputerContentsNode[4]);
    exploringMyComputerTree[1].setRootVisible(false);
    exploringMyComputerSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
    exploringMyComputerSplitPane.setDividerLocation(300);
    exploringMyComputerSplitPane.setLeftComponent(exploringMyComputerTree[0]);
    exploringMyComputerSplitPane.setRightComponent(exploringMyComputerTree[1]);
    exploringMyComputer.add(exploringMyComputerSplitPane);
  }

  public void documentsReadmeSetText() {

    documentsReadmeTextArea.setText("--------------------------------------------------------\r\n" +
      "  Microsoft Windows 95 README for Microsoft Windows\r\n" + "August l995\r\n" +
      "  --------------------------------------------------------\r\n" +
      "   (c) Copyright Microsoft Corporation, 1995\r\n" + "\r\n" + "\r\n" + "------------------------\r\n" +
      "HOW TO USE THIS DOCUMENT\r\n" + "------------------------\r\n" + "\r\n" +
      "To view Readme.txt on screen in Notepad, maximize the Notepad window.\r\n" + "\r\n" +
      "To print Readme.txt, open it in Notepad or another word processor,\r\n" +
      "then use the Print command on the File menu.\r\n" + "\r\n" + "\r\n" + "--------\r\n" + "CONTENTS\r\n" +
      "--------\r\n" + "\r\n" + "IF YOU HAVEN'T INSTALLED WINDOWS 95\r\n" +
      "LIST OF WINDOWS 95 README FILES\r\n" + "HOW TO READ README FILES\r\n" + "UNINSTALLING WINDOWS 95\r\n" +
      "--------\r\n" + "\r\n" + "\r\n" + "IF YOU HAVEN'T INSTALLED WINDOWS 95\r\n" +
      "===================================\r\n" + "\r\n" +
      "Additional setup information is available in Setup.txt. You can view\r\n" +
      "Setup.txt using Notepad with Windows 3.1. You can find the file on\r\n" +
      "Windows 95 installation disk 1. If you purchased Windows 95 on a CD-\r\n" +
      "ROM, you can find Setup.txt in the \\Win95 directory.\r\n" + "\r\n" + "\r\n" +
      "LIST OF WINDOWS 95 README FILES\r\n" + "===============================\r\n" +
      "In addition to Readme.txt, Windows 95 provides the following readme\r\n" + "files:\r\n" + "\r\n" +
      " Config.txt Contains syntax information for commands you use\r\n" + "with your Config.sys file.\r\n" +
      "\r\n" + " Display.txtProvides information about how to configure\r\n" +
      "and correct problems for available drivers\r\n" + "and how to obtain additional display drivers.\r\n" +
      "\r\n" + " Exchange.txt   Provides information to help you set up and\r\n" +
      "run Microsoft Exchange.\r\n" + "\r\n" + " Extra.txt  Provides information about where to find\r\n" +
      "additional Windows 95 files, such as updates\r\n" + "and drivers, in addition to files available\r\n" +
      "only in the CD-ROM version of Windows 95.\r\n" + "\r\n" +
      " Faq.txtAnswers frequently asked questions about\r\n" + "Windows 95.\r\n" + "\r\n" +
      " General.txtProvides information about startup problems,\r\n" +
      "the programs that come with Windows 95, disk\r\n" +
      "tools, disks and CDs, drivers, removable media,\r\n" + "Microsoft FAX, and pen services.\r\n" +
      "\r\n" + "This file also contains last-minute information\r\n" +
      "received too late to include in the other readme\r\n" +
      "files. For example, if you have a question about\r\n" +
      "a printer, it would be helpful to look in\r\n" + "General.txt as well as in Printers.txt.\r\n" +
      "\r\n" + " Hardware.txt   Provides information about known problems and\r\n" +
      "workarounds for hardware. You may also need\r\n" + "to refer to Printers.txt or Mouse.txt for\r\n" +
      "specific problems.\r\n" + "\r\n" + " Internet.txt   Provides information to help you connect to\r\n" +
      "the Internet if you haven't done so already.\r\n" + "Also provides information about where to\r\n" +
      "download Microsoft's new Web browser,\r\n" + "Internet Explorer.\r\n" + "\r\n" +
      " Mouse.txt  Provides information about known problems\r\n" +
      "and workarounds specifically for mouse and\r\n" + "keyboard problems.\r\n" + "\r\n" +
      " Msdosdrv.txt   Contains syntax information for MS-DOS\r\n" +
      "device drivers. For additional help on MS-DOS\r\n" + "commands, see Config.txt. You can also use\r\n" +
      "command-line help at the command prompt by\r\n" + "typing /? following the command name.\r\n" +
      "\r\n" + " Msn.txtProvides information to help you connect to\r\n" + "The Microsoft Network.\r\n" +
      "\r\n" + " Network.txtProvides information about installing and\r\n" + "running network servers.\r\n" +
      "\r\n" + " Printers.txt   Provides information about known problems\r\n" +
      "and workarounds for printers.\r\n" + "\r\n" +
      " Programs.txt   Provides information and workarounds for\r\n" +
      "running some specific Windows-based and\r\n" + "MS-DOS-based programs with Windows 95.\r\n" + "\r\n" +
      " Support.txtProvides Information about how to get\r\n" + "additional support for Windows 95.\r\n" +
      "\r\n" + " Tips.txt   Contains an assortment of tips and tricks\r\n" +
      "for using Windows 95, most of which are not\r\n" +
      "documented in online Help or the printed book.\r\n" + "\r\n" + "\r\n" +
      "HOW TO READ README FILES\r\n" + "========================\r\n" + "\r\n" +
      "When you install Windows 95, all the readme files are copied to the\r\n" + "\\Windows directory.\r\n" +
      "\r\n" + "To open a readme file after you install Windows 95:\r\n" + "1. Click the Start menu.\r\n" +
      "2. Click Run.\r\n" + "3. Type the name of the readme file.\r\n" + "\r\n" +
      "Even if you haven't installed Windows 95 yet, you can still open a\r\n" + "readme file.\r\n" + "\r\n" +
      "To open a readme file before you install Windows 95:\r\n" + "\r\n" +
      "If you purchased Windows 95 on floppy disks:\r\n" +
      "--------------------------------------------\r\n" +
      "1. Insert Disk 1 into drive A (or whatever drive you prefer).\r\n" +
      "2. At the MS-DOS command prompt, type the following:\r\n" + "\r\n" +
      "   a:extract.exe /a /l c:\\windows win95_02.cab filename.txt\r\n" + "\r\n" +
      "For example, if you want to open General.txt, you would type:\r\n" + "\r\n" +
      "   a:extract.exe /a /l c:\\windows win95_02.cab general.txt\r\n" + "\r\n" +
      "3. Change to the \\Windows directory.\r\n" + "4. At the command prompt, type the following:\r\n" +
      "\r\n" + "   edit filename.txt\r\n" + "\r\n" + "If you purchased Windows 95 on a CD-ROM:\r\n" +
      "----------------------------------------\r\n" +
      "1. Insert the CD into your CD-ROM drive (drive x in this example).\r\n" +
      "2. Change to the \\Win95 directory on your CD-ROM drive.\r\n" +
      "2. At the MS-DOS command prompt, type the following:\r\n" + "\r\n" +
      "   extract.exe /a /l c:\\windows win95_02.cab filename.txt\r\n" + "\r\n" +
      "For example, if you want to open General.txt, you would type:\r\n" + "\r\n" +
      "   extract.exe /a /l c:\\windows win95_02.cab general.txt\r\n" + "\r\n" +
      "3. Change to the Windows directory on your C drive.\r\n" +
      "4. At the command prompt, type the following:\r\n" + "\r\n" + "   edit filename.txt\r\n" + "\r\n" +
      "\r\n" + "UNINSTALLING WINDOWS 95\r\n" + "=======================\r\n" + "\r\n" +
      "During Setup, you have the option of saving your system files so\r\n" +
      "that you can uninstall Windows 95 later. If you want to be able to\r\n" +
      "uninstall Windows 95 later, choose Yes. Setup will save your system\r\n" +
      "files in a hidden, compressed file. If you don't need to be able to\r\n" +
      "uninstall Windows 95 later, choose No.\r\n" + "\r\n" + "You will not see this Setup option if:\r\n" +
      "- You are upgrading over an earlier version of Windows 95.\r\n" +
      "- You are installing to a new directory.\r\n" +
      "- You are running a version of MS-DOS earlier than 5.0.\r\n" + "\r\n" +
      "NOTE:The uninstall files must be saved on a local hard drive. You\r\n" +
      "can't save them to a network drive or a floppy disk. If you have\r\n" +
      "multiple local drives, you will be able to select the one you want\r\n" +
      "to save the uninstall information on.\r\n" + "\r\n" +
      "To uninstall Windows 95 and completely restore your computer to its\r\n" +
      "previous versions of MS-DOS and Windows 3.x, carry out the following\r\n" + "procedure:\r\n" + "\r\n" +
      "1. Click the Start button, point to Settings, and then click\r\n" + "   Control Panel.\r\n" +
      "2. Double-click the Add/Remove Programs icon.\r\n" +
      "3. On the Install/Uninstall tab, click Windows 95, and then click\r\n" + "   Remove.\r\n" + "\r\n" +
      "Or, if you are having problems starting Windows 95, use your startup\r\n" +
      "disk to start your computer, and then run UNINSTAL from the startup\r\n" + "disk.\r\n" + "\r\n" +
      "NOTE: The uninstall program needs to shut down Windows 95. If there is\r\n" +
      "a problem with this on your computer, restart your computer and press\r\n" +
      "F8 when you see the message \"Starting Windows 95.\" Then choose Command\r\n" +
      "Prompt Only, and run UNINSTAL from the command prompt.\r\n" + "\r\n" +
      "If Windows 95 is running and you want to remove the uninstall files to\r\n" +
      "free up 6 to 9 MB of disk space, carry out the following procedure:\r\n" + "\r\n" +
      "1. Click the Start button, point to Settings, and then click\r\n" + "   Control Panel.\r\n" +
      "2. Double-click the Add/Remove Programs icon.\r\n" +
      "3. On the Install/Uninstall tab, click Old Windows 3.x/MS-DOS System\r\n" +
      "   Files, and then click Remove.\r\n" + "\r\n" +
      "You will no longer be able to uninstall Windows 95.");
  }

  public void disposeEveryWindowMethod() {
    welcome.dispose();
    aboutWindows95Dialog.dispose();
    aboutNotepadDialog.dispose();
    shutDownWindowsDialog.dispose();
    shutDownWindowsHelp.dispose();
    annotateDialog.dispose();
    displayProperties.dispose();
    displayPropertiesChangeConfiguration.dispose();
    startMenuPopupOpen.dispose();
    exploringStartMenu.dispose();
    startMenuPopupFind.dispose();
    taskbarProperties.dispose();
    taskbarPropertiesCreateShortcut.dispose();
    taskbarPropertiesRemoveShortcutsFolders.dispose();
    taskbarPropertiesAdvanced.dispose();
    dateTimeProperties.dispose();
    volumeControl.dispose();
    audioProperties.dispose();
    dateTimeProperties.dispose();
    myComputerOpen.dispose();
    exploringMyComputer.dispose();
    removableDiskA_Explore.dispose();
    removableDiskA_Properties.dispose();
    playDosGameC_Open.dispose();
    playDosGameC_Properties.dispose();
    programFilesOpen.dispose();
    controlPanelOpen.dispose();
    addNewHardwareWizard.dispose();
    addRemoveProgramsProperties.dispose();
    addRemoveProgramsPropertiesInstall.dispose();
    addRemoveProgramsPropertiesDetails.dispose();
    addRemoveProgramsPropertiesHaveDisk.dispose();
    controlPanelFontsOpen.dispose();
    controlPanelInternetProperties.dispose();
    joystickProperties.dispose();
    customJoystick.dispose();
    joystickCalibration.dispose();
    joystickTest.dispose();
    keyboardProperties.dispose();
    keyboardPropertiesAdd.dispose();
    keyboardPropertiesProperties.dispose();
    keyboardPropertiesChange.dispose();
    modemsInstallNewModem.dispose();
    modemsProperties.dispose();
    mouseProperties.dispose();
    mousePropertiesSaveScheme.dispose();
    mousePropertiesChange.dispose();
    multimediaProperties.dispose();
    controlPanelNetwork.dispose();
    passwordsProperties.dispose();
    printersOpen.dispose();
    addPrinterWizard.dispose();
    regionalSettingsProperties.dispose();
    soundsProperties.dispose();
    controlPanelSystemProperties.dispose();
    inboxOpen.dispose();
    copyingFiles.dispose();
    copyingFiles2.dispose();
    inboxProperties.dispose();
    recycleBinOpen.dispose();
    exploringRecycleBin.dispose();
    recycleBinProperties.dispose();
    theInternetOpen.dispose();
    theInternetCopyingFiles.dispose();
    theInternetCopyingFiles2.dispose();
    internetProperties.dispose();
    MSN_Open.dispose();
    MSN_Properties.dispose();
    freeCellOpen.dispose();
    freeCellStatistics.dispose();
    freeCellOptions.dispose();
    heartsOpen.dispose();
    heartsWelcome.dispose();
    heartsOptions.dispose();
    heartsScoreSheet.dispose();
    heartsQuote.dispose();
    heartsAbout.dispose();
    minesweeperOpen.dispose();
    solitaireOpen.dispose();
    internetExplorerOpen.dispose();
    mediaPlayerOpen.dispose();
    soundRecorderOpen.dispose();
    scanDiskOpen.dispose();
    calculatorOpen.dispose();
    paintOpen.dispose();
    MSDOSPromptOpen.dispose();
    windowsExplorerOpen.dispose();
    documentsReadme_txt.dispose();
    findAllFiles.dispose();
    findAllFilesBrowseForFolder.dispose();
    helpTopicsWindowsHelp.dispose();
    findSetupWizard.dispose();
    startMenuRunOpen.dispose();
  }

  // Adding Functionalities to Components
  @SuppressWarnings({
    "serial",
    "deprecation"
  })
  public void actionPerformed(ActionEvent e) {
    // Adding Functionality to Windows Tour in Welcome Dialog Box
    if (e.getSource() == welcomeButton[0]) {
      welcome.setAlwaysOnTop(false);
      int responseWindowsTour = JOptionPane.showOptionDialog(null, "No CDROM drives were found on the system",
        "Welcome", JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
      if (responseWindowsTour == 0) {
        JOptionPane.showOptionDialog(null, "The Windows 95 tour was not installed.", "Welcome",
          JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
        welcome.setAlwaysOnTop(true);
      } else {
        welcome.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to What's New in Welcome Dialog Box
    else if (e.getSource() == welcomeButton[1]) {

    }
    // Adding Functionality to Online Registration in Welcome Dialog Box
    else if (e.getSource() == welcomeButton[2]) {
      welcome.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseOnlineRegistration = JOptionPane.showConfirmDialog(null,
        "No modem is available on this system. If\n" + "you do not install a modem, you will not\n" +
        "be able to run this application. Would\n" + "you like to install one now?",
        "Registration Wizard", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
        onlineRegistrationIcon);
      if (responseOnlineRegistration == JOptionPane.YES_OPTION) {
        welcome.setAlwaysOnTop(true);
        theInternetOpen.setAlwaysOnTop(false);
        theInternetBack.setEnabled(false);
        theInternetOpen.remove(internetSetupImage);
        theInternetOpen.remove(youNeedAModem);
        theInternetOpen.remove(theInternetHelp);
        theInternetOpen.add(detectYourModem);
        theInternetOpen.add(dontDetectMyModem);
        theInternetOpen.add(installNewModemImage);
        theInternetOpen.add(theInternetBack);
        theInternetOpen.add(theInternetNext);
        theInternetOpen.add(theInternetCancel);
        theInternetOpen.add(installNewModemSeparator);
        theInternetOpen.revalidate();
        theInternetOpen.repaint();
        theInternetOpen.setTitle("Install New Modem");
        theInternetOpen.setVisible(true);
      } else if (responseOnlineRegistration == JOptionPane.NO_OPTION) {
        int responseRegistrationWizard = JOptionPane.showOptionDialog(null,
          "The Registration Wizard requires that you\n" + "have a properly configured modem to\n" +
          "perform automatic registration. Since\n" + "such a modem could not be detected,\n" +
          "please fill out and return the registration\n" + "card that came with your product.",
          "Registration Wizard", JOptionPane.INFORMATION_MESSAGE, 0, onlineRegistrationIcon, OK, OK[0]);
        if (responseRegistrationWizard == 0) {
          welcome.setAlwaysOnTop(true);
        } else {
          welcome.setAlwaysOnTop(true);
        }
      }
    }
    // Adding Functionality to Product Catalog in Welcome Dialog Box
    else if (e.getSource() == welcomeButton[3]) {
      welcome.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "OK");
      UIManager.put("OptionPane.noButtonText", "Cancel");
      int responseProductCatalog;
      do {
        responseProductCatalog = JOptionPane.showConfirmDialog(null,
          "Unable to find the Windows 95 CD-ROM.\n\n" +
          "Please insert the Windows 95 CD-ROM and click OK. If you do not\n" +
          "have the Windows 95 CD-ROM, click Cancel.",
          "Windows Products Information", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
          exclamationMark);
      } while (responseProductCatalog == JOptionPane.YES_OPTION);
      if (responseProductCatalog != JOptionPane.YES_OPTION) {
        welcome.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Next Tip in Welcome Dialog Box
    if (e.getSource() == welcomeButton[4]) {
      if (didYouKnow[0].getParent() != null) {
        welcome.remove(didYouKnow[0]);
        welcome.add(didYouKnow[1]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[1].getParent() != null) {
        welcome.remove(didYouKnow[1]);
        welcome.add(didYouKnow[2]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[2].getParent() != null) {
        welcome.remove(didYouKnow[2]);
        welcome.add(didYouKnow[3]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[3].getParent() != null) {
        welcome.remove(didYouKnow[3]);
        welcome.add(didYouKnow[4]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[4].getParent() != null) {
        welcome.remove(didYouKnow[4]);
        welcome.add(didYouKnow[5]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[5].getParent() != null) {
        welcome.remove(didYouKnow[5]);
        welcome.add(didYouKnow[6]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[6].getParent() != null) {
        welcome.remove(didYouKnow[6]);
        welcome.add(didYouKnow[7]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[7].getParent() != null) {
        welcome.remove(didYouKnow[7]);
        welcome.add(didYouKnow[8]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[8].getParent() != null) {
        welcome.remove(didYouKnow[8]);
        welcome.add(didYouKnow[9]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[9].getParent() != null) {
        welcome.remove(didYouKnow[9]);
        welcome.add(didYouKnow[10]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[10].getParent() != null) {
        welcome.remove(didYouKnow[10]);
        welcome.add(didYouKnow[11]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[11].getParent() != null) {
        welcome.remove(didYouKnow[11]);
        welcome.add(didYouKnow[12]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[12].getParent() != null) {
        welcome.remove(didYouKnow[12]);
        welcome.add(didYouKnow[13]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[13].getParent() != null) {
        welcome.remove(didYouKnow[13]);
        welcome.add(didYouKnow[14]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[14].getParent() != null) {
        welcome.remove(didYouKnow[14]);
        welcome.add(didYouKnow[15]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[15].getParent() != null) {
        welcome.remove(didYouKnow[15]);
        welcome.add(didYouKnow[16]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[16].getParent() != null) {
        welcome.remove(didYouKnow[16]);
        welcome.add(didYouKnow[17]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[17].getParent() != null) {
        welcome.remove(didYouKnow[17]);
        welcome.add(didYouKnow[18]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[18].getParent() != null) {
        welcome.remove(didYouKnow[18]);
        welcome.add(didYouKnow[19]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[19].getParent() != null) {
        welcome.remove(didYouKnow[19]);
        welcome.add(didYouKnow[20]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[20].getParent() != null) {
        welcome.remove(didYouKnow[20]);
        welcome.add(didYouKnow[21]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[21].getParent() != null) {
        welcome.remove(didYouKnow[21]);
        welcome.add(didYouKnow[22]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[22].getParent() != null) {
        welcome.remove(didYouKnow[22]);
        welcome.add(didYouKnow[23]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[23].getParent() != null) {
        welcome.remove(didYouKnow[23]);
        welcome.add(didYouKnow[24]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[24].getParent() != null) {
        welcome.remove(didYouKnow[24]);
        welcome.add(didYouKnow[25]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[25].getParent() != null) {
        welcome.remove(didYouKnow[25]);
        welcome.add(didYouKnow[26]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[26].getParent() != null) {
        welcome.remove(didYouKnow[26]);
        welcome.add(didYouKnow[27]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[27].getParent() != null) {
        welcome.remove(didYouKnow[27]);
        welcome.add(didYouKnow[28]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[28].getParent() != null) {
        welcome.remove(didYouKnow[28]);
        welcome.add(didYouKnow[29]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[29].getParent() != null) {
        welcome.remove(didYouKnow[29]);
        welcome.add(didYouKnow[30]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[30].getParent() != null) {
        welcome.remove(didYouKnow[30]);
        welcome.add(didYouKnow[31]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[31].getParent() != null) {
        welcome.remove(didYouKnow[31]);
        welcome.add(didYouKnow[32]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[32].getParent() != null) {
        welcome.remove(didYouKnow[32]);
        welcome.add(didYouKnow[33]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[33].getParent() != null) {
        welcome.remove(didYouKnow[33]);
        welcome.add(didYouKnow[34]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[34].getParent() != null) {
        welcome.remove(didYouKnow[34]);
        welcome.add(didYouKnow[35]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[35].getParent() != null) {
        welcome.remove(didYouKnow[35]);
        welcome.add(didYouKnow[36]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[36].getParent() != null) {
        welcome.remove(didYouKnow[36]);
        welcome.add(didYouKnow[37]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[37].getParent() != null) {
        welcome.remove(didYouKnow[37]);
        welcome.add(didYouKnow[38]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[38].getParent() != null) {
        welcome.remove(didYouKnow[38]);
        welcome.add(didYouKnow[39]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[39].getParent() != null) {
        welcome.remove(didYouKnow[39]);
        welcome.add(didYouKnow[40]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[40].getParent() != null) {
        welcome.remove(didYouKnow[40]);
        welcome.add(didYouKnow[41]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[41].getParent() != null) {
        welcome.remove(didYouKnow[41]);
        welcome.add(didYouKnow[42]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[42].getParent() != null) {
        welcome.remove(didYouKnow[42]);
        welcome.add(didYouKnow[43]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[43].getParent() != null) {
        welcome.remove(didYouKnow[43]);
        welcome.add(didYouKnow[44]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[44].getParent() != null) {
        welcome.remove(didYouKnow[44]);
        welcome.add(didYouKnow[45]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[45].getParent() != null) {
        welcome.remove(didYouKnow[45]);
        welcome.add(didYouKnow[46]);
        welcome.revalidate();
        welcome.repaint();
      } else if (didYouKnow[46].getParent() != null) {
        welcome.remove(didYouKnow[46]);
        welcome.add(didYouKnow[0]);
        welcome.revalidate();
        welcome.repaint();
      }
    }
    // Adding Functionality to Close in Welcome Dialog Box
    else if (e.getSource() == welcomeButton[5]) {
      welcome.dispose();
    }
    // Adding Functionality to Yes, Install the Microsoft Network in Set Up The
    // Microsoft Network
    else if (e.getSource() == MSN_OK && MSN_Yes.isSelected()) {
      MSN_Open.dispose();
      try {
        Thread.sleep(1000);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      copyingFiles.setVisible(true);
      responseInsertDisk = JOptionPane.showOptionDialog(null,
        "Please insert the disk labeled 'Windows 95 CD-ROM', and then click OK.", "Insert Disk",
        JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseInsertDisk == 0) {
        copyingFiles2.setVisible(true);
      }
    }
    // Adding Functionality to No, Do Not Install the Microsoft Network in Set Up
    // The Microsoft Network
    else if (e.getSource() == MSN_OK && MSN_No.isSelected()) {
      MSN_Open.dispose();
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseMSN = JOptionPane.showConfirmDialog(null,
        "Would you like to delete the 'Set Up The Microsoft Network' icon on\n" +
        "your desktop? You can install The Microsoft Network at any time\n" +
        "using the Add/Remove Programs control panel.",
        "The Microsoft Network", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, questionMark);
      if (responseMSN == JOptionPane.YES_OPTION) {
        desktop.remove(MSN);
        desktop.remove(MSN_Selected);
        desktop.revalidate();
        desktop.repaint();
      }
    }
    // Adding Functionality to Cancel in Set up The Microsoft Network
    else if (e.getSource() == MSN_Cancel) {
      MSN_Open.dispose();
    }
    //Adding Functionality to Line Up Icon in Desktop Popup Menu
    else if(e.getSource() == menuItem[5]) {
    	myComputer.setBounds(2, 0, 102, 77);
    	inbox.setBounds(26, 110, 51, 78);
    	recycleBin.setBounds(5, 222, 96, 78);
    	theInternet.setBounds(5, 335, 97, 78);
    	MSN.setBounds(5, 445, 92, 119);
    	myComputerSelected.setBounds(2, 0, 102, 77);
    	inboxSelected.setBounds(26, 110, 51, 78);
    	recycleBinSelected.setBounds(5, 222, 96, 78);
    	theInternetSelected.setBounds(5, 335, 97, 78);
    	MSN_Selected.setBounds(5, 445, 92, 119);
    }
    // Adding Functionality to New Folder in Desktop Popup Menu
    else if (e.getSource() == menuItem[8]) {
      newFolderCreated = new JLabel(
        new ImageIcon(getClass().getClassLoader().getResource("NewFolderCreated.png")));
      newFolderCreated.setToolTipText("New Folder");
      Random random = new Random();
      int newFolderPositionX = random.nextInt((800 - 0) + 0);
      int newFolderPositionY = random.nextInt((800 - 0) + 0);
      newFolderCreated.setBounds(newFolderPositionX, newFolderPositionY, 150, 150);
      desktop.add(newFolderCreated);
      desktop.revalidate();
      desktop.repaint();
    }
    // Adding Functionality to Properties Menu Item in Desktop Popup Menu
    else if (e.getSource() == menuItem[14]) {
      displayProperties.setVisible(true);
    }
    // Adding Functionality to OK in Display Properties
    else if (e.getSource() == displayPropertiesButton[0]) {
      displayProperties.dispose();
      displayPropertiesChangeConfiguration.dispose();
      displayPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Cancel in Display Properties
    else if (e.getSource() == displayPropertiesButton[1]) {
      displayProperties.dispose();
      displayPropertiesChangeConfiguration.dispose();
      displayPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Apply in Display Properties
    else if (e.getSource() == displayPropertiesButton[2]) {
      displayPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Screen Saver in Screen Saver Tab in Display
    // Properties
    else if (displayPropertiesComboBox[0].getSelectedIndex() == 0) {
      for (int i = 5; i < 8; i++) {
        displayPropertiesButton[i].setEnabled(false);
        displayPropertiesCheckBox[0].setEnabled(false);
        displayPropertiesSpinner[0].setEnabled(false);
      }
    } else if (displayPropertiesComboBox[0].getSelectedIndex() == 1) {
      for (int i = 5; i < 8; i++) {
        displayPropertiesButton[i].setEnabled(true);
        displayPropertiesCheckBox[0].setEnabled(true);
        displayPropertiesSpinner[0].setEnabled(true);
      }
    }
    // Adding Functionality to Settings... in Screen Saver Tab in Display Properties
    else if (e.getSource() == displayPropertiesButton[5]) {

    }
    // Adding Functionality to Color Palette in Settings Tab in Display Properties
    if (displayPropertiesComboBox[13].getSelectedIndex() == 0) {
      settingsPanel.remove(displayPropertiesColorPaletteBar[1]);
      settingsPanel.add(displayPropertiesColorPaletteBar[0]);
      settingsPanel.revalidate();
      settingsPanel.repaint();
    } else if (displayPropertiesComboBox[13].getSelectedIndex() == 1) {
      settingsPanel.remove(displayPropertiesColorPaletteBar[0]);
      settingsPanel.add(displayPropertiesColorPaletteBar[1]);
      settingsPanel.revalidate();
      settingsPanel.repaint();
    }
    // Adding Functionality to Preview in Screen Saver Tab in Display Properties
    if (e.getSource() == displayPropertiesButton[6]) {
      mainFrame.remove(desktop);
      mainFrame.add(flyingWindowsLabel);
      mainFrame.revalidate();
      mainFrame.repaint();
      mainFrame.addMouseMotionListener(new MouseAdapter() {
        public void mouseMoved(MouseEvent e) {
          if (flyingWindowsLabel.getParent() != null) {
            mainFrame.remove(flyingWindowsLabel);
            mainFrame.add(desktop);
            mainFrame.revalidate();
            mainFrame.repaint();
          }
        }
      });
    }
    // Adding Functionality to Password protected in Screen Saver Tab in Display
    // Properties
    else if (displayPropertiesComboBox[0].getSelectedIndex() == 1 && displayPropertiesCheckBox[0].isSelected()) {
      displayPropertiesButton[7].setEnabled(true);
    } else if (!displayPropertiesCheckBox[0].isSelected()) {
      displayPropertiesButton[7].setEnabled(false);
    }
    // Adding Functionality to Change Configuration in S3 Refresh Tab in Display
    // Properties
    if (e.getSource() == displayPropertiesButton[10]) {
      displayPropertiesChangeConfiguration.setVisible(true);
    }
    // Adding Functionality to OK in Change Configuration Dialog in Display
    // Properties
    if (e.getSource() == displayPropertiesDialogButton[12]) {
      displayPropertiesChangeConfiguration.dispose();
    }
    // Adding Functionality to Cancel in Change Configuration Dialog in Display
    // Properties
    if (e.getSource() == displayPropertiesDialogButton[13]) {
      displayPropertiesChangeConfiguration.dispose();
    }
    // Adding Functionality to Open Menu Item in Start Menu Popup Menu
    if (e.getSource() == menuItem[15]) {
      startMenuPopupOpen.setVisible(true);
    }
    // Adding Functionality to Explore Menu Item in Start Menu Popup Menu
    if (e.getSource() == menuItem[16]) {
      exploringStartMenu.setVisible(true);
    }
    // Adding Functionality to Find Menu Item in Start Menu Popup Menu
    if (e.getSource() == menuItem[17]) {
      startMenuPopupFind.setVisible(true);
    }
    // Adding Functionality to Properties Menu Item in Taskbar Popup Menu
    if (e.getSource() == menuItem[22]) {
      taskbarProperties.setVisible(true);
      desktop.revalidate();
      desktop.repaint();
    }
    // Adding Functionalities to Options in Taskbar Properties
    /// [null]
    if (!taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 1; i < 16; i++) {
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[0]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 1[0]
    if (taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 1) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[1]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 1[1]
    if (!taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 2) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[2]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 1[2]
    if (!taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 3) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[3]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 1[3]
    if (!taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 4) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[4]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 2[0][1]
    if (taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 5) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[5]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 2[0][2]
    if (taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 6) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[6]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 2[0][3]
    if (taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 7) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[7]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 2[1][2]
    if (!taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 8) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[8]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 2[1][3]
    if (!taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 9) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[9]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 2[2][3]
    if (!taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 10) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[10]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 3[0][1][2]
    if (taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      !taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 11) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[11]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 3[0][1][3]
    if (taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && !taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 12) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[12]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 3[0][2][3]
    if (taskbarOption[0].isSelected() && !taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 13) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[13]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 3[1][2][3]
    if (!taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 16; i++) {
        if (i == 14) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[14]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    /// 4[0][1][2][3]
    if (taskbarOption[0].isSelected() && taskbarOption[1].isSelected() && taskbarOption[2].isSelected() &&
      taskbarOption[3].isSelected()) {
      for (int i = 0; i < 15; i++) {
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
      }
      taskbarOptionsPanel.add(taskbarPropertiesImage[15]);
      taskbarOptionsPanel.revalidate();
      taskbarOptionsPanel.repaint();
    }
    // Adding Functionality to OK in Taskbar Properties
    if (e.getSource() == taskbarPropertiesButton[0]) {
      taskbarPropertiesTabbedPane.setSelectedIndex(0);
      taskbarProperties.dispose();
      taskbarPropertiesCreateShortcut.dispose();
      taskbarPropertiesRemoveShortcutsFolders.dispose();
    }
    // Adding Functionality to Cancel in Taskbar Properties
    else if (e.getSource() == taskbarPropertiesButton[1]) {
      taskbarPropertiesTabbedPane.setSelectedIndex(0);
      for (int i = 0; i < 16; i++) {
        if (i == 7) {
          continue;
        }
        taskbarOptionsPanel.remove(taskbarPropertiesImage[i]);
        taskbarOptionsPanel.add(taskbarPropertiesImage[7]);
        taskbarOptionsPanel.revalidate();
        taskbarOptionsPanel.repaint();
      }
      taskbarOption[0].setSelected(true);
      taskbarOption[1].setSelected(false);
      taskbarOption[2].setSelected(false);
      taskbarOption[3].setSelected(true);
      taskbarPropertiesButton[2].setEnabled(false);
      taskbarProperties.dispose();
      taskbarPropertiesCreateShortcut.dispose();
      taskbarPropertiesRemoveShortcutsFolders.dispose();
    }
    // Adding Functionality to Apply in Taskbar Properties
    if (e.getSource() == taskbarPropertiesButton[2]) {
      taskbarPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Add... in Taskbar Properties
    if (e.getSource() == taskbarPropertiesButton[3]) {
      taskbarPropertiesCreateShortcut.setVisible(true);
    }
    // Adding Functionality to Remove... in Taskbar Properties
    if (e.getSource() == taskbarPropertiesButton[4]) {
      taskbarPropertiesRemoveShortcutsFolders.setVisible(true);
    }
    // Adding Functionality to Clear in Taskbar Properties
    if (e.getSource() == taskbarPropertiesButton[6]) {
      taskbarPropertiesButton[6].setEnabled(false);
    }
    /// Adding Functionality to Cancel in Create Shortcut in Taskbar Properties
    if (e.getSource() == taskbarPropertiesDialogButton[3]) {
      taskbarPropertiesCreateShortcut.dispose();
      taskbarPropertiesCreateShortcutTextField.setText("");
    }
    /// Adding Functionality to Browse... in Create Shortcut in Taskbar Properties
    if (e.getSource() == taskbarPropertiesDialogButton[0]) {
      UIManager.put("FileChooser.openDialogTitleText", "Browse");
      UIManager.put("FileChooser.lookInLabelText", "Look In");
      UIManager.put("FileChooser.openButtonText", "Open");
      UIManager.put("FileChooser.cancelButtonText", "Cancel");
      UIManager.put("FileChooser.fileNameLabelText", "File Name");
      UIManager.put("FileChooser.filesOfTypeLabelText", "Files of type");
      UIManager.put("FileChooser.filterLabelText", "All Files");
      taskbarPropertiesCreateShortcutBrowse = new JFileChooser();
      programs = new FileNameExtensionFilter("Programs", "Programs", "Programs");
      taskbarPropertiesCreateShortcutBrowse.setCurrentDirectory(new File("C:\\"));
      taskbarPropertiesCreateShortcutBrowse.setFileFilter(programs);
    }
    /// Adding Functionality to Next in Create Shortcut in Taskbar Properties
    if (e.getSource() == taskbarPropertiesDialogButton[2]) {
      taskbarProperties.setAlwaysOnTop(false);
      taskbarPropertiesCreateShortcut.setAlwaysOnTop(false);
      int responseCreateShortcut = JOptionPane.showOptionDialog(null,
        "The file " + taskbarPropertiesCreateShortcutTextField.getText() + " cannot be found.",
        "Create Shortcut", JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
      if (responseCreateShortcut == 0) {
        taskbarProperties.setAlwaysOnTop(true);
        taskbarPropertiesCreateShortcut.setAlwaysOnTop(true);
      } else {
        taskbarProperties.setAlwaysOnTop(true);
        taskbarPropertiesCreateShortcut.setAlwaysOnTop(true);
      }
    }
    /// Adding Functionality to Cancel in Create Shortcut in Taskbar Properties
    if (e.getSource() == taskbarPropertiesDialogButton[3]) {
      taskbarPropertiesCreateShortcut.dispose();
      taskbarPropertiesCreateShortcutTextField.setText("");
    }
    /// Adding Functionality to Close in Create Shortcut in Taskbar Properties
    if (e.getSource() == taskbarPropertiesDialogButton[5]) {
      taskbarPropertiesRemoveShortcutsFolders.dispose();
      for (int i = 2; i < 4; i++) {
        taskbarPropertiesRemoveShortcutsFoldersPath = new TreePath(
          taskbarPropertiesRemoveShortcutsFoldersNode[i].getPath());
      }
      taskbarPropertiesRemoveShortcutsFoldersTree.collapsePath(taskbarPropertiesRemoveShortcutsFoldersPath);
    }
    // Adding Functionality to Advanced... in Taskbar Properties
    if (e.getSource() == taskbarPropertiesButton[5]) {
      taskbarPropertiesAdvanced.setVisible(true);
    }
    /// Adding Functionality to Close in File Menu in Advanced... in Taskbar
    /// Properties
    if (e.getSource() == taskbarPropertiesAdvancedMenuItem[10]) {
      taskbarPropertiesAdvanced.dispose();
    }
    /// Adding Functionality to Status Bar in View Menu in Advanced... in Taskbar
    /// Properties
    if (taskbarPropertiesAdvancedCheckBoxMenuItem[1].isSelected() == true) {
      taskbarPropertiesAdvanced.add(taskbarPropertiesAdvancedPanel[1], BorderLayout.SOUTH);
      taskbarPropertiesAdvanced.revalidate();
      taskbarPropertiesAdvanced.repaint();
    }
    if (taskbarPropertiesAdvancedCheckBoxMenuItem[1].isSelected() == false) {
      taskbarPropertiesAdvanced.remove(taskbarPropertiesAdvancedPanel[1]);
      taskbarPropertiesAdvanced.revalidate();
      taskbarPropertiesAdvanced.repaint();
    }
    /// Adding Functionality to Files or Folders... in Find Menu in Tools Menu in
    /// Advanced... in Taskbar Properties
    if (e.getSource() == taskbarPropertiesAdvancedMenuItem[30]) {
      findAllFiles.setVisible(true);
    }
    /// Adding Functionality to Help Topics in Help Menu in Advanced... in Taskbar
    /// Properties
    if (e.getSource() == taskbarPropertiesAdvancedMenuItem[32]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    /// Adding Functionality to About Windows 95 in Help Menu in Advanced... in
    /// Taskbar Properties
    if (e.getSource() == taskbarPropertiesAdvancedMenuItem[33]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to OK in Date/Time Properties
    if (e.getSource() == dateTimePropertiesButton[0]) {
      dateTimeProperties.dispose();
    }
    // Adding Functionality to Cancel in Date/Time Properties
    if (e.getSource() == dateTimePropertiesButton[1]) {
      dateTimeProperties.dispose();
      dateTimePropertiesTabbedPane.setSelectedIndex(0);
      switch (currentMonth) {
      case "January":
        dateTimePropertiesMonth.setSelectedIndex(0);
        break;
      case "February":
        dateTimePropertiesMonth.setSelectedIndex(1);
        break;
      case "March":
        dateTimePropertiesMonth.setSelectedIndex(2);
        break;
      case "April":
        dateTimePropertiesMonth.setSelectedIndex(3);
        break;
      case "May":
        dateTimePropertiesMonth.setSelectedIndex(4);
        break;
      case "June":
        dateTimePropertiesMonth.setSelectedIndex(5);
        break;
      case "July":
        dateTimePropertiesMonth.setSelectedIndex(6);
        break;
      case "August":
        dateTimePropertiesMonth.setSelectedIndex(7);
        break;
      case "September":
        dateTimePropertiesMonth.setSelectedIndex(8);
        break;
      case "October":
        dateTimePropertiesMonth.setSelectedIndex(9);
        break;
      case "November":
        dateTimePropertiesMonth.setSelectedIndex(10);
        break;
      case "December":
        dateTimePropertiesMonth.setSelectedIndex(11);
        break;
      }
      dateTimePropertiesTime.setEditor(dateTimePropertiesTimeEditor);
      dateTimePropertiesTimeZone.setSelectedIndex(6);
      dateTimePropertiesCheckBox.setSelected(false);
    }
    // Adding Functionality to Apply in Date/Time Properties
    if (e.getSource() == dateTimePropertiesButton[2]) {
      dateTimePropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Volume Controls in Volume Popup Menu
    if (e.getSource() == menuItem[23]) {
      volumeControl.setVisible(true);
    }
    // Adding Functionality to Exit in Options Menu in Volume Control
    if (e.getSource() == volumeControlMenuItem[2]) {
      volumeControl.dispose();
    }
    // Adding Functionality to Adjust Audio Properties in Volume Popup Menu
    if (e.getSource() == menuItem[24]) {
      audioProperties.setVisible(true);
    }
    // Adding Functionality to Adjust Date/Time in Time Popup Menu
    if (e.getSource() == menuItem[25]) {
      dateTimeProperties.setVisible(true);
    }
    // Adding Functionality to Properties Menu Item in Time Popup Menu
    if (e.getSource() == menuItem[30]) {
      taskbarProperties.setVisible(true);
    }
    // Adding Functionality to Open in My Computer Popup Menu
    if (e.getSource() == menuItem[31]) {
      myComputerOpen.setVisible(true);
    }
    // Adding Functionality to Explore in My Computer Popup Menu
    if (e.getSource() == menuItem[32]) {
      exploringMyComputer.setVisible(true);
    }
    // Adding Functionality to Properties in My Computer Popup Menu
    if (e.getSource() == menuItem[36]) {
      controlPanelSystemProperties.setVisible(true);
    }
    // Adding Functionality to Open in Inbox Popup Menu
    if (e.getSource() == menuItem[37]) {
      inboxOpen.setVisible(true);
    }
    // Adding Functionality to Explore in Inbox Popup Menu
    if (e.getSource() == menuItem[38]) {
      inboxOpen.setVisible(true);
    }
    // Adding Functionality to Delete in Inbox Popup Menu
    if (e.getSource() == menuItem[41]) {
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseDeleteInbox = JOptionPane.showConfirmDialog(null,
        "'Inbox' cannot be stored in the Recycle Bin.\n\n" +
        "This will remove the icon from your desktop. Use the Add/Remove\n Programs control panel to install Microsoft Exchange on your\n computer.\n\n" +
        "Are you sure you want to delete 'Inbox' from your desktop?",
        "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, confirmDelete);
      if (responseDeleteInbox == JOptionPane.YES_OPTION) {
        desktop.remove(inbox);
        desktop.remove(inboxSelected);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    }
    // Adding Functionality to Properties in Inbox Popup Menu
    if (e.getSource() == menuItem[43]) {
      inboxProperties.setVisible(true);
    }
    // Adding Functionality to Open in Recycle Bin Popup Menu
    if (e.getSource() == menuItem[44]) {
      recycleBinOpen.setVisible(true);
    }
    // Adding Functionality to Explore in Recycle Bin Popup Menu
    if (e.getSource() == menuItem[45]) {
      exploringRecycleBin.setVisible(true);
    }
    // Adding Functionality to Properties in Recycle Bin Popup Menu
    if (e.getSource() == menuItem[48]) {
      recycleBinProperties.setVisible(true);
    }
    // Adding Functionality to OK in Recycle Bin Properties
    if (e.getSource() == recycleBinPropertiesButton[0]) {
      recycleBinProperties.dispose();
    }
    // Adding Functionality to Cancel in Recycle Bin Properties
    else if (e.getSource() == recycleBinPropertiesButton[1]) {
      recycleBinProperties.dispose();
    }
    // Adding Functionality to Open in The Internet Popup Menu
    else if (e.getSource() == menuItem[49]) {
      theInternetOpen.setVisible(true);
    }
    // Adding Functionality to Delete in The Internet Popup Menu
    else if (e.getSource() == menuItem[51]) {
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseDeleteTheInternet = JOptionPane.showConfirmDialog(null,
        "'The Internet cannot be stored in the Recycle Bin.\n\n" +
        "Are you sure you want to delete 'The Internet' from your desktop?",
        "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, confirmDelete);
      if (responseDeleteTheInternet == JOptionPane.YES_OPTION) {
        desktop.remove(theInternet);
        desktop.remove(theInternetSelected);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    }
    // Adding Functionality to Properties in The Internet Popup Menu
    else if (e.getSource() == menuItem[53]) {
      internetProperties.setVisible(true);
    }
    // Adding Functionality to Open in Set Up The Microsoft Network Popup Menu
    else if (e.getSource() == menuItem[54]) {
      MSN_Open.setVisible(true);
    }
    // Adding Functionality to Delete in Set Up The Microsoft Network Popup Menu
    else if (e.getSource() == menuItem[59]) {
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseDeleteMSN = JOptionPane.showConfirmDialog(null,
        "Are you sure you want to send 'Set up The Microsoft Network' to the\n" + "Recycle Bin?",
        "Confirm File Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, confirmFileDelete);
      if (responseDeleteMSN == JOptionPane.YES_OPTION) {
        desktop.remove(MSN);
        desktop.remove(MSN_Selected);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    }
    // Adding Functionality to Properties in Set Up The Microsoft Network Popup Menu
    else if (e.getSource() == menuItem[61]) {
      MSN_Properties.setVisible(true);
    }
    // Adding Functionality to My Computer Close Window
    else if (e.getSource() == myComputerMenuItem[4]) {
      myComputerOpen.dispose();
      myComputerUnselectMethod();
    }
    // Adding Functionality to My Computer Status Bar
    if (myComputerCheckBoxMenuItem[1].isSelected() == true) {
      myComputerOpen.add(myComputerStatusBar, BorderLayout.SOUTH);
      myComputerOpen.revalidate();
      myComputerOpen.repaint();
    } else if (myComputerCheckBoxMenuItem[1].isSelected() == false) {
      myComputerOpen.remove(myComputerStatusBar);
      myComputerOpen.revalidate();
      myComputerOpen.repaint();
    }
    // Adding Functionality to My Computer Help Topics
    if (e.getSource() == myComputerMenuItem[24]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to My Computer About Windows 95
    else if (e.getSource() == myComputerMenuItem[25]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to Play Dos Game (C:) Close Window
    else if (e.getSource() == playDosGameC_MenuItem[10]) {
      playDosGameC_Open.dispose();
    }
    // Adding Functionality to Play Dos Game (C:) Status Bar
    if (playDosGameC_CheckBoxMenuItem[1].isSelected() == true) {
      playDosGameC_Open.add(playDosGameC_StatusBar, BorderLayout.SOUTH);
      playDosGameC_Open.revalidate();
      playDosGameC_Open.repaint();
    } else if (playDosGameC_CheckBoxMenuItem[1].isSelected() == false) {
      playDosGameC_Open.remove(playDosGameC_StatusBar);
      playDosGameC_Open.revalidate();
      playDosGameC_Open.repaint();
    }
    // Adding Functionality to Play Dos Game (C:) Help Topics
    if (e.getSource() == playDosGameC_MenuItem[30]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to Play Dos Game (C:) About Windows 95
    else if (e.getSource() == playDosGameC_MenuItem[31]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to Control Panel Close Window
    else if (e.getSource() == controlPanelMenuItem[4]) {
      controlPanelOpen.dispose();
      controlPanelOpenUnselectMethod();
    }
    // Adding Functionality to Control Panel Status Bar
    if (controlPanelCheckBoxMenuItem[1].isSelected() == true) {
      controlPanelOpen.add(controlPanelStatusBar, BorderLayout.SOUTH);
      controlPanelOpen.revalidate();
      controlPanelOpen.repaint();
    } else if (controlPanelCheckBoxMenuItem[1].isSelected() == false) {
      controlPanelOpen.remove(controlPanelStatusBar);
      controlPanelOpen.revalidate();
      controlPanelOpen.repaint();
    }
    // Adding Functionality to Control Panel Help Topics
    if (e.getSource() == controlPanelMenuItem[24]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to Control Panel About Windows 95
    else if (e.getSource() == controlPanelMenuItem[25]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to Printers Close Window
    else if (e.getSource() == printersMenuItem[4]) {
      printersOpen.dispose();
    }
    // Adding Functionality to Printers Status Bar
    if (printersCheckBoxMenuItem[1].isSelected() == true) {
      printersOpen.add(printersStatusBar, BorderLayout.SOUTH);
      printersOpen.revalidate();
      printersOpen.repaint();
    } else if (printersCheckBoxMenuItem[1].isSelected() == false) {
      printersOpen.remove(printersStatusBar);
      printersOpen.revalidate();
      printersOpen.repaint();
    }
    // Adding Functionality to Printers Help Topics
    if (e.getSource() == printersMenuItem[24]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to Printers About Windows 95
    else if (e.getSource() == printersMenuItem[25]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to My Computer About Windows 95
    else if (e.getSource() == recycleBinMenuItem[27]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to Find... in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[2]) {

    }
    // Adding Functionality to Copy Disk... in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[3]) {

    }
    // Adding Functionality to Format in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[4]) {

    }
    // Adding Functionality to Create Shortcut in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[5]) {
      myComputerOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseRemovableA_Shortcut = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseRemovableA_Shortcut == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
      } else {
        myComputerOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Properties in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[6]) {

    }
    // Adding Functionality to Open in Play Dos Game (C:) Popup Menu
    else if (e.getSource() == playDosGameC_PopupMenuItem[0]) {
      playDosGameC_Open.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Play Dos Game (C:) Popup Menu
    else if (e.getSource() == playDosGameC_PopupMenuItem[4]) {
      myComputerOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responsePlayDosGameC_Shortcut = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responsePlayDosGameC_Shortcut == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
      } else {
        myComputerOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Control Panel Popup Menu
    else if (e.getSource() == controlPanelPopupMenuItem[0]) {
      myComputerOpen.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      try {
        Thread.sleep(500);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      myComputerOpen.getContentPane().setCursor(Cursor.getDefaultCursor());
      controlPanelOpen.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Control Panel Popup Menu
    else if (e.getSource() == controlPanelPopupMenuItem[2]) {
      myComputerOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseControlPanelShortcut = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseControlPanelShortcut == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
      } else {
        myComputerOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Printers Popup Menu
    else if (e.getSource() == printersPopupMenuItem[0]) {
      myComputerPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      try {
        Thread.sleep(200);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      printersOpen.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Printers Popup Menu
    else if (e.getSource() == printersPopupMenuItem[2]) {
      myComputerOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responsePrintersShortcut = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responsePrintersShortcut == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
      } else {
        myComputerOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Cancel Button in Inbox
    else if (e.getSource() == inboxCancel) {
      inboxOpen.dispose();
    }
    // Adding Functionality to OK in Inbox Properties
    else if (e.getSource() == inboxPropertiesButton[0]) {
      inboxProperties.dispose();
    }
    // Adding Functionality to Cancel in Inbox Properties
    else if (e.getSource() == inboxPropertiesButton[1]) {
      inboxProperties.dispose();
    }
    // Adding Functionality to Cancel Button in Copying Files... in Inbox
    else if (e.getSource() == copyingFilesButton[1]) {
      copyingFiles.dispose();
      copyingFiles2.dispose();
      theMicrosoftNetwork.setEnabled(true);
      MicrosoftMail.setEnabled(true);
      MicrosoftFax.setEnabled(true);
      inboxOK.setEnabled(true);
      inboxCancel.setEnabled(true);
    }
    // Adding Functionlity to OK Button in Inbox for Not Enough Room Message
    else if (e.getSource() == inboxOK &&
      (theMicrosoftNetwork.isSelected() && MicrosoftMail.isSelected() && MicrosoftFax.isSelected()) ||
      (e.getSource() == inboxOK && theMicrosoftNetwork.isSelected() && MicrosoftFax.isSelected())) {
      inboxOpen.setAlwaysOnTop(false);
      theMicrosoftNetwork.setEnabled(false);
      MicrosoftMail.setEnabled(false);
      MicrosoftFax.setEnabled(false);
      inboxOK.setEnabled(false);
      inboxCancel.setEnabled(false);
      int responseNotEnoughRoom = JOptionPane.showOptionDialog(null,
        "There is not enough room on your hard disk to install Exchange.", "Microsoft Exchange",
        JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
      if (responseNotEnoughRoom == 0) {
        inboxOpen.setAlwaysOnTop(true);
        theMicrosoftNetwork.setEnabled(true);
        MicrosoftMail.setEnabled(true);
        MicrosoftFax.setEnabled(true);
        inboxOK.setEnabled(true);
        inboxCancel.setEnabled(true);
      } else {
        inboxOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionlity to OK Button in Inbox for Copying Files... Dialog Box and
    // Insert Disk Message
    else if ((e.getSource() == inboxOK && theMicrosoftNetwork.isSelected()) ||
      (e.getSource() == inboxOK && MicrosoftMail.isSelected()) ||
      (e.getSource() == inboxOK && MicrosoftFax.isSelected()) ||
      (e.getSource() == inboxOK && theMicrosoftNetwork.isSelected() && MicrosoftMail.isSelected()) ||
      (e.getSource() == inboxOK && MicrosoftMail.isSelected() && MicrosoftFax.isSelected())) {
      inboxOpen.setAlwaysOnTop(false);
      theMicrosoftNetwork.setEnabled(false);
      MicrosoftMail.setEnabled(false);
      MicrosoftFax.setEnabled(false);
      inboxOK.setEnabled(false);
      inboxCancel.setEnabled(false);
      try {
        Thread.sleep(1000);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      copyingFiles.setVisible(true);
      responseInsertDisk = JOptionPane.showOptionDialog(null,
        "Please insert the disk labeled 'Windows 95 CD-ROM', and then click OK.", "Insert Disk",
        JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseInsertDisk == 0) {
        inboxOpen.setAlwaysOnTop(true);
        copyingFiles2.setVisible(true);
      } else {
        inboxOpen.setAlwaysOnTop(true);
      }
    }
    // Enabling OK Button in Inbox When One or More Checkboxes are Selected
    else if (theMicrosoftNetwork.isSelected() || MicrosoftMail.isSelected() || MicrosoftFax.isSelected()) {
      inboxOK.setEnabled(true);
    }
    // Disabling OK Button in Inbox When No Checkbox is Selected
    else if (!theMicrosoftNetwork.isSelected() && !MicrosoftMail.isSelected() && !MicrosoftFax.isSelected()) {
      inboxOK.setEnabled(false);
    }
    // Adding Functionality to Recycle Bin Close Window
    if (e.getSource() == recycleBinMenuItem[5]) {
      recycleBinOpen.dispose();
    }
    // Adding Functionality to Recycle Bin Status Bar
    if (recycleBinCheckBoxMenuItem[1].isSelected() == true) {
      recycleBinOpen.add(recycleBinStatusBar, BorderLayout.SOUTH);
      recycleBinOpen.revalidate();
      recycleBinOpen.repaint();
    } else if (recycleBinCheckBoxMenuItem[1].isSelected() == false) {
      recycleBinOpen.remove(recycleBinStatusBar);
      recycleBinOpen.revalidate();
      recycleBinOpen.repaint();
    }
    // Adding Functionality to OK in Internet Properties
    if (e.getSource() == internetPropertiesButton[0]) {
      internetProperties.dispose();
    }
    // Adding Functionality to Cancel in Internet Properties
    if (e.getSource() == internetPropertiesButton[1]) {
      internetProperties.dispose();
    }
    // Adding Functionality to Back in Internet Setup Wizard
    if (e.getSource() == theInternetBack && youNeedAModem.getParent() != null) {
      theInternetBack.setEnabled(false);
      theInternetOpen.remove(youNeedAModem);
      theInternetOpen.add(welcomeToInternetSetup);
      theInternetOpen.add(theInternetHelp);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next in Internet Setup Wizard at "Welcome to Internet
    // Setup!"
    else if (e.getSource() == theInternetNext && welcomeToInternetSetup.getParent() != null) {
      theInternetBack.setEnabled(true);
      theInternetOpen.remove(welcomeToInternetSetup);
      theInternetOpen.remove(theInternetHelp);
      theInternetOpen.add(youNeedAModem);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next in Internet Setup Wizard at "You Need a Modem!"
    else if (e.getSource() == theInternetNext && youNeedAModem.getParent() != null) {
      theInternetOpen.dispose();
      try {
        Thread.sleep(1000);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      /// Setting up Install New Modem
      theInternetBack.setEnabled(false);
      theInternetOpen.remove(internetSetupImage);
      theInternetOpen.remove(youNeedAModem);
      theInternetOpen.add(detectYourModem);
      theInternetOpen.add(dontDetectMyModem);
      theInternetOpen.add(installNewModemImage);
      theInternetOpen.add(theInternetBack);
      theInternetOpen.add(theInternetNext);
      theInternetOpen.add(theInternetCancel);
      theInternetOpen.add(installNewModemSeparator);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      theInternetOpen.setTitle("Install New Modem");
      theInternetOpen.setVisible(true);
    }
    // Adding Functionality to Next in Install New Modem at "Windows will now try to
    // detect your modem..."
    else if (e.getSource() == theInternetBack && detectYourModem.getParent() != null) {
      dontDetectMyModem.setSelected(false);
      theInternetOpen.remove(lookingForAModem);
      theInternetOpen.remove(clickTheManufacturer);
      theInternetOpen.remove(modemManufacturersScrollPane);
      theInternetOpen.remove(modemModelsScrollPane);
      theInternetOpen.remove(installNewModemHaveDisk);
      theInternetOpen.remove(installNewModemImage);
      theInternetOpen.remove(standard300bpsModem);
      theInternetOpen.remove(modemPortsScrollPane);
      theInternetOpen.add(installNewModemImage);
      theInternetOpen.add(detectYourModem);
      theInternetOpen.add(dontDetectMyModem);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Back in Install New Modem at "Click the
    // manufacturer..."
    else if (e.getSource() == theInternetBack && clickTheManufacturer.getParent() != null) {
      theInternetBack.setEnabled(false);
      theInternetOpen.remove(clickTheManufacturer);
      theInternetOpen.remove(modemManufacturersScrollPane);
      theInternetOpen.remove(modemModelsScrollPane);
      theInternetOpen.remove(installNewModemHaveDisk);
      theInternetOpen.add(installNewModemImage);
      theInternetOpen.add(detectYourModem);
      theInternetOpen.add(dontDetectMyModem);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Back in Install New Modem at "You have selected the
    // following modem:"
    else if (e.getSource() == theInternetBack && modemPortsScrollPane.getParent() != null) {
      theInternetNext.setEnabled(true);
      modemPortsList.clearSelection();
      theInternetOpen.remove(installNewModemImage);
      theInternetOpen.remove(standard300bpsModem);
      theInternetOpen.remove(modemPortsScrollPane);
      theInternetOpen.add(clickTheManufacturer);
      theInternetOpen.add(modemManufacturersScrollPane);
      theInternetOpen.add(modemModelsScrollPane);
      theInternetOpen.add(installNewModemHaveDisk);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next in Install New Modem When "Don't detect my
    // modem" Is Not Selected
    else if (e.getSource() == theInternetNext && detectYourModem.getParent() != null &&
      !dontDetectMyModem.isSelected()) {
      theInternetNext.setEnabled(false);
      theInternetOpen.remove(detectYourModem);
      theInternetOpen.remove(dontDetectMyModem);
      theInternetOpen.add(lookingForAModem);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next in Install New Modem When "Don't detect my
    // modem" Is Selected
    else if (e.getSource() == theInternetNext && detectYourModem.getParent() != null &&
      dontDetectMyModem.isSelected()) {
      theInternetBack.setEnabled(true);
      theInternetOpen.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      try {
        Thread.sleep(500);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetOpen.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      theInternetOpen.remove(installNewModemImage);
      theInternetOpen.remove(detectYourModem);
      theInternetOpen.remove(dontDetectMyModem);
      theInternetOpen.add(clickTheManufacturer);
      theInternetOpen.add(modemManufacturersScrollPane);
      theInternetOpen.add(modemModelsScrollPane);
      theInternetOpen.add(installNewModemHaveDisk);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next in Install New Modem at "Click the
    // manufacturer..."
    else if (e.getSource() == theInternetNext && clickTheManufacturer.getParent() != null) {
      theInternetNext.setEnabled(false);
      theInternetOpen.remove(clickTheManufacturer);
      theInternetOpen.remove(modemManufacturersScrollPane);
      theInternetOpen.remove(modemModelsScrollPane);
      theInternetOpen.remove(installNewModemHaveDisk);
      theInternetOpen.add(installNewModemImage);
      theInternetOpen.add(standard300bpsModem);
      theInternetOpen.add(modemPortsScrollPane);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next in Install New Modem at "You have selected the
    // following modem:"
    else if (e.getSource() == theInternetNext && modemPortsScrollPane.getParent() != null) {
      theInternetBack.setEnabled(false);
      theInternetNext.setEnabled(false);
      theInternetCancel.setEnabled(false);
      theInternetOpen.remove(standard300bpsModem);
      theInternetOpen.remove(modemPortsScrollPane);
      theInternetOpen.add(pleaseWaitInstallYourModem);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      theInternetOpen.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      try {
        Thread.sleep(2000);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetOpen.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      theInternetNext.setEnabled(true);
      theInternetOpen.remove(installNewModemImage);
      theInternetOpen.remove(pleaseWaitInstallYourModem);
      theInternetOpen.add(locationInformationImage);
      theInternetOpen.add(locationInformationCountry);
      theInternetOpen.add(locationInformationCountrySelect);
      theInternetOpen.add(locationInformationAreaCode);
      theInternetOpen.add(locationInformationAreaCodeTextField);
      theInternetOpen.add(locationInformationAccessNumber);
      theInternetOpen.add(locationInformationAccessNumberTextField);
      theInternetOpen.add(locationInformationPhoneSystem);
      theInternetOpen.add(toneDialing);
      theInternetOpen.add(pulseDialing);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      theInternetOpen.setTitle("Location Information");
      /*
       * } );
       */
    }
    // Adding Functionality to Next in Location Information When
    // locationInformationAreaCodeTextField is empty
    else if (e.getSource() == theInternetNext && theInternetOpen.getTitle() == "Location Information" &&
      locationInformationAreaCodeTextField.equals("")) {
      JOptionPane.showOptionDialog(null,
        "Locations in the selected country must specify an area (city) code.\n" + "Please enter one.",
        "Required Entry Not Made", JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
    }
    // Adding Functionality to Next in Location Information When
    // locationInformationAreaCodeTextField is Not empty
    else if (e.getSource() == theInternetNext && theInternetOpen.getTitle() == "Location Information" &&
      locationInformationAreaCodeTextField.getText() != "") {
      theInternetNext.setText("Finish");
      theInternetOpen.remove(locationInformationImage);
      theInternetOpen.remove(locationInformationCountry);
      theInternetOpen.remove(locationInformationCountrySelect);
      theInternetOpen.remove(locationInformationAreaCode);
      theInternetOpen.remove(locationInformationAreaCodeTextField);
      theInternetOpen.remove(locationInformationAccessNumber);
      theInternetOpen.remove(locationInformationAccessNumberTextField);
      theInternetOpen.remove(locationInformationPhoneSystem);
      theInternetOpen.remove(toneDialing);
      theInternetOpen.remove(pulseDialing);
      theInternetOpen.add(installNewModemImage);
      theInternetOpen.add(yourModemSuccess);
      theInternetOpen.setTitle("Install New Modem");
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Cancel in Install New Modem
    else if (e.getSource() == theInternetCancel && theInternetOpen.getTitle() == "Install New Modem") {
      theInternetOpen.dispose();
      dontDetectMyModem.setSelected(false);
      theInternetBack.setEnabled(true);
      theInternetNext.setEnabled(true);
      theInternetOpen.remove(lookingForAModem);
      theInternetOpen.remove(installNewModemImage);
      theInternetOpen.remove(detectYourModem);
      theInternetOpen.remove(dontDetectMyModem);
      theInternetOpen.remove(clickTheManufacturer);
      theInternetOpen.remove(modemManufacturersScrollPane);
      theInternetOpen.remove(modemModelsScrollPane);
      theInternetOpen.remove(installNewModemHaveDisk);
      theInternetOpen.remove(standard300bpsModem);
      theInternetOpen.remove(modemPortsScrollPane);
      theInternetOpen.add(youNeedAModem);
      theInternetOpen.add(internetSetupImage);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      try {
        Thread.sleep(200);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetOpen.setTitle("Internet Setup Wizard");
      theInternetOpen.setVisible(true);
    }
    // Adding Functionality to Cancel in Internet Setup Wizard
    else if (e.getSource() == theInternetCancel && theInternetOpen.getTitle() == "Internet Setup Wizard") {
      theInternetOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseTheInternetCancel = JOptionPane.showConfirmDialog(null,
        "Are you sure you want to exit the Internet Setup Wizard?", "Internet Setup Wizard",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, questionMark);
      if (responseTheInternetCancel == JOptionPane.YES_OPTION) {
        theInternetOpen.setAlwaysOnTop(true);
        theInternetBack.setEnabled(false);
        theInternetNext.setEnabled(true);
        theInternetOpen.dispose();
        theInternetOpen.remove(youNeedAModem);
        theInternetOpen.remove(installNewModemImage);
        theInternetOpen.remove(detectYourModem);
        theInternetOpen.remove(dontDetectMyModem);
        theInternetOpen.remove(clickTheManufacturer);
        theInternetOpen.remove(modemManufacturersScrollPane);
        theInternetOpen.remove(modemModelsScrollPane);
        theInternetOpen.remove(installNewModemHaveDisk);
        theInternetOpen.remove(standard300bpsModem);
        theInternetOpen.remove(modemPortsScrollPane);
        theInternetOpen.remove(yourModemSuccess);
        theInternetOpen.add(welcomeToInternetSetup);
        theInternetOpen.add(theInternetHelp);
        theInternetOpen.revalidate();
        theInternetOpen.repaint();
      } else {
        theInternetOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Finish in Install New Modem
    else if (e.getSource() == theInternetNext && theInternetNext.getText() == "Finish") {
      theInternetOpen.dispose();
      try {
        Thread.sleep(200);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetBack.setEnabled(true);
      theInternetCancel.setEnabled(true);
      theInternetNext.setText("Next >");
      theInternetOpen.remove(theInternetCancel);
      theInternetOpen.remove(welcomeToInternetSetupAfterSuccess);
      theInternetOpen.remove(installNewModemImage);
      theInternetOpen.remove(yourModemSuccess);
      theInternetOpen.add(internetSetupImage);
      theInternetOpen.add(theInternetCancelAfterSuccess);
      theInternetOpen.add(howToConnect);
      theInternetOpen.add(howToConnect1);
      theInternetOpen.add(howToConnect2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      theInternetOpen.setVisible(true);
    }
    // Adding Functionality to Back at "How to Connect"
    else if (e.getSource() == theInternetBack && howToConnect.getParent() != null) {
      theInternetBack.setEnabled(false);
      theInternetOpen.remove(howToConnect);
      theInternetOpen.remove(howToConnect1);
      theInternetOpen.remove(howToConnect2);
      theInternetOpen.add(welcomeToInternetSetupAfterSuccess);
      theInternetOpen.add(theInternetHelp);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Back at Installing Files
    else if (e.getSource() == theInternetBack && installingFiles.getParent() != null) {
      theInternetOpen.remove(installingFiles);
      theInternetOpen.add(howToConnect);
      theInternetOpen.add(howToConnect1);
      theInternetOpen.add(howToConnect2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Back at Installing Files...
    else if (e.getSource() == theInternetBack && installingFiles_.getParent() != null) {
      theInternetOpen.remove(installingFiles_);
      theInternetOpen.add(howToConnect);
      theInternetOpen.add(howToConnect1);
      theInternetOpen.add(howToConnect2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Back at Internet Mail
    else if (e.getSource() == theInternetBack && internetMail.getParent() != null) {
      theInternetOpen.remove(internetMail);
      theInternetOpen.remove(internetMail1);
      theInternetOpen.remove(internetMail2);
      theInternetOpen.remove(internetMailNote);
      theInternetOpen.add(howToConnect);
      theInternetOpen.add(howToConnect1);
      theInternetOpen.add(howToConnect2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Back at Internet Mail Installing Files
    else if (e.getSource() == theInternetBack && (internetMailInstallingFiles1.getParent() != null ||
        internetMailInstallingFiles2.getParent() != null)) {
      theInternetOpen.remove(internetMailInstallingFiles1);
      theInternetOpen.remove(internetMailInstallingFiles2);
      theInternetOpen.add(internetMail);
      theInternetOpen.add(internetMail1);
      theInternetOpen.add(internetMail2);
      theInternetOpen.add(internetMailNote);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next at "Welcome to Internet Setup!" After "Your
    // modem has been set up successfully."
    else if (e.getSource() == theInternetNext && welcomeToInternetSetupAfterSuccess.getParent() != null) {
      theInternetBack.setEnabled(true);
      theInternetOpen.remove(theInternetCancel);
      theInternetOpen.remove(welcomeToInternetSetupAfterSuccess);
      theInternetOpen.remove(theInternetHelp);
      theInternetOpen.add(theInternetCancelAfterSuccess);
      theInternetOpen.add(howToConnect);
      theInternetOpen.add(howToConnect1);
      theInternetOpen.add(howToConnect2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next at "How to Connect" When "Use The Microsoft
    // Network" is Selected
    else if (e.getSource() == theInternetNext && howToConnect.getParent() != null && howToConnect1.isSelected()) {
      theInternetOpen.remove(howToConnect);
      theInternetOpen.remove(howToConnect1);
      theInternetOpen.remove(howToConnect2);
      theInternetOpen.add(installingFiles);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next at "How to Connect" When "I already have an
    // account with a different service provider" is Selected
    else if (e.getSource() == theInternetNext && howToConnect.getParent() != null && howToConnect2.isSelected()) {
      theInternetOpen.remove(howToConnect);
      theInternetOpen.remove(howToConnect1);
      theInternetOpen.remove(howToConnect2);
      theInternetOpen.add(internetMail);
      theInternetOpen.add(internetMail1);
      theInternetOpen.add(internetMail2);
      theInternetOpen.add(internetMailNote);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next at "Click Next when you are ready to proceed."
    // "Use The Microsoft Network" is Selected
    else if (e.getSource() == theInternetNext && installingFiles.getParent() != null) {
      theInternetOpen.setAlwaysOnTop(false);
      theInternetBack.setEnabled(false);
      theInternetNext.setEnabled(false);
      theInternetCancel.setEnabled(false);
      theInternetOpen.remove(installingFiles);
      theInternetOpen.add(installingFiles_);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      try {
        Thread.sleep(1500);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetOpen.setAlwaysOnTop(false);
      responseInsertDisk = JOptionPane.showOptionDialog(null,
        "Please insert the disk labeled 'Windows 95 CD-ROM', and then click OK.", "Insert Disk",
        JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseInsertDisk == 0) {
        theInternetOpen.setAlwaysOnTop(true);
        theInternetCopyingFiles2.setVisible(true);
        theInternetCopyingFilesButton[1].addMouseListener(new MouseAdapter() {
          public void mouseClicked(MouseEvent e) {
            theInternetCopyingFiles2.dispose();
            theInternetOpen.setAlwaysOnTop(false);
            theInternetBack.setEnabled(true);
            theInternetNext.setEnabled(true);
            theInternetCancel.setEnabled(true);
            int responseUnableToInstall = JOptionPane.showOptionDialog(null,
              "Unable to install Windows 95 files on your computer. The following\n" +
              "error occured:\n" + "The system cannot find the file specified.\n\n\n" +
              "You can try installing these files by clicking the Add/Remove\n" +
              "programs icon in Control Panel.",
              "Internet Setup Wizard", JOptionPane.ERROR_MESSAGE, 0, exclamationMark, OK, OK[0]);
            if (responseUnableToInstall == 0) {
              theInternetOpen.setAlwaysOnTop(true);
            } else {
              theInternetOpen.setAlwaysOnTop(true);
            }
          }
        });
      } else {
        theInternetOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Next at "Internet Mail" When "Yes (recommended)" is
    // Selected
    else if (e.getSource() == theInternetNext && internetMail.getParent() != null && internetMail1.isSelected()) {
      theInternetOpen.remove(internetMail);
      theInternetOpen.remove(internetMail1);
      theInternetOpen.remove(internetMail2);
      theInternetOpen.remove(internetMailNote);
      theInternetOpen.add(internetMailInstallingFiles1);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next at "Click Next when you are ready to proceed."
    // After "Yes (recommended)" is Selected
    else if (e.getSource() == theInternetNext && internetMailInstallingFiles1.getParent() != null) {
      theInternetOpen.setAlwaysOnTop(false);
      theInternetBack.setEnabled(false);
      theInternetNext.setEnabled(false);
      theInternetCancel.setEnabled(false);
      theInternetOpen.remove(internetMailInstallingFiles1);
      theInternetOpen.add(internetMailInstallingFiles_1);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      try {
        Thread.sleep(1500);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetCopyingFiles.setVisible(true);
      responseInsertDisk = JOptionPane.showOptionDialog(null,
        "Please insert the disk labeled 'Windows 95 CD-ROM', and then click OK.", "Insert Disk",
        JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseInsertDisk == 0) {
        theInternetCopyingFiles2.setVisible(true);
        theInternetCopyingFilesButton[1].addMouseListener(new MouseAdapter() {
          public void mousePressed(MouseEvent e) {
            theInternetCopyingFiles2.dispose();
            theInternetBack.setEnabled(true);
            theInternetNext.setEnabled(true);
            theInternetCancel.setEnabled(true);
            int responseUnableToInstall = JOptionPane.showOptionDialog(null,
              "Unable to install Windows 95 files on your computer. The following\n" +
              "error occured:\n" + "User interrupted Operation\n\n" +
              "You can try installing these files by clicking the Add/Remove\n" +
              "programs icon in Control Panel.",
              "Internet Setup Wizard", JOptionPane.ERROR_MESSAGE, 0, exclamationMark, OK, OK[0]);
            if (responseUnableToInstall == 0) {
              theInternetOpen.setAlwaysOnTop(true);
              theInternetCopyingFiles.dispose();
              theInternetOpen.remove(internetMailInstallingFiles_1);
              theInternetOpen.add(internetMailInstallingFiles1);
              theInternetOpen.revalidate();
              theInternetOpen.repaint();
            } else {
              theInternetOpen.setAlwaysOnTop(true);
              theInternetCopyingFiles.dispose();
            }
          }
        });
      }
    }
    // Adding Functionality to Next at "Click Next when you are ready to proceed."
    // After "No" is Selected
    else if (e.getSource() == theInternetNext && internetMailInstallingFiles2.getParent() != null) {
      theInternetOpen.setAlwaysOnTop(false);
      theInternetBack.setEnabled(false);
      theInternetNext.setEnabled(false);
      theInternetCancel.setEnabled(false);
      theInternetOpen.remove(internetMailInstallingFiles2);
      theInternetOpen.add(internetMailInstallingFiles_2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      try {
        Thread.sleep(1500);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetCopyingFiles.setVisible(true);
      responseInsertDisk = JOptionPane.showOptionDialog(null,
        "Please insert the disk labeled 'Windows 95 CD-ROM', and then click OK.", "Insert Disk",
        JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseInsertDisk == 0) {
        theInternetCopyingFiles2.setVisible(true);
        theInternetCopyingFilesButton[1].addMouseListener(new MouseAdapter() {
          public void mouseReleased(MouseEvent e) {
            theInternetCopyingFiles2.dispose();
            theInternetBack.setEnabled(true);
            theInternetNext.setEnabled(true);
            theInternetCancel.setEnabled(true);
            int responseUnableToInstall = JOptionPane.showOptionDialog(null,
              "Unable to install Windows 95 files on your computer. The following\n" +
              "error occured:\n" + "User interrupted Operation\n\n" +
              "You can try installing these files by clicking the Add/Remove\n" +
              "programs icon in Control Panel.",
              "Internet Setup Wizard", JOptionPane.ERROR_MESSAGE, 0, exclamationMark, OK, OK[0]);
            if (responseUnableToInstall == 0) {
              theInternetOpen.setAlwaysOnTop(true);
              theInternetCopyingFiles.dispose();
              theInternetOpen.remove(internetMailInstallingFiles_2);
              theInternetOpen.add(internetMailInstallingFiles2);
              theInternetOpen.revalidate();
              theInternetOpen.repaint();
            } else {
              theInternetOpen.setAlwaysOnTop(true);
              theInternetCopyingFiles.dispose();
            }
          }
        });
      }
    }
    // Adding Functionality to Next at "Internet Mail" When "No" is Selected
    else if (e.getSource() == theInternetNext && internetMail.getParent() != null && internetMail2.isSelected()) {
      theInternetOpen.remove(internetMail);
      theInternetOpen.remove(internetMail1);
      theInternetOpen.remove(internetMail2);
      theInternetOpen.remove(internetMailNote);
      theInternetOpen.add(internetMailInstallingFiles2);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
    }
    // Adding Functionality to Next at "Installing Files..." in Install New Modem
    else if (e.getSource() == theInternetNext && installingFiles_.getParent() != null) {
      theInternetBack.setEnabled(false);
      theInternetNext.setEnabled(false);
      theInternetCancel.setEnabled(false);
      theInternetOpen.remove(internetMailInstallingFiles1);
      theInternetOpen.add(internetMailInstallingFiles_1);
      theInternetOpen.revalidate();
      theInternetOpen.repaint();
      try {
        Thread.sleep(1500);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      theInternetCopyingFiles.setVisible(true);
      responseInsertDisk = JOptionPane.showOptionDialog(null,
        "Please insert the disk labeled 'Windows 95 CD-ROM', and then click OK.", "Insert Disk",
        JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseInsertDisk == 0) {
        theInternetCopyingFiles2.setVisible(true);
        theInternetCopyingFilesButton[1].addMouseListener(new MouseAdapter() {
          public void mousePressed(MouseEvent e) {
            theInternetCopyingFiles2.dispose();
            theInternetBack.setEnabled(true);
            theInternetNext.setEnabled(true);
            theInternetCancel.setEnabled(true);
            int responseUnableToInstall = JOptionPane.showOptionDialog(null,
              "Unable to install Windows 95 files on your computer. The following\n" +
              "error occured:\n" + "User interrupted Operation\n\n" +
              "You can try installing these files by clicking the Add/Remove\n" +
              "programs icon in Control Panel.",
              "Internet Setup Wizard", JOptionPane.ERROR_MESSAGE, 0, exclamationMark, OK, OK[0]);
            if (responseUnableToInstall == 0) {
              theInternetOpen.remove(internetMailInstallingFiles_1);
              theInternetOpen.add(internetMailInstallingFiles1);
              theInternetOpen.revalidate();
              theInternetOpen.repaint();
            }
          }
        });
      }
    }
    // Adding Functionality to Cancel After "Your modem has been set up
    // successfully."
    else if (e.getSource() == theInternetCancelAfterSuccess) {
      theInternetOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseTheInternetCancelSuccess = JOptionPane.showConfirmDialog(null,
        "Are you sure you want to exit the Internet Setup Wizard?", "Internet Setup Wizard",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, questionMark);
      if (responseTheInternetCancelSuccess == JOptionPane.YES_OPTION) {
        theInternetOpen.setAlwaysOnTop(true);
        theInternetOpen.dispose();
        theInternetCopyingFiles.dispose();
        theInternetCopyingFiles2.dispose();
        theInternetOpen.remove(howToConnect);
        theInternetOpen.remove(howToConnect1);
        theInternetOpen.remove(howToConnect2);
        theInternetOpen.remove(installingFiles);
        theInternetOpen.remove(installingFiles_);
        theInternetOpen.remove(internetMail);
        theInternetOpen.remove(internetMail1);
        theInternetOpen.remove(internetMail2);
        theInternetOpen.remove(internetMailNote);
        theInternetOpen.remove(internetMailInstallingFiles1);
        theInternetOpen.remove(internetMailInstallingFiles2);
        theInternetOpen.remove(internetMailInstallingFiles_1);
        theInternetOpen.remove(internetMailInstallingFiles_2);
        theInternetOpen.add(welcomeToInternetSetupAfterSuccess);
        theInternetOpen.add(theInternetHelp);
        theInternetOpen.revalidate();
        theInternetOpen.repaint();
      } else {
        theInternetOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to OK in Set Up The Microsoft Network Properties
    else if (e.getSource() == MSN_PropertiesButton[0]) {
      MSN_Properties.dispose();
    }
    // Adding Functionality to Cancel in Set Up The Microsoft Network Properties
    else if (e.getSource() == MSN_PropertiesButton[1]) {
      MSN_Properties.dispose();
    }
    // Adding Functionality to Statistics in Game Menu in Free Cell
    if (e.getSource() == freeCellMenuItem[3]) {
      freeCellStatistics.setVisible(true);
    }
    // Adding Functionality to Options in Game Menu in Free Cell
    if (e.getSource() == freeCellMenuItem[4]) {
      freeCellOptions.setVisible(true);
    }
    // Adding Functionality to Exit in Game Menu in Free Cell
    if (e.getSource() == freeCellMenuItem[6]) {
      freeCellPanel.remove(freeCellPokerFaceLeft);
      freeCellPanel.add(freeCellPokerFaceRight);
      freeCellPanel.revalidate();
      freeCellPanel.repaint();
      freeCellOpen.dispose();
    }
    // Adding Functionality to OK in FreeCell Statistics
    if (e.getSource() == freeCellStatisticsButton[0]) {
      freeCellStatistics.dispose();
    }
    // Adding Functionality to Clear in FreeCell Statistics
    if (e.getSource() == freeCellStatisticsButton[1]) {
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseFreeCellStatisticsClear = JOptionPane.showConfirmDialog(null,
        "Are you sure you want to delete all statistics?", "FreeCell", JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE, questionMark);
      if (responseFreeCellStatisticsClear == JOptionPane.YES_OPTION) {
        freeCellStatistics.dispose();
      } else if (responseFreeCellStatisticsClear == JOptionPane.NO_OPTION) {

      }
    }
    // Adding Functionality to OK in FreeCell Statistics
    if (e.getSource() == freeCellOptionsButton[0]) {
      freeCellOptions.dispose();
    }
    // Adding Functionality to Cancel in FreeCell Statistics
    if (e.getSource() == freeCellOptionsButton[1]) {
      freeCellOptions.dispose();
    }
    // Adding Functionality to OK in Heart Welcome in Hearts
    if (e.getSource() == heartsWelcomeButton[0]) {
      heartsWelcome.dispose();
      heartsOpen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      for (int i = 0; i < 2; i++) {
        heartsMenu[i].setEnabled(true);
      }
    }
    // Adding Functionality to Cancel in Heart Welcome in Hearts
    if (e.getSource() == heartsWelcomeButton[1]) {
      heartsWelcome.dispose();
      heartsOpen.dispose();
    }
    // Adding Functionality to Options in Game Menu in Hearts
    if (e.getSource() == heartsMenuItem[1]) {
      heartsOptions.setVisible(true);
    }
    // Adding Functionality to Sound in Game Menu in Hearts
    if (e.getSource() == heartsCheckBoxMenuItem) {

    }
    // Adding Functionality to Score in Game Menu in Hearts
    if (e.getSource() == heartsMenuItem[2]) {
      heartsScoreSheet.setVisible(true);
    }
    // Adding Functionality to Exit in Game Menu in Hearts
    if (e.getSource() == heartsMenuItem[3]) {
      heartsOpen.dispose();
    }
    // Adding Functionality to Quote in Game Menu in Hearts
    if (e.getSource() == heartsMenuItem[5]) {
      heartsQuote.setVisible(true);
    }
    // Adding Functionality to About Hearts in Game Menu in Hearts
    if (e.getSource() == heartsMenuItem[6]) {
      heartsAbout.setVisible(true);
    }
    // Adding Functionality to Beginner in Game Menu in Minesweeper
    if (e.getSource() == minesweeperCheckBoxMenuItem[0]) {
      minesweeperCheckBoxMenuItem[0].setSelected(true);
      for (int i = 1; i < 4; i++) {
        minesweeperCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Intermediate in Game Menu in Minesweeper
    if (e.getSource() == minesweeperCheckBoxMenuItem[1]) {
      minesweeperCheckBoxMenuItem[1].setSelected(true);
      for (int i = 0; i < 4; i++) {
        if (i == 1) {
          continue;
        }
        minesweeperCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Expert in Game Menu in Minesweeper
    if (e.getSource() == minesweeperCheckBoxMenuItem[2]) {
      minesweeperCheckBoxMenuItem[2].setSelected(true);
      for (int i = 0; i < 4; i++) {
        if (i == 2) {
          continue;
        }
        minesweeperCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Custom... in Game Menu in Minesweeper
    if (e.getSource() == minesweeperCheckBoxMenuItem[3]) {
      minesweeperCheckBoxMenuItem[3].setSelected(true);
      for (int i = 0; i < 3; i++) {
        minesweeperCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Exit in Game Menu in Minesweeper
    if (e.getSource() == minesweeperMenuItem[2]) {
      minesweeperOpen.dispose();
    }
    // Adding Functionality to Exit in Game Menu in Solitaire
    if (e.getSource() == solitaireMenuItem[4]) {
      solitaireOpen.dispose();
    }
    // Adding Functionality to Exit in File Menu in Internet Explorer
    if (e.getSource() == internetExplorerMenuItem[6]) {
      internetExplorerOpen.dispose();
    }
    // Adding Functionality to Largest in Fonts Menu in View Menu in Internet
    // Explorer
    if (e.getSource() == internetExplorerCheckBoxMenuItem[3]) {
      internetExplorerCheckBoxMenuItem[3].setSelected(true);
      for (int i = 4; i < 8; i++) {
        internetExplorerCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Large in Fonts Menu in View Menu in Internet Explorer
    if (e.getSource() == internetExplorerCheckBoxMenuItem[4]) {
      internetExplorerCheckBoxMenuItem[4].setSelected(true);
      for (int i = 3; i < 8; i++) {
        if (i == 4) {
          continue;
        }
        internetExplorerCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Medium in Fonts Menu in View Menu in Internet
    // Explorer
    if (e.getSource() == internetExplorerCheckBoxMenuItem[5]) {
      internetExplorerCheckBoxMenuItem[5].setSelected(true);
      for (int i = 3; i < 8; i++) {
        if (i == 5) {
          continue;
        }
        internetExplorerCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Small in Fonts Menu in View Menu in Internet Explorer
    if (e.getSource() == internetExplorerCheckBoxMenuItem[6]) {
      internetExplorerCheckBoxMenuItem[6].setSelected(true);
      for (int i = 3; i < 8; i++) {
        if (i == 6) {
          continue;
        }
        internetExplorerCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Smallest in Fonts Menu in View Menu in Internet
    // Explorer
    if (e.getSource() == internetExplorerCheckBoxMenuItem[7]) {
      internetExplorerCheckBoxMenuItem[7].setSelected(true);
      for (int i = 3; i < 8; i++) {
        if (i == 7) {
          continue;
        }
        internetExplorerCheckBoxMenuItem[i].setSelected(false);
      }
    }
    // Adding Functionality to Exit in File Menu in Media Player
    if (e.getSource() == mediaPlayerMenuItem[2]) {
      mediaPlayerOpen.dispose();
    }
    // Adding Functionality to Exit in File Menu in Sound - Sound Recorder
    if (e.getSource() == soundRecorderMenuItem[6]) {
      soundRecorderOpen.dispose();
    }
    // Adding Functionality to Standard in ScanDisk - Playdosgame (C:)
    if (e.getSource() == scanDiskRadioButton[0]) {
      scanDiskButton[0].setEnabled(false);
    }
    // Adding Functionality to Thorough in ScanDisk - Playdosgame (C:)
    if (e.getSource() == scanDiskRadioButton[1]) {
      scanDiskButton[0].setEnabled(true);
    }
    // Adding Functionality to Close in ScanDisk - Playdosgame (C:)
    if (e.getSource() == scanDiskButton[2]) {
      scanDiskOpen.dispose();
    }
    // Adding Functionality to Scientific in View Menu in Calculator
    if (e.getSource() == calculatorCheckBoxMenuItem[0]) {
      calculatorCheckBoxMenuItem[1].setSelected(false);
      calculatorOpen.setSize(775, 516);
      if (calculatorStandardPanel.getParent() != null) {
        calculatorOpen.remove(calculatorStandardPanel);
        calculatorOpen.add(calculatorScientificPanel);
        calculatorOpen.revalidate();
        calculatorOpen.repaint();
      }
    }
    // Adding Functionality to Standard in View Menu in Calculator
    if (e.getSource() == calculatorCheckBoxMenuItem[1]) {
      calculatorCheckBoxMenuItem[0].setSelected(false);
      calculatorOpen.setSize(419, 407);
      if (calculatorScientificPanel.getParent() != null) {
        calculatorOpen.remove(calculatorScientificPanel);
        calculatorOpen.add(calculatorStandardPanel);
        calculatorOpen.revalidate();
        calculatorOpen.repaint();
      }
    }
    // Adding Functionality to 0~9 in Calculator When Open
    for (int i = 0; i < 10; i++) {
      if (e.getSource() == calculatorStandardButton[i] && calculatorStandardTextField.getText() != "0.") {
        calculatorStandardTextField.setText(calculatorStandardTextField.getText().concat(String.valueOf(i)));;
      }
    }
    // Adding Functionality to +/- in Calculator When Open
    if (e.getSource() == calculatorStandardButton[10]) {
      double temporaryStandardValue = Double.parseDouble(calculatorStandardTextField.getText());
      temporaryStandardValue *= -1;
      calculatorStandardTextField
        .setText((String.valueOf(calculatorDecimalFormat.format(temporaryStandardValue))));
    }
    // Adding Functionality to . in Calculator When Open
    if (e.getSource() == calculatorStandardButton[11]) {
      calculatorStandardTextField.setText(calculatorStandardTextField.getText().concat("."));
    }
    // Adding Functionality to MC in Calculator When Open
    if (e.getSource() == calculatorStandardButton[12]) {

    }
    // Adding Functionality to MR in Calculator When Open
    if (e.getSource() == calculatorStandardButton[13]) {

    }
    // Adding Functionality to MS in Calculator When Open
    if (e.getSource() == calculatorStandardButton[14]) {

    }
    // Adding Functionality to M+ in Calculator When Open
    if (e.getSource() == calculatorStandardButton[15]) {

    }
    // Adding Functionality to / in Calculator When Open
    if (e.getSource() == calculatorStandardButton[16]) {
      calculatorNumberA = Double.parseDouble(calculatorStandardTextField.getText());
      calculatorStandardOperator = '/';
      calculatorStandardTextField.setText("");
    }
    // Adding Functionality to * in Calculator When Open
    if (e.getSource() == calculatorStandardButton[17]) {
      calculatorNumberA = Double.parseDouble(calculatorStandardTextField.getText());
      calculatorStandardOperator = '*';
      calculatorStandardTextField.setText("");
    }
    // Adding Functionality to - in Calculator When Open
    if (e.getSource() == calculatorStandardButton[18]) {
      calculatorNumberA = Double.parseDouble(calculatorStandardTextField.getText());
      calculatorStandardOperator = '-';
      calculatorStandardTextField.setText("");
    }
    // Adding Functionality to + in Calculator When Open
    if (e.getSource() == calculatorStandardButton[19]) {
      calculatorNumberA = Double.parseDouble(calculatorStandardTextField.getText());
      calculatorStandardOperator = '+';
      calculatorStandardTextField.setText("");
    }
    // Adding Functionality to = in Calculator When Open
    if (e.getSource() == calculatorStandardButton[20]) {
      calculatorNumberB = Double.parseDouble(calculatorStandardTextField.getText());
      switch (calculatorStandardOperator) {
      case '+':
        calculatorStandardResult = calculatorNumberA + calculatorNumberB;
        break;
      case '-':
        calculatorStandardResult = calculatorNumberA - calculatorNumberB;
        break;
      case '*':
        calculatorStandardResult = calculatorNumberA * calculatorNumberB;
        break;
      case '/':
        calculatorStandardResult = calculatorNumberA / calculatorNumberB;
        break;
      }
      calculatorStandardTextField.setText(String.valueOf(calculatorStandardResult));
      calculatorNumberA = calculatorStandardResult;
    }
    // Adding Functionality to Back in Calculator When Open
    if (e.getSource() == calculatorStandardButton[21] && calculatorStandardTextField.getText() != "0.") {
      String calculatorStandardEntry = calculatorStandardTextField.getText();
      calculatorStandardTextField.setText("");
      for (int i = 0; i < calculatorStandardEntry.length() - 1; i++) {
        calculatorStandardTextField
          .setText(calculatorStandardTextField.getText() + calculatorStandardEntry.charAt(i));
      }
    }
    // Adding Functionality to CE in Calculator When Open
    if (e.getSource() == calculatorStandardButton[22]) {
      calculatorStandardTextField.setText("");
    }
    // Adding Functionality to C in Calculator When Open
    if (e.getSource() == calculatorStandardButton[23]) {
      calculatorStandardTextField.setText("");
    }
    // Adding Functionality to sqrt in Calculator When Open
    if (e.getSource() == calculatorStandardButton[24]) {
      calculatorNumberA = Double.parseDouble(calculatorStandardTextField.getText());
      calculatorStandardResult = Math.sqrt(calculatorNumberA);
      calculatorStandardTextField.setText(String.valueOf(calculatorStandardResult));
    }
    // Adding Functionality to % in Calculator When Open
    if (e.getSource() == calculatorStandardButton[25]) {

    }
    // Adding Functionality to 1/x in Calculator When Open
    if (e.getSource() == calculatorStandardButton[26]) {
      calculatorNumberA = Double.parseDouble(calculatorStandardTextField.getText());
      calculatorStandardResult = 1 / calculatorNumberA;
      calculatorStandardTextField.setText(String.valueOf(calculatorStandardResult));
    }
    // Adding Functionality to 0~9 in Scientific Calculator
    for (int i = 0; i < 10; i++) {
      if (e.getSource() == calculatorScientificButton[i]) {
        calculatorScientificTextField
          .setText(calculatorScientificTextField.getText().concat(String.valueOf(i)));
      }
    }
    // Adding Functionality to +/- in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[10]) {
      double temporaryScientificValue = Double.parseDouble(calculatorScientificTextField.getText());
      temporaryScientificValue *= -1;
      calculatorScientificTextField
        .setText(String.valueOf((calculatorDecimalFormat.format(temporaryScientificValue))));
    }
    // Adding Functionality to . in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[11]) {
      calculatorScientificTextField.setText(calculatorScientificTextField.getText().concat("."));
    }
    // Adding Functionality to MC in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[12]) {

    }
    // Adding Functionality to MR in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[13]) {

    }
    // Adding Functionality to MS in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[14]) {

    }
    // Adding Functionality to M+ in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[15]) {

    }
    // Adding Functionality to / in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[16]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificOperator = '/';
      calculatorScientificTextField.setText("");
    }
    // Adding Functionality to * in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[17]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificOperator = '*';
      calculatorScientificTextField.setText("");
    }
    // Adding Functionality to - in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[18]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificOperator = '-';
      calculatorScientificTextField.setText("");
    }
    // Adding Functionality to + in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[19]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificOperator = '+';
      calculatorScientificTextField.setText("");
    }
    // Adding Functionality to = in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[23]) {
      calculatorNumberD = Double.parseDouble(calculatorScientificTextField.getText());
      switch (calculatorScientificOperator) {
      case '+':
        calculatorScientificResult = calculatorNumberC + calculatorNumberD;
        break;
      case '-':
        calculatorScientificResult = calculatorNumberC - calculatorNumberD;
        break;
      case '*':
        calculatorScientificResult = calculatorNumberC * calculatorNumberD;
        break;
      case '/':
        calculatorScientificResult = calculatorNumberC / calculatorNumberD;
        break;
      }
      calculatorScientificTextField.setText(String.valueOf(calculatorScientificResult));
      calculatorNumberC = calculatorScientificResult;
    }
    // Adding Functionality to sin in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[30]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = Math.sin(calculatorNumberC);
      calculatorScientificTextField.setText(String.valueOf(calculatorScientificResult));
    }
    // Adding Functionality to cos in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[31]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = Math.cos(calculatorNumberC);
      calculatorScientificTextField.setText(String.valueOf(calculatorScientificResult));
    }
    // Adding Functionality to tan in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[32]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = Math.tan(calculatorNumberC);
      calculatorScientificTextField.setText(String.valueOf(calculatorScientificResult));
    }
    // Adding Functionality to x^y in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[35]) {

    }
    // Adding Functionality to x^3 in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[36]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = Math.pow(calculatorNumberC, 3);
      calculatorScientificTextField
        .setText(String.valueOf(calculatorDecimalFormat.format(calculatorScientificResult)));
    }
    // Adding Functionality to x^2 in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[37]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = Math.pow(calculatorNumberC, 2);
      calculatorScientificTextField
        .setText(String.valueOf(calculatorDecimalFormat.format(calculatorScientificResult)));
    }
    // Adding Functionality to ln in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[39]) {

    }
    // Adding Functionality to log in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[40]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = Math.log(calculatorNumberC);
      calculatorScientificTextField.setText(String.valueOf(calculatorScientificResult));
    }
    // Adding Functionality to 1/x in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[42]) {
      calculatorNumberC = Double.parseDouble(calculatorScientificTextField.getText());
      calculatorScientificResult = 1 / calculatorNumberC;
      calculatorScientificTextField.setText(String.valueOf(calculatorScientificResult));
    }
    // Adding Functionality to Back in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[43]) {
      String calculatorScientificEntry = calculatorScientificTextField.getText();
      calculatorScientificTextField.setText("");
      for (int i = 0; i < calculatorScientificEntry.length() - 1; i++) {
        calculatorScientificTextField
          .setText(calculatorScientificTextField.getText() + calculatorScientificEntry.charAt(i));
      }
    }
    // Adding Functionality to CE in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[44]) {
      calculatorScientificTextField.setText("");
    }
    // Adding Functionality to C in Scientific Calculator
    if (e.getSource() == calculatorScientificButton[45]) {
      calculatorScientificTextField.setText("");
    }
    // Adding Functionality to Hex in Scientific Calculator
    if (e.getSource() == calculatorRadioButton[0]) {
      calculatorRadioButton[4].setText("Dword");
      calculatorRadioButton[5].setText("Word");
      calculatorRadioButton[6].setText("Byte");
    }
    // Adding Functionality to Dec in Scientific Calculator
    if (e.getSource() == calculatorRadioButton[1]) {
      calculatorRadioButton[4].setText("Deg");
      calculatorRadioButton[5].setText("Rad");
      calculatorRadioButton[6].setText("Grad");
    }
    // Adding Functionality to Oct in Scientific Calculator
    if (e.getSource() == calculatorRadioButton[2]) {
      calculatorRadioButton[4].setText("Dword");
      calculatorRadioButton[5].setText("Word");
      calculatorRadioButton[6].setText("Byte");
    }
    // Adding Functionality to Bin in Scientific Calculator
    if (e.getSource() == calculatorRadioButton[3]) {
      calculatorRadioButton[4].setText("Dword");
      calculatorRadioButton[5].setText("Word");
      calculatorRadioButton[6].setText("Byte");
    }
    // Adding Functionality to Exit in Paint
    if (e.getSource() == paintMenuItem[10]) {
      paintOpen.dispose();
    }
    //Adding Functionality to Paint Toolkit Buttons
    ///Free-Form Select
    if (e.getSource() == paintToolkitButton[0]) {
      paintToolkitButton[0].setSelected(true);
      paintToolkitBoolean[0] = true;
      for (int i = 1; i < 16; i++) {
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Eraser/Color Eraser
    if (e.getSource() == paintToolkitButton[1]) {
      paintToolkitButton[1].setSelected(true);
      paintToolkitBoolean[1] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 1) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Pick Color
    if (e.getSource() == paintToolkitButton[2]) {
      paintToolkitButton[2].setSelected(true);
      paintToolkitBoolean[2] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 2) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Pencil
    if (e.getSource() == paintToolkitButton[3]) {
      paintToolkitButton[3].setSelected(true);
      paintToolkitBoolean[3] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 3) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[0] = false;
      }
    }
    ///Airbrush
    if (e.getSource() == paintToolkitButton[4]) {
      paintToolkitButton[4].setSelected(true);
      paintToolkitBoolean[4] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 4) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Line
    if (e.getSource() == paintToolkitButton[5]) {
      paintToolkitButton[5].setSelected(true);
      paintToolkitBoolean[5] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 5) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Rectangle
    if (e.getSource() == paintToolkitButton[6]) {

      paintToolkitButton[6].setSelected(true);
      paintToolkitBoolean[6] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 6) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    if (paintToolkitBoolean[6] == true) {
      paintCanvasPanel = new JPanel() {
        public void paintComponent(Graphics g) {
          this.addMouseMotionListener(new MouseMotionListener() {
            public void mouseDragged(MouseEvent e) {
              Graphics2D g2d = (Graphics2D) getGraphics();
              g2d.drawRect(e.getX(), e.getY(), e.getX(), e.getY());
              repaint();
            }
            public void mouseMoved(MouseEvent e) {

            }
          });

        }
      };
    }
    ///Ellipse
    if (e.getSource() == paintToolkitButton[7]) {
      paintToolkitButton[7].setSelected(true);
      paintToolkitBoolean[7] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 7) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Select
    if (e.getSource() == paintToolkitButton[8]) {
      paintToolkitButton[8].setSelected(true);
      paintToolkitBoolean[8] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 8) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Fill With Color
    if (e.getSource() == paintToolkitButton[9]) {
      paintToolkitButton[9].setSelected(true);
      paintToolkitBoolean[9] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 9) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Magnifier
    if (e.getSource() == paintToolkitButton[10]) {
      paintToolkitButton[10].setSelected(true);
      paintToolkitBoolean[10] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 10) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Brush
    if (e.getSource() == paintToolkitButton[11]) {
      paintToolkitButton[11].setSelected(true);
      paintToolkitBoolean[11] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 11) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Text
    if (e.getSource() == paintToolkitButton[12]) {
      paintToolkitButton[12].setSelected(true);
      paintToolkitBoolean[12] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 12) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Curve
    if (e.getSource() == paintToolkitButton[13]) {
      paintToolkitButton[13].setSelected(true);
      paintToolkitBoolean[13] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 13) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Polygon
    if (e.getSource() == paintToolkitButton[14]) {
      paintToolkitButton[14].setSelected(true);
      paintToolkitBoolean[14] = true;
      for (int i = 0; i < 16; i++) {
        if (i == 14) {
          continue;
        }
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    ///Rounded Rectangle
    if (e.getSource() == paintToolkitButton[15]) {
      paintToolkitButton[15].setSelected(true);
      paintToolkitBoolean[15] = true;
      for (int i = 0; i < 15; i++) {
        paintToolkitButton[i].setSelected(false);
        paintToolkitBoolean[i] = false;
      }
    }
    // Adding Functionality to New in Start Menu Documents Read Me File Menu
    if (e.getSource() == documentsReadmeMenuItem[0]) {
      documentsReadme_txt.setTitle("Untitled - Notepad");
      documentsReadmeTextArea.setText("");
    }
    // Adding Functionality to Open... in Start Menu Documents Read Me File Menu
    else if (e.getSource() == documentsReadmeMenuItem[1]) {
      UIManager.put("FileChooser.openDialogTitleText", "Browse");
      UIManager.put("FileChooser.lookInLabelText", "Look In");
      UIManager.put("FileChooser.openButtonText", "Open");
      UIManager.put("FileChooser.cancelButtonText", "Cancel");
      UIManager.put("FileChooser.fileNameLabelText", "File Name");
      UIManager.put("FileChooser.filesOfTypeLabelText", "Files of type");
      UIManager.put("FileChooser.filterLabelText", "All Files");
      documentsReadmeFileOpen = new JFileChooser();
      txt = new FileNameExtensionFilter("Text Documents", "txt", "text");
      documentsReadmeFileOpen.setCurrentDirectory(new File("C:\\Windows"));
      documentsReadmeFileOpen.setFileFilter(txt);
      int responseDocumentsReadmeFileOpen = documentsReadmeFileOpen.showOpenDialog(null);
      documentsReadmeFileOpenFile = documentsReadmeFileOpen.getSelectedFile();
      if (responseDocumentsReadmeFileOpen == JFileChooser.APPROVE_OPTION) {
        try {
          notepadReader = new BufferedReader(new InputStreamReader(
            new FileInputStream(documentsReadmeFileOpenFile), StandardCharsets.UTF_8));
          String notepadTitle = documentsReadmeFileOpenFile.getName().replace(".txt", "") + " - Notepad";
          documentsReadme_txt.setTitle(notepadTitle);
          if (StandardCharsets.UTF_8 != null) {
            documentsReadmeTextArea.setFont(MSJhenghei20);
          } else {
            documentsReadmeTextArea.setFont(MSSansSerif20);
          }
          documentsReadmeTextArea.setLineWrap(true);
          documentsReadmeTextArea.read(notepadReader, documentsReadmeFileOpenFile);
        } catch (IOException ex) {
          ex.printStackTrace();
        } finally {
          try {
            notepadReader.close();
          } catch (IOException ex) {
            ex.printStackTrace();
          }
        } {

        }
      }
    }
    // Adding Functionality to Save in Start Menu Documents Read Me File Menu
    else if (e.getSource() == documentsReadmeMenuItem[2] &&
      documentsReadme_txt.getTitle() == "Untitled - Notepad") {
      UIManager.put("FileChooser.SaveDialogTitleText", "Open");
      UIManager.put("FileChooser.lookInLabelText", "Look In");
      UIManager.put("FileChooser.SaveButtonText", "Save");
      UIManager.put("FileChooser.cancelButtonText", "Cancel");
      UIManager.put("FileChooser.fileNameLabelText", "File Name");
      UIManager.put("FileChooser.filesOfTypeLabelText", "Files of type");
      UIManager.put("FileChooser.filterLabelText", "All Files");
      documentsReadmeFileSave = new JFileChooser();
      txt = new FileNameExtensionFilter("Text Documents", "txt", "text");
      documentsReadmeFileSave.setCurrentDirectory(new File("C:\\Windows"));
      documentsReadmeFileSave.setFileFilter(txt);
      int responseDocumentsReadmeFileSave = documentsReadmeFileSave.showSaveDialog(null);
      documentsReadmeFileSaveFile = documentsReadmeFileSave.getSelectedFile();
      if (responseDocumentsReadmeFileSave == JFileChooser.APPROVE_OPTION) {

      }
      // Adding Functionality to Save As... in Start Menu Documents Read Me File Menu
      else if (e.getSource() == documentsReadmeMenuItem[3]) {
        UIManager.put("FileChooser.SaveDialogTitleText", "Save As");
        UIManager.put("FileChooser.lookInLabelText", "Save In");
        UIManager.put("FileChooser.SaveButtonText", "Save As");
        UIManager.put("FileChooser.cancelButtonText", "Cancel");
        UIManager.put("FileChooser.fileNameLabelText", "File Name");
        UIManager.put("FileChooser.filesOfTypeLabelText", "Files of type");
        UIManager.put("FileChooser.filterLabelText", "All Files");
        documentsReadmeFileSaveAs = new JFileChooser();
        txt = new FileNameExtensionFilter("Text Documents", "txt", "text");
        documentsReadmeFileSaveAs.setCurrentDirectory(new File("C:\\Windows"));
        documentsReadmeFileSaveAs.setFileFilter(txt);
        int responseDocumentsReadmeFileSaveAs = documentsReadmeFileSaveAs.showSaveDialog(null);
        documentsReadmeFileSaveAsFile = documentsReadmeFileSaveAs.getSelectedFile();
        if (responseDocumentsReadmeFileSaveAs == JFileChooser.APPROVE_OPTION) {}
      }
    }
    // Adding Functionality to Exit in Start Menu Documents Read Me File Menu
    else if (e.getSource() == documentsReadmeMenuItem[6]) {
      documentsReadme_txt.dispose();
      documentsReadme_txt.setTitle("Readme - Notepad");
      documentsReadmeTextArea.setFont(courierNew20);
      documentsReadmeTextArea.setLineWrap(false);
      documentsReadmeSetText();
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          documentsReadmeScrollPane.getVerticalScrollBar().setValue(0);
        }
      });
    }
    // Adding Functionality to About Notepad in Start Menu Documents Read Me Help
    // Menu
    else if (e.getSource() == documentsReadmeMenuItem[18]) {
      aboutNotepadDialog.setVisible(true);
    }
    // Adding Functionality to OK in About Notepad
    else if (e.getSource() == aboutNotepadOK) {
      aboutNotepadDialog.dispose();
    }
    // Adding Functionality to Close in File Menu in Find: All Files
    else if (e.getSource() == findAllFilesMenuItem[6]) {
      findAllFiles.dispose();
      findAllFilesBrowseForFolder.dispose();
      findAllFilesTabbedPane.setSelectedIndex(0);
      findAllFilesComboBox[0].setSelectedItem("");
      findAllFilesComboBox[1].setSelectedIndex(2);
      for (int i = 2; i < 4; i++) {
        findAllFilesComboBox[i].setSelectedIndex(0);
      }
      findAllFilesIncludeSubfolders.setSelected(true);
      findAllFilesRadioButton[0].setSelected(true);
      findAllFilesRadioButton[1].setSelected(false);
      for (int i = 0; i < 2; i++) {
        findAllFilesSpinner[i].setValue(1);
      }
      findAllFilesSpinner[2].setValue(0);
      findAllFilesTextField[0].setText("7/9/<2");
      findAllFilesTextField[1].setText("10/7/<2");
      findAllFilesTextField[2].setText("");
    }
    // Adding Functionality to Help Topics in Help Menu in Find: All Files
    else if (e.getSource() == findAllFilesMenuItem[23]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to New Search in File Menu in Find: All Files
    else if (e.getSource() == findAllFilesButton[2]) {
      findAllFiles.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseFindFiles = JOptionPane.showConfirmDialog(null, "This will clear your current search.",
        "Find Files", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, questionMark);
      if (responseFindFiles == JOptionPane.YES_OPTION) {
        findAllFiles.setAlwaysOnTop(true);
        findAllFilesComboBox[0].setSelectedItem("");
        findAllFilesComboBox[1].setSelectedIndex(2);
        for (int i = 2; i < 4; i++) {
          findAllFilesComboBox[i].setSelectedIndex(0);
        }
        findAllFilesIncludeSubfolders.setSelected(true);
        findAllFilesRadioButton[0].setSelected(true);
        findAllFilesRadioButton[1].setSelected(false);
        for (int i = 0; i < 2; i++) {
          findAllFilesSpinner[i].setValue(1);
        }
        findAllFilesSpinner[2].setValue(0);
        findAllFilesTextField[0].setText("7/9/<2");
        findAllFilesTextField[1].setText("10/7/<2");
        findAllFilesTextField[2].setText("");
      } else {
        findAllFiles.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Browse... in File Menu in Find: All Files
    else if (e.getSource() == findAllFilesButton[3]) {
      findAllFiles.setAlwaysOnTop(false);
      findAllFilesBrowseForFolder.setVisible(true);
    }
    // Adding Functionality to OK in Browse For Folder in Find: All Files
    else if (e.getSource() == findAllFilesBrowseForFolderButton[0]) {
      findAllFilesBrowseForFolder.dispose();
    }
    // Adding Functionality to Cancel in Browse For Folder in Find: All Files
    else if (e.getSource() == findAllFilesBrowseForFolderButton[1]) {
      findAllFilesBrowseForFolder.dispose();
      findAllFiles.setAlwaysOnTop(true);
    }
    // Adding Functionality to All files in Find: All Files
    else if (e.getSource() == findAllFilesRadioButton[0]) {
      for (int i = 0; i < 2; i++) {
        findAllFilesTextField[i].setEnabled(false);
        findAllFilesSpinner[i].setEnabled(false);
      }
    }
    // Adding Functionality to Find all files created or modified: in Find: All
    // Files
    else if (e.getSource() == findAllFilesRadioButton[1] && findAllFilesRadioButton[2].isSelected()) {
      for (int i = 0; i < 2; i++) {
        findAllFilesTextField[i].setEnabled(true);
      }
    } else if (e.getSource() == findAllFilesRadioButton[1] && findAllFilesRadioButton[3].isSelected()) {
      findAllFilesSpinner[0].setEnabled(true);
    } else if (e.getSource() == findAllFilesRadioButton[1] && findAllFilesRadioButton[4].isSelected()) {
      findAllFilesSpinner[1].setEnabled(true);
    }
    // Adding Functionality to between in Find: All Files
    else if (e.getSource() == findAllFilesRadioButton[2]) {
      findAllFilesRadioButton[0].setSelected(false);
      findAllFilesRadioButton[1].setSelected(true);
      for (int i = 0; i < 2; i++) {
        findAllFilesTextField[i].setEnabled(true);
        findAllFilesSpinner[i].setEnabled(false);
      }
    }
    // Adding Functionality to during the previous ... month(s) in Find: All Files
    else if (e.getSource() == findAllFilesRadioButton[3]) {
      findAllFilesRadioButton[0].setSelected(false);
      findAllFilesRadioButton[1].setSelected(true);
      for (int i = 0; i < 2; i++) {
        findAllFilesTextField[i].setEnabled(false);
      }
      findAllFilesSpinner[0].setEnabled(true);
      findAllFilesSpinner[1].setEnabled(false);
    }
    // Adding Functionality to during the previous ... day(s) in Find: All Files
    else if (e.getSource() == findAllFilesRadioButton[4]) {
      findAllFilesRadioButton[0].setSelected(false);
      findAllFilesRadioButton[1].setSelected(true);
      for (int i = 0; i < 2; i++) {
        findAllFilesTextField[i].setEnabled(false);
      }
      findAllFilesSpinner[0].setEnabled(false);
      findAllFilesSpinner[1].setEnabled(true);
    }
    // Adding Functionality to Display in Help Topics: Windows Help
    helpTopicsTree.addTreeSelectionListener(new TreeSelectionListener() {
      public void valueChanged(TreeSelectionEvent e) {
        helpTopicsNodeSelected = (DefaultMutableTreeNode) helpTopicsTree.getLastSelectedPathComponent();
        helpButton[0].addMouseListener(new MouseAdapter() {
          public void mouseClicked(MouseEvent e) {
            if (e.getSource() == helpButton[0] && helpTopicsNodeSelected == helpTopicsNode[0]) {
              helpTopicsWindowsHelp.dispose();
              findSetupWizard.dispose();
              int responseHelpTopicsDisplay = JOptionPane.showOptionDialog(null,
                "No CDROM drives were found on the system", "Welcome", JOptionPane.WARNING_MESSAGE,
                0, exclamationMark, OK, OK[0]);
              if (responseHelpTopicsDisplay == JOptionPane.YES_OPTION ||
                responseHelpTopicsDisplay == JOptionPane.NO_OPTION) {
                JOptionPane.showOptionDialog(null, "The program Tour.exe failed to run", "Welcome",
                  JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
              }
            }
          }
        });
      }
    });
    helpTopicsTree.addTreeWillExpandListener(new TreeWillExpandListener() {
      public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
        if (e.getSource() == helpButton[0] && helpButton[0].getText() == "Open") {
          if (helpTopicsNodeSelected == helpTopicsNode[2]) {

          }
        }
      }

      public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {
        if (e.getSource() == helpButton[0] && helpButton[0].getText() == "Close") {

        }
      }
    });
    // Adding Functionalities to Open in Help Topics: Windows Help
    if (e.getSource() == helpButton[0] && helpButton[0].getText() == "Open") {

    }
    // Adding Functionalities to Close in Help Topics: Windows Help
    if (e.getSource() == helpButton[0] && helpButton[0].getText() == "Close") {

    }
    // Adding Functionality to Print... in Help Topics: Windows Help
    if (e.getSource() == helpButton[1]) {
      helpTopicsWindowsHelp.setAlwaysOnTop(false);
      int responseHelpTopicsWindowsHelpPrint = JOptionPane.showOptionDialog(null,
        "The System is unable to change the printer settings. Run Control\n" +
        "Panel to make sure that the printer is installed correctly. (160)",
        "Windows Help", JOptionPane.INFORMATION_MESSAGE, 0, informationSign, OK, OK[0]);
      if (responseHelpTopicsWindowsHelpPrint == JOptionPane.YES_OPTION) {
        helpTopicsWindowsHelp.setAlwaysOnTop(true);
      } else {
        helpTopicsWindowsHelp.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Cancel in Help Topics: Windows Help
    if (e.getSource() == helpButton[2]) {
      helpTopicsWindowsHelp.dispose();
      findSetupWizard.dispose();
      helpTopicsTree.setSelectionRow(0);
      helpIndexList.clearSelection();
      for (int i = 0; i < 6; i++) {
        helpPath[0] = new TreePath(helpTopicsNode[i].getPath());
      }
      for (int i = 0; i < 10; i++) {
        helpTopicsTree.collapsePath(helpPath[i]);
      }
    }
    // Adding Functionality to in Cancel Find Setup Wizard
    if (e.getSource() == findSetupWizardButton[2]) {
      findSetupWizard.dispose();
      helpTabbedPane.setSelectedIndex(0);
      helpTopicsWindowsHelp.setAlwaysOnTop(true);
    }
    // Adding Functionality to Open in Start Menu Run Open
    if (e.getSource() == runButton[0]) {
      runBrowseFile = runBrowse.getSelectedFile();
      if (runOpen.getEditor().getItem().toString() == runBrowseFile.toString()) {
        try {
          Desktop.getDesktop().open(runBrowseFile);
        } catch (IOException ex) {
          ex.printStackTrace();
        }
      } else if (runOpen.getEditor().getItem().toString() != runBrowseFile.toString()) {
        JOptionPane.showOptionDialog(null,
          "Cannot find the file" + runOpen.getEditor().getItem().toString() +
          "(or one of its components). Make sure the path\n" +
          "and filename are correct and that all required libraries are available",
          runOpen.getEditor().getItem().toString(), JOptionPane.INFORMATION_MESSAGE, 0, informationSign,
          OK, OK[0]);
      }
    }
    // Adding Functionality to Cancel in Start Menu Run Open
    else if (e.getSource() == runButton[1]) {
      startMenuRunOpen.dispose();
    }
    // Adding Functionality to Browse... in Start Menu Run Open
    else if (e.getSource() == runButton[2]) {
      UIManager.put("FileChooser.openDialogTitleText", "Browse");
      UIManager.put("FileChooser.lookInLabelText", "Look In");
      UIManager.put("FileChooser.openButtonText", "Open");
      UIManager.put("FileChooser.cancelButtonText", "Cancel");
      UIManager.put("FileChooser.fileNameLabelText", "File Name");
      UIManager.put("FileChooser.filesOfTypeLabelText", "Files of type");
      UIManager.put("FileChooser.filterLabelText", "All Files");
      runBrowse = new JFileChooser();
      runBrowse.setCurrentDirectory(new File("C:\\Users\\ALANZHOU\\Desktop"));
      int responseRunBrowse = runBrowse.showOpenDialog(null);
      runBrowseFile = runBrowse.getSelectedFile();
      if (responseRunBrowse == JFileChooser.APPROVE_OPTION) {
        try {
          Desktop.getDesktop().open(runBrowseFile);
        } catch (IOException ex) {
          ex.printStackTrace();
        }
        runOpen.getEditor().setItem(runBrowseFile);
        runButton[0].setEnabled(true);
      }
    }
    // Adding Functionality to Shut down the computer? in Shut Down Windows
    else if (e.getSource() == shutDownWindowsButton[0] && shutDownWindowsRadioButton[0].isSelected()) {
      disposeEveryWindowMethod();
      mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      mainFrame.setResizable(false);
      shutDownWindowsTimer = new Timer[3];
      shutDownWindowsTimer[0] = new Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          mainFrame.remove(shutDownDesktop);
          mainFrame.getContentPane().setCursor(blankCursor);
          mainFrame.setResizable(false);
          mainFrame.remove(shutDownDesktop);
          mainFrame.add(shutDownScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
      });
      shutDownWindowsTimer[1] = new Timer(4000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          mainFrame.remove(shutDownScreen);
          mainFrame.add(safeTurnOff);
          mainFrame.revalidate();
          mainFrame.repaint();
          shutdownClip.start();
        }
      });
      shutDownWindowsTimer[2] = new Timer(7000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          System.exit(0);
        }
      });
      for (int i = 0; i < 3; i++) {
        shutDownWindowsTimer[i].start();
      }
    }
    // Adding Functionality to Shut down the computer? in Shut Down Windows When No
    // is Selected
    else if (e.getSource() == shutDownWindowsButton[1] && shutDownWindowsRadioButton[0].isSelected() &&
      shutDownDesktop.getParent() != null) {
      shutDownWindowsDialog.dispose();
      shutDownWindowsButtonGroup.clearSelection();
      shutDownWindowsRadioButton[0].setSelected(true);
      mainFrame.remove(shutDownDesktop);
      mainFrame.add(desktop);
      mainFrame.revalidate();
      mainFrame.repaint();
      desktop.remove(documentsReadme);
      desktop.remove(startMenuPrograms);
      desktop.remove(startMenuDocuments);
      desktop.remove(startMenuSettings);
      desktop.remove(startMenuFind);
      desktop.remove(startMenuHelp);
      desktop.remove(startMenuRun);
      desktop.remove(startMenuShutDownSelected);
      desktop.remove(startMenuButtonClicked);
      desktop.remove(taskbarOpen);
      desktop.add(startMenuButton);
      desktop.add(taskbar);
      desktop.revalidate();
      desktop.repaint();
      if (recycleBin.getParent() == null) {
        desktop.add(recycleBin);
        desktop.revalidate();
        desktop.repaint();
      }
      if (theInternet.getParent() == null) {
        desktop.add(theInternet);
        desktop.revalidate();
        desktop.repaint();
      }
      if (MSN.getParent() == null) {
        desktop.add(MSN);
        desktop.revalidate();
        desktop.repaint();
      }
    }
    // Adding Functionality to Restart the computer? in Shut Down Windows When No is
    // Selected
    else if (e.getSource() == shutDownWindowsButton[1] && shutDownWindowsRadioButton[1].isSelected() &&
      shutDownDesktop.getParent() != null) {
      shutDownWindowsDialog.dispose();
      shutDownWindowsButtonGroup.clearSelection();
      shutDownWindowsRadioButton[0].setSelected(true);
      mainFrame.remove(shutDownDesktop);
      mainFrame.add(desktop);
      mainFrame.revalidate();
      mainFrame.repaint();
    }
    // Adding Functionality to Restart the computer in MS-DOS mode in Shut Down
    // Windows When No is Selected
    else if (e.getSource() == shutDownWindowsButton[1] && shutDownWindowsRadioButton[2].isSelected() &&
      shutDownDesktop.getParent() != null) {
      shutDownWindowsDialog.dispose();
      shutDownWindowsButtonGroup.clearSelection();
      shutDownWindowsRadioButton[0].setSelected(true);
      mainFrame.remove(shutDownDesktop);
      mainFrame.add(desktop);
      mainFrame.revalidate();
      mainFrame.repaint();
    }
    // Adding Functionality to Help in Shut Down Windows
    else if (e.getSource() == shutDownWindowsButton[2]) {
      mainFrame.remove(shutDownDesktop);
      mainFrame.add(desktop);
      mainFrame.revalidate();
      mainFrame.repaint();
      desktop.remove(startMenuPrograms);
      desktop.remove(startMenuDocuments);
      desktop.remove(startMenuDocumentsCovered);
      desktop.remove(startMenuSettings);
      desktop.remove(startMenuFind);
      desktop.remove(startMenuHelp);
      desktop.remove(startMenuRun);
      desktop.remove(startMenuShutDownSelected);
      desktop.remove(startMenuButtonClicked);
      desktop.remove(taskbarOpen);
      desktop.add(startMenuButton);
      desktop.add(taskbar);
      desktop.revalidate();
      desktop.repaint();
      if (recycleBin.getParent() == null) {
        desktop.add(recycleBin);
        desktop.revalidate();
        desktop.repaint();
      }
      if (theInternet.getParent() == null) {
        desktop.add(theInternet);
        desktop.revalidate();
        desktop.repaint();
      }
      if (MSN.getParent() == null) {
        desktop.add(MSN);
        desktop.revalidate();
        desktop.repaint();
      }
      shutDownWindowsDialog.dispose();
      shutDownWindowsHelp.setVisible(true);
    }
    // Adding Functionality to Help Topics in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpButton[0]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to Back in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpButton[1]) {

    }
    // Adding Functionality to Annotate... in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsMenuItem[0]) {
      annotateDialog.setVisible(true);
    }
    // Adding Functionality to Cancel in Annonate in Shut Down Windows Help
    else if (e.getSource() == annotateButton[1]) {
      annotateDialog.setVisible(false);
    }
    // Adding Functionality to Print Topic... in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsMenuItem[2]) {
      JOptionPane.showOptionDialog(null,
        "The System is unable to change the printer settings. Run Control\n" +
        "Panel to make sure that the printer is installed correctly. (160)",
        "Windows Help", JOptionPane.INFORMATION_MESSAGE, 0, informationSign, OK, OK[0]);
    }
    // Adding Functionality to Small in Font in Options in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[0]) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[0].setSelected(true);
      for (int i = 1; i < 3; i++) {
        shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setSelected(false);
      }
      shutDownWindowsHelpTextPane.setFont(MSSansSerif12);
    }
    // Adding Functionality to Normal in Font in Options in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[1]) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[1].setSelected(true);
      for (int i = 0; i < 3; i++) {
        if (i == 1) {
          continue;
        }
        shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setSelected(false);
      }
      shutDownWindowsHelpTextPane.setFont(MSSansSerif16);
    }
    // Adding Functionality to Large in Font in Options in Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[2]) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[2].setSelected(true);
      for (int i = 0; i < 3; i++) {
        if (i == 2) {
          continue;
        }
        shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setSelected(false);
      }
      shutDownWindowsHelpTextPane.setFont(MSSansSerif18);
    }
    // Adding Functionality to Default in Keep Help On Top Options in Shut Down
    // Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[3]) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[3].setSelected(true);
      for (int i = 4; i < 6; i++) {
        shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setSelected(false);
      }
      shutDownWindowsHelp.setAlwaysOnTop(true);
    }
    // Adding Functionality to On Top in Keep Help On Top in Font in Options in Shut
    // Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[4]) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[4].setSelected(true);
      for (int i = 3; i < 6; i++) {
        if (i == 4) {
          continue;
        }
        shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setSelected(false);
      }
      shutDownWindowsHelp.setAlwaysOnTop(true);
    }
    // Adding Functionality to Not On Top in Keep Help On Top in Font in Options in
    // Shut Down Windows Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[5]) {
      shutDownWindowsHelpOptionsCheckBoxMenuItem[5].setSelected(true);
      for (int i = 3; i < 6; i++) {
        if (i == 5) {
          continue;
        }
        shutDownWindowsHelpOptionsCheckBoxMenuItem[i].setSelected(false);
      }
      shutDownWindowsHelp.setAlwaysOnTop(false);
    }
    // Adding Functionality to Use System Colors in Options in Shut Down Windows
    // Help
    else if (e.getSource() == shutDownWindowsHelpOptionsCheckBoxMenuItem[6]) {
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseUseSystemColors = JOptionPane.showConfirmDialog(null,
        "For the color change to take effect, Help must be restarted. Do you want to\n" + "close Help now?",
        "Windows Help", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null);
      if (responseUseSystemColors == JOptionPane.YES_OPTION) {
        shutDownWindowsHelp.dispose();
      }
    }
    /// Adding Functionality to OK button in About Windows 95
    else if (e.getSource() == aboutWindows95OK) {
      aboutWindows95Dialog.dispose();
    }
    // Adding Functionality to Open in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[0]) {
      myComputerOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Retry");
      UIManager.put("OptionPane.noButtonText", "Cancel");
      int responseRemovableDiskA;
      do {
        responseRemovableDiskA = JOptionPane.showConfirmDialog(null,
          "A: \\ is not accessible. \n\nThe device is not ready.", "Removable Disk (A:)",
          JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      } while (responseRemovableDiskA == JOptionPane.YES_OPTION);
      if (responseRemovableDiskA != JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Explore in Removable Disk (A:) Popup Menu
    else if (e.getSource() == removableDiskA_PopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Retry");
      UIManager.put("OptionPane.noButtonText", "Cancel");
      int responseRemovableDiskA;
      do {
        removableDiskA_Explore.setVisible(true);
        responseRemovableDiskA = JOptionPane.showConfirmDialog(null,
          "A: \\ is not accessible. \n\nThe device is not ready.", "Removable Disk (A:)",
          JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      } while (responseRemovableDiskA == JOptionPane.YES_OPTION);
      if (responseRemovableDiskA != JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        removableDiskA_Explore.dispose();
      }
    }
    // Adding Functionality to C: -> Program Files -> File -> Close
    if (e.getSource() == programFilesMenuItem[10]) {
      programFilesOpen.dispose();
      C_ProgramFilesObjectsUnselectMethod();
      programFilesStatusText.setText("4 object(s)               0 bytes");
    }
    // Adding Functionality to C: -> Program Files -> Help -> Help Topics
    if (e.getSource() == programFilesMenuItem[30]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to C: -> Program Files -> Help -> About Windows 95
    if (e.getSource() == programFilesMenuItem[31]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to Open in Add New Hardware Popup Menu
    if (e.getSource() == addNewHardwarePopupMenuItem[0]) {
      addNewHardwareWizard.setVisible(true);
    }
    // Adding Functionality to < Back in Add New Hardware Wizard at "If your
    // hardware is already installed..."
    if (addNewHardwareWizardText[1].getParent() != null && e.getSource() == addNewHardwareWizardButton[0]) {
      addNewHardwareWizard.remove(addNewHardwareWizardText[1]);
      addNewHardwareWizard.add(addNewHardwareWizardText[0]);
      addNewHardwareWizard.revalidate();
      addNewHardwareWizard.repaint();
      for (int i = 0; i < 2; i++) {
        addNewHardwareWizard.remove(addNewHardwareWizardRadioButton[i]);
      }
      addNewHardwareWizardButton[0].setEnabled(false);
    }
    // Adding Functionality to < Back in Add New Hardware Wizard at "Windows will
    // now look for your new hardware..."
    if (addNewHardwareWizardText[2].getParent() != null && e.getSource() == addNewHardwareWizardButton[0]) {
      addNewHardwareWizard.remove(addNewHardwareWizardImage[1]);
      addNewHardwareWizard.add(addNewHardwareWizardImage[0]);
      addNewHardwareWizard.remove(addNewHardwareWizardText[2]);
      addNewHardwareWizard.add(addNewHardwareWizardText[1]);
      addNewHardwareWizard.revalidate();
      addNewHardwareWizard.repaint();
      for (int i = 0; i < 2; i++) {
        addNewHardwareWizard.add(addNewHardwareWizardRadioButton[i]);
      }
    }
    // Adding Functionality to < Back in Add New Hardware Wizard at "Select the type
    // of hardware you want to install..."
    if (addNewHardwareWizardText[4].getParent() != null && e.getSource() == addNewHardwareWizardButton[0]) {
      addNewHardwareWizard.remove(addNewHardwareWizardImage[1]);
      addNewHardwareWizard.add(addNewHardwareWizardImage[0]);
      addNewHardwareWizard.remove(addNewHardwareWizardText[4]);
      addNewHardwareWizard.add(addNewHardwareWizardText[1]);
      addNewHardwareWizard.revalidate();
      addNewHardwareWizard.repaint();
      for (int i = 0; i < 2; i++) {
        addNewHardwareWizard.add(addNewHardwareWizardRadioButton[i]);
      }
      addNewHardwareWizard.remove(hardwareTypesScrollPane);
    }
    // Adding Functionality to Next > in Add New Hardware Wizard at "This wizard
    // will help you..."
    if (addNewHardwareWizardText[0].getParent() != null && e.getSource() == addNewHardwareWizardButton[1]) {
      addNewHardwareWizard.remove(addNewHardwareWizardText[0]);
      addNewHardwareWizard.add(addNewHardwareWizardText[1]);
      addNewHardwareWizard.revalidate();
      addNewHardwareWizard.repaint();
      for (int i = 0; i < 2; i++) {
        addNewHardwareWizard.add(addNewHardwareWizardRadioButton[i]);
      }
      addNewHardwareWizardButton[0].setEnabled(true);
    }
    // Adding Functionality to Next > in Add New Hardware Wizard at "If your
    // hardware is already installed..." and Yes (Recommendeded) Selected
    if (addNewHardwareWizardText[1].getParent() != null && e.getSource() == addNewHardwareWizardButton[1] &&
      addNewHardwareWizardRadioButton[0].isSelected()) {
      addNewHardwareWizard.remove(addNewHardwareWizardImage[0]);
      addNewHardwareWizard.add(addNewHardwareWizardImage[1]);
      addNewHardwareWizard.remove(addNewHardwareWizardText[1]);
      addNewHardwareWizard.add(addNewHardwareWizardText[2]);
      addNewHardwareWizard.revalidate();
      addNewHardwareWizard.repaint();
      for (int i = 0; i < 2; i++) {
        addNewHardwareWizard.remove(addNewHardwareWizardRadioButton[i]);
      }
    }
    // Adding Functionality to Next > in Add New Hardware Wizard at "If your
    // hardware is already installed..." and No Selected
    if (addNewHardwareWizardText[1].getParent() != null && e.getSource() == addNewHardwareWizardButton[1] &&
      addNewHardwareWizardRadioButton[1].isSelected()) {
      addNewHardwareWizard.remove(addNewHardwareWizardImage[0]);
      addNewHardwareWizard.add(addNewHardwareWizardImage[1]);
      addNewHardwareWizard.remove(addNewHardwareWizardText[1]);
      addNewHardwareWizard.add(addNewHardwareWizardText[4]);
      addNewHardwareWizard.revalidate();
      addNewHardwareWizard.repaint();
      for (int i = 0; i < 2; i++) {
        addNewHardwareWizard.remove(addNewHardwareWizardRadioButton[i]);
      }
      addNewHardwareWizard.add(hardwareTypesScrollPane);
    }
    // Adding Functionality to Next > in Add New Hardware Wizard at "Windows will
    // now look for your new hardware..."

    // Adding Functionality to Cancel in Add New Hardware Wizard
    if (e.getSource() == addNewHardwareWizardButton[2]) {
      addNewHardwareWizard.dispose();
    }
    // Adding Functionality to Create Shortcut in Add New Hardware Popup Menu
    if (e.getSource() == addNewHardwarePopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut0 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut0 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut0 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Add/Remove Programs Popup Menu
    if (e.getSource() == addRemoveProgramsPopupMenuItem[0]) {
      addRemoveProgramsProperties.setVisible(true);
    }
    // Adding Functionality to OK in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[0]) {
      addRemoveProgramsProperties.dispose();
      addRemoveProgramsPropertiesInstall.dispose();
      addRemoveProgramsPropertiesDetails.dispose();
      addRemoveProgramsPropertiesHaveDisk.dispose();
      addRemoveProgramsPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Cancel in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[1]) {
      addRemoveProgramsProperties.dispose();
      addRemoveProgramsPropertiesInstall.dispose();
      addRemoveProgramsPropertiesDetails.dispose();
      addRemoveProgramsPropertiesHaveDisk.dispose();
      addRemoveProgramsPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Apply in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[2]) {

    }
    // Adding Functionality to Install... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[3]) {
      addRemoveProgramsPropertiesInstall.setVisible(true);
    }
    // Adding Functionality to < Back in Install... in Add/Remove Programs
    // Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[0]) {
      addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesDialogLabel[3]);
      addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesTextField);
      addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesDialogButton[3]);
      addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesDialogLabel[1]);
      addRemoveProgramsPropertiesInstall.revalidate();
      addRemoveProgramsPropertiesInstall.repaint();
      addRemoveProgramsPropertiesDialogButton[0].setEnabled(false);
      addRemoveProgramsPropertiesDialogButton[1].setEnabled(true);
      addRemoveProgramsPropertiesDialogButton[1].setText("Next >");
    }
    // Adding Functionality to Next > in Install... in Add/Remove Programs
    // Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[1]) {
      addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesDialogLabel[1]);
      addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesDialogLabel[3]);
      addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesTextField);
      addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesDialogButton[3]);
      addRemoveProgramsPropertiesInstall.revalidate();
      addRemoveProgramsPropertiesInstall.repaint();
      addRemoveProgramsPropertiesDialogButton[0].setEnabled(true);
      addRemoveProgramsPropertiesDialogButton[1].setEnabled(false);
      addRemoveProgramsPropertiesDialogButton[1].setText("Finish");
    }
    // Adding Functionality to Finish in Install... in Add/Remove Programs
    // Properties
    if (addRemoveProgramsPropertiesDialogButton[1].getText() == "Finish" &&
      e.getSource() == addRemoveProgramsPropertiesDialogButton[1]) {
      controlPanelOpen.setAlwaysOnTop(false);
      addRemoveProgramsProperties.setAlwaysOnTop(false);
      addRemoveProgramsPropertiesInstall.setAlwaysOnTop(false);
      int responseCreateDisk = JOptionPane.showOptionDialog(null,
        "The file " + addRemoveProgramsPropertiesTextField.getText() + " cannot be found.",
        "Run Installation Program", JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
      if (responseCreateDisk == 0) {
        controlPanelOpen.setAlwaysOnTop(true);
        addRemoveProgramsProperties.setAlwaysOnTop(true);
        addRemoveProgramsPropertiesInstall.setAlwaysOnTop(true);
      } else {
        controlPanelOpen.setAlwaysOnTop(true);
        addRemoveProgramsProperties.setAlwaysOnTop(true);
        addRemoveProgramsPropertiesInstall.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Cancel in Install... in Add/Remove Programs
    // Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[2]) {
      addRemoveProgramsPropertiesInstall.dispose();
      addRemoveProgramsPropertiesTextField.setText("");
      if (addRemoveProgramsPropertiesDialogLabel[3].getParent() != null) {
        addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesDialogLabel[3]);
        addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesTextField);
        addRemoveProgramsPropertiesInstall.remove(addRemoveProgramsPropertiesDialogButton[3]);
        addRemoveProgramsPropertiesInstall.add(addRemoveProgramsPropertiesDialogLabel[1]);
        addRemoveProgramsPropertiesInstall.revalidate();
        addRemoveProgramsPropertiesInstall.repaint();
        addRemoveProgramsPropertiesDialogButton[0].setEnabled(false);
        addRemoveProgramsPropertiesDialogButton[1].setEnabled(true);
        addRemoveProgramsPropertiesDialogButton[1].setText("Next >");
      }
    }
    // Adding Functionality to Browse... in Install... in Add/Remove Programs
    // Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[3]) {
      UIManager.put("FileChooser.openDialogTitleText", "Browse");
      UIManager.put("FileChooser.lookInLabelText", "Look In");
      UIManager.put("FileChooser.openButtonText", "Open");
      UIManager.put("FileChooser.cancelButtonText", "Cancel");
      UIManager.put("FileChooser.fileNameLabelText", "File Name");
      UIManager.put("FileChooser.filesOfTypeLabelText", "Files of type");
      UIManager.put("FileChooser.filterLabelText", "All Files");
      addRemoveProgramsPropertiesRunInstallationProgramBrowse = new JFileChooser();
      programs = new FileNameExtensionFilter("Programs", "Programs", "Programs");
      addRemoveProgramsPropertiesRunInstallationProgramBrowse.setCurrentDirectory(new File("C:\\"));
      addRemoveProgramsPropertiesRunInstallationProgramBrowse.setFileFilter(programs);
    }
    // Adding Functionality to Add/Remove... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[4]) {
      addRemoveSoftware[0] = "";
    }
    // Disabling Add/Remove... After the Software is Removed
    if (addRemoveSoftware[0] == "") {
      addRemoveProgramsPropertiesButton[4].setEnabled(false);
    }
    // Adding Functionality to Details... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[5]) {
      addRemoveProgramsPropertiesDetails.setVisible(true);
    }
    // Adding Functionality to OK in Details... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[4]) {
      addRemoveProgramsPropertiesDetails.dispose();
    }
    // Adding Functionality to Cancel in Details... in Add/Remove Programs
    // Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[5]) {
      addRemoveProgramsPropertiesDetails.dispose();
    }
    // Adding Functionality to Have Disk... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[6]) {
      addRemoveProgramsPropertiesHaveDisk.setVisible(true);
    }
    // Adding Functionality to OK in Have Disk... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[7]) {
      addRemoveProgramsPropertiesHaveDisk.dispose();
    }
    // Adding Functionality to Cancel in Have Disk... in Add/Remove Programs
    // Properties
    if (e.getSource() == addRemoveProgramsPropertiesDialogButton[8]) {
      addRemoveProgramsPropertiesHaveDisk.dispose();
    }
    // Adding Functionality to Create Disk... in Add/Remove Programs Properties
    if (e.getSource() == addRemoveProgramsPropertiesButton[7]) {
      addRemoveProgramsPropertiesPanel[3].add(addRemoveProgramsPropertiesLabel[6]);
      addRemoveProgramsPropertiesPanel[3].revalidate();
      addRemoveProgramsPropertiesPanel[3].repaint();
      for (int i = 0; i < 2; i++) {
        addRemoveProgramsPropertiesButton[i].setEnabled(false);
      }
      addRemoveProgramsPropertiesButton[7].setEnabled(false);
      controlPanelOpen.setAlwaysOnTop(false);
      addRemoveProgramsProperties.setAlwaysOnTop(false);
      int responseCreateDisk = JOptionPane.showOptionDialog(null,
        "Drive A is not a floppy disk drive or is mapped to a network drive.\n" +
        "Windows cannot create a startup disk.",
        "Error Creating Startup Disk", JOptionPane.ERROR_MESSAGE, 0, crossSign, OK, OK[0]);
      if (responseCreateDisk == 0) {
        addRemoveProgramsPropertiesPanel[3].remove(addRemoveProgramsPropertiesLabel[6]);
        addRemoveProgramsPropertiesPanel[3].revalidate();
        addRemoveProgramsPropertiesPanel[3].repaint();
        for (int i = 0; i < 2; i++) {
          addRemoveProgramsPropertiesButton[i].setEnabled(true);
        }
        addRemoveProgramsPropertiesButton[7].setEnabled(true);
        controlPanelOpen.setAlwaysOnTop(true);
        addRemoveProgramsProperties.setAlwaysOnTop(true);
      } else {
        addRemoveProgramsPropertiesPanel[3].remove(addRemoveProgramsPropertiesLabel[6]);
        addRemoveProgramsPropertiesPanel[3].revalidate();
        addRemoveProgramsPropertiesPanel[3].repaint();
        for (int i = 0; i < 2; i++) {
          addRemoveProgramsPropertiesButton[i].setEnabled(true);
        }
        addRemoveProgramsPropertiesButton[7].setEnabled(true);
        controlPanelOpen.setAlwaysOnTop(true);
        addRemoveProgramsProperties.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Create Shortcut in Add/Remove Programs Popup Menu
    if (e.getSource() == addRemoveProgramsPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut1 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut1 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut1 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Date/Time Popup Menu
    if (e.getSource() == dateTimePopupMenuItem[0]) {
      dateTimeProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Date/Time Popup Menu
    if (e.getSource() == dateTimePopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut2 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut2 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut2 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Display Popup Menu
    if (e.getSource() == displayPopupMenuItem[0]) {
      displayProperties.setVisible(true);
      if (taskbarOpen.getParent() == null) {
        desktop.add(taskbarOpen);
        desktop.revalidate();
        desktop.repaint();
      }
    }
    // Adding Functionality to Create Shortcut in Display Popup Menu
    if (e.getSource() == displayPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut3 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut3 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut3 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Fonts Popup Menu
    if (e.getSource() == controlPanelFontsPopupMenuItem[0]) {
      controlPanelFontsOpen.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Fonts Popup Menu
    if (e.getSource() == controlPanelFontsPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut4 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut4 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut4 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Control Panel -> Fonts -> File -> Close
    if (e.getSource() == controlPanelFontsMenuItem[10]) {
      controlPanelFontsOpen.dispose();
    }
    // Adding Functionality to Control Panel -> Fonts -> Help -> Help Topics
    if (e.getSource() == controlPanelFontsMenuItem[30]) {
      helpTopicsWindowsHelp.setVisible(true);
    }
    // Adding Functionality to Control Panel -> Fonts -> Help -> About Windows 95
    if (e.getSource() == controlPanelFontsMenuItem[31]) {
      aboutWindows95Dialog.setVisible(true);
    }
    // Adding Functionality to Open in Internet Popup Menu
    if (e.getSource() == internetPopupMenuItem[0]) {
      controlPanelInternetProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Internet Popup Menu
    if (e.getSource() == internetPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut5 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut5 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut5 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to OK in Internet Properties
    if (e.getSource() == controlPanelInternetPropertiesButton[0]) {
      controlPanelInternetProperties.dispose();
      controlPanelInternetPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Cancel in Internet Properties
    if (e.getSource() == controlPanelInternetPropertiesButton[1]) {
      controlPanelInternetProperties.dispose();
      controlPanelInternetPropertiesTabbedPane.setSelectedIndex(0);
      controlPanelInternetPropertiesCheckBox.setSelected(false);
    }
    // Adding Functionality to Apply in Internet Properties
    if (e.getSource() == controlPanelInternetPropertiesButton[2]) {
      controlPanelInternetPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Use Proxy Server in Internet Properties
    if (controlPanelInternetPropertiesCheckBox.isSelected() == true) {
      for (int i = 2; i < 5; i++) {
        controlPanelInternetPropertiesLabel[i].setEnabled(true);
      }
      controlPanelInternetPropertiesTextField.setBackground(white);
      controlPanelInternetPropertiesTextArea.setBackground(white);
      controlPanelInternetPropertiesTextField.setEnabled(true);
      controlPanelInternetPropertiesTextArea.setEnabled(true);
      controlPanelInternetPropertiesScrollPane.getHorizontalScrollBar().setBackground(white);
      controlPanelInternetPropertiesScrollPane.getVerticalScrollBar().setBackground(white);
    } else if (controlPanelInternetPropertiesCheckBox.isSelected() == false) {
      for (int i = 2; i < 5; i++) {
        controlPanelInternetPropertiesLabel[i].setEnabled(false);
      }
      controlPanelInternetPropertiesTextField.setBackground(gray);
      controlPanelInternetPropertiesTextArea.setBackground(gray);
      controlPanelInternetPropertiesTextField.setEnabled(false);
      controlPanelInternetPropertiesTextArea.setEnabled(false);
      controlPanelInternetPropertiesScrollPane.getHorizontalScrollBar().setBackground(gray);
      controlPanelInternetPropertiesScrollPane.getVerticalScrollBar().setBackground(gray);
    }
    // Adding Functionality to Open in Joystick Popup Menu
    if (e.getSource() == joystickPopupMenuItem[0]) {
      joystickProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Joystick Popup Menu
    if (e.getSource() == joystickPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut6 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut6 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut6 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    } // Adding Functionality to Calibrate ... in Joystick Properties
    if (e.getSource() == joystickPropertiesButton[0]) {
      joystickCalibration.setVisible(true);
    }
    // Adding Functionality to Test ... in Joystick Properties
    if (e.getSource() == joystickPropertiesButton[1]) {
      joystickTest.setVisible(true);
    }
    // Adding Functionality to OK in Joystick Properties
    if (e.getSource() == joystickPropertiesButton[3]) {
      joystickProperties.dispose();
      customJoystick.dispose();
      joystickCalibration.dispose();
      joystickTest.dispose();
    }
    // Adding Functionality to Cancel in Joystick Properties
    if (e.getSource() == joystickPropertiesButton[4]) {
      joystickProperties.dispose();
      customJoystick.dispose();
      joystickCalibration.dispose();
      joystickTest.dispose();
      joystickPropertiesComboBox[0].setSelectedIndex(0);
      joystickPropertiesComboBox[1].setSelectedIndex(2);
    }
    // Adding Functionality to Apply in Joystick Properties
    if (e.getSource() == joystickPropertiesButton[5]) {
      joystickPropertiesButton[5].setEnabled(false);
    }
    // Adding Functionality to Special features in Custom Joystick
    if (customJoystickCheckBox[0].isSelected() == true) {
      for (int i = 5; i < 8; i++) {
        customJoystickRadioButton[i].setEnabled(true);
      }
    }
    if (customJoystickCheckBox[0].isSelected() == false) {
      for (int i = 5; i < 8; i++) {
        customJoystickRadioButton[i].setEnabled(false);
      }
      customJoystickButtonGroup[2].clearSelection();
    }
    // Adding Functionality to OK in Custom Joystick
    if (e.getSource() == customJoystickButton[0]) {
      customJoystick.dispose();
    }
    // Adding Functionality to Cancel in Custom Joystick
    if (e.getSource() == customJoystickButton[1]) {
      customJoystick.dispose();
      customJoystickRadioButton[0].setSelected(true);
      customJoystickRadioButton[3].setSelected(true);
      for (int i = 5; i < 8; i++) {
        customJoystickRadioButton[i].setEnabled(false);
      }
      customJoystickButtonGroup[2].clearSelection();
      for (int i = 0; i < 2; i++) {
        customJoystickCheckBox[i].setSelected(false);
      }
    }
    // Adding Functionality to Open in Keyboard Popup Menu
    if (e.getSource() == keyboardPopupMenuItem[0]) {
      keyboardProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Keyboard Popup Menu
    if (e.getSource() == keyboardPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut7 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut7 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut7 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to OK in Language Tab in Keyboard Properties
    if (e.getSource() == keyboardPropertiesButton[0]) {
      keyboardProperties.dispose();
      keyboardPropertiesAdd.dispose();
      keyboardPropertiesProperties.dispose();
      keyboardPropertiesChange.dispose();
      keyboardPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Cancel in Language Tab in Keyboard Properties
    if (e.getSource() == keyboardPropertiesButton[1]) {
      keyboardProperties.dispose();
      keyboardPropertiesAdd.dispose();
      keyboardPropertiesProperties.dispose();
      keyboardPropertiesChange.dispose();
      keyboardPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Apply in Language Tab in Keyboard Properties
    if (e.getSource() == keyboardPropertiesButton[2]) {
      keyboardPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Add... in Language Tab in Keyboard Properties
    if (e.getSource() == keyboardPropertiesButton[3]) {
      keyboardPropertiesAdd.setVisible(true);
    }
    // Adding Functionality to Properties in Language Tab in Keyboard Properties
    if (e.getSource() == keyboardPropertiesButton[4]) {
      keyboardPropertiesProperties.setVisible(true);
    }
    // Adding Functionality to OK in Add Language in Keyboard Properties
    if (e.getSource() == keyboardPropertiesDialogButton[0]) {
      keyboardPropertiesAdd.dispose();
    }
    // Adding Functionality to Cancel in Add Language in Keyboard Properties
    if (e.getSource() == keyboardPropertiesDialogButton[1]) {
      keyboardPropertiesAdd.dispose();
      keyboardPropertiesDialogComboBox[0].setSelectedIndex(0);
    }
    // Adding Functionality to OK in Language Properties in Keyboard Properties
    if (e.getSource() == keyboardPropertiesDialogButton[2]) {
      keyboardPropertiesProperties.dispose();
    }
    // Adding Functionality to Cancel in Language Properties in Keyboard Properties
    if (e.getSource() == keyboardPropertiesDialogButton[3]) {
      keyboardPropertiesProperties.dispose();
      keyboardPropertiesDialogComboBox[1].setSelectedIndex(23);
    }
    // Adding Functionality to Change... in General Tab in Keyboard Properties
    if (e.getSource() == keyboardPropertiesButton[7]) {
      keyboardPropertiesChange.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Modems Popup Menu
    if (e.getSource() == modemsPopupMenuItem[0]) {
      modemsInstallNewModem.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Modems Popup Menu
    if (e.getSource() == modemsPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut8 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut8 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut8 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Modems -> Install New Modem -> Back
    if (e.getSource() == modemsInstallNewModemButton[0]) {

    }
    // Adding Functionality to Modems -> Install New Modem -> Next
    if (e.getSource() == modemsInstallNewModemButton[1]) {

    }
    // Adding Functionality to Modems -> Install New Modem -> Cancel
    if (e.getSource() == modemsInstallNewModemButton[2]) {
      modemsInstallNewModem.dispose();
      modemsInstallNewModemCheckBox.setSelected(false);
    }
    // Adding Functionality to Open in Mouse Popup Menu
    if (e.getSource() == mousePopupMenuItem[0]) {
      mouseProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Mouse Popup Menu
    if (e.getSource() == mousePopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut9 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut9 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut9 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Mouse Properties -> OK
    if (e.getSource() == mousePropertiesButton[0]) {
      mouseProperties.dispose();
      mousePropertiesSaveScheme.dispose();
      mousePropertiesChange.dispose();
      mousePropertiesTabbedPane.setSelectedIndex(0);
      mousePropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Mouse Properties -> Cancel
    if (e.getSource() == mousePropertiesButton[1]) {
      mouseProperties.dispose();
      mousePropertiesSaveScheme.dispose();
      mousePropertiesChange.dispose();
      mousePropertiesTabbedPane.setSelectedIndex(0);
      mousePropertiesRadioButton[0].setSelected(true);
      mousePropertiesRadioButton[0].setSelected(false);
      mousePropertiesComboBox.setSelectedIndex(0);
      mousePropertiesCheckBox.setSelected(false);
      mousePropertiesButton[2].setEnabled(false);

    }
    // Adding Functionality to Mouse Properties -> Apply
    if (e.getSource() == mousePropertiesButton[2]) {
      mousePropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Mouse Properties -> Buttons -> Right-handed
    if (mousePropertiesRadioButton[0].isSelected() == true) {
      if (mousePropertiesLabel[6].getParent() != null) {
        mousePropertiesPanel[1].remove(mousePropertiesLabel[6]);
        mousePropertiesPanel[1].add(mousePropertiesLabel[5]);
        mousePropertiesPanel[1].revalidate();
        mousePropertiesPanel[1].repaint();
      }
    }
    // Adding Functionality to Mouse Properties -> Buttons -> Left-handed
    if (mousePropertiesRadioButton[1].isSelected() == true) {
      if (mousePropertiesLabel[5].getParent() != null) {
        mousePropertiesPanel[1].remove(mousePropertiesLabel[5]);
        mousePropertiesPanel[1].add(mousePropertiesLabel[6]);
        mousePropertiesPanel[1].revalidate();
        mousePropertiesPanel[1].repaint();
      }
    }
    // Adding Functionality to Mouse Properties -> Pointers -> Save As...
    if (e.getSource() == mousePropertiesButton[3]) {
      mousePropertiesSaveScheme.setVisible(true);
    }
    // Adding Functionality to Mouse Properties -> Pointers -> Save As... -> Save
    // Scheme -> Cancel
    if (e.getSource() == mousePropertiesDialogButton[1]) {
      mousePropertiesSaveScheme.dispose();
    }
    // Adding Functionality to Mouse Properties -> Pointers -> Browse
    if (e.getSource() == mousePropertiesButton[4]) {

    }
    // Adding Functionality to Mouse Properties -> Motion -> Show pointer trails
    if (mousePropertiesCheckBox.isSelected() == true) {

    }
    // Adding Functionality to Mouse Properties -> General -> Change...
    if (e.getSource() == mousePropertiesButton[7]) {
      mousePropertiesChange.setVisible(true);
    }
    // Adding Functionality to Open in Multimedia Popup Menu
    if (e.getSource() == multimediaPopupMenuItem[0]) {
      multimediaProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Multimedia Popup Menu
    if (e.getSource() == multimediaPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut10 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut10 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut10 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to OK in Multimedia Properties
    if (e.getSource() == multimediaPropertiesButton[0]) {
      multimediaProperties.dispose();
      multimediaPropertiesButton[2].setEnabled(false);
      multimediaPropertiesTabbedPane.setSelectedIndex(0);
    }
    // Adding Functionality to Cancel in Multimedia Properties
    if (e.getSource() == multimediaPropertiesButton[1]) {
      multimediaProperties.dispose();
      multimediaPropertiesTabbedPane.setSelectedIndex(0);
      for (int i = 0; i < 3; i++) {
        multimediaPropertiesComboBox[i].setSelectedIndex(1);
      }
      multimediaPropertiesCheckBox[0].setSelected(true);
      multimediaPropertiesCheckBox[1].setSelected(false);
      multimediaPropertiesRadioButton[0].setSelected(true);
      multimediaPropertiesRadioButton[1].setSelected(false);
      multimediaPropertiesRadioButton[2].setSelected(true);
      multimediaPropertiesRadioButton[3].setSelected(false);
      multimediaPropertiesTextField.setEnabled(true);
      multimediaPropertiesList.setEnabled(true);
      multimediaPropertiesComboBox[4].setEnabled(false);
      multimediaPropertiesButton[2].setEnabled(false);
      multimediaPropertiesButton[4].setEnabled(false);
      multimediaPropertiesComboBox[3].setSelectedIndex(0);
      for (int i = 12; i < 18; i++) {
        multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
        multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[11]);
        multimediaPropertiesPanel[2].revalidate();
        multimediaPropertiesPanel[2].repaint();
      }
    }
    // Adding Functionality to Apply in Multimedia Properties
    if (e.getSource() == multimediaPropertiesButton[2]) {
      multimediaPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Multimedia Properties -> Video -> Window
    if (multimediaPropertiesRadioButton[0].isSelected() == true) {
      multimediaPropertiesComboBox[3].setBackground(white);
      multimediaPropertiesComboBox[3].setEnabled(true);
      for (int i = 11; i < 18; i++) {
        if (multimediaPropertiesComboBox[3].getSelectedIndex() == i - 11) {
          multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[17]);
          multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[i]);
          multimediaPropertiesPanel[2].revalidate();
          multimediaPropertiesPanel[2].repaint();
        }
      }
    }
    // Adding Functionality to Multimedia Properties -> Video -> Full screen
    if (multimediaPropertiesRadioButton[1].isSelected() == true) {
      multimediaPropertiesComboBox[3].setBackground(gray);
      multimediaPropertiesComboBox[3].setEnabled(false);
      for (int i = 11; i < 18; i++) {
        multimediaPropertiesPanel[2].remove(multimediaPropertiesLabel[i]);
        multimediaPropertiesPanel[2].add(multimediaPropertiesLabel[17]);
        multimediaPropertiesPanel[2].revalidate();
        multimediaPropertiesPanel[2].repaint();
      }
    }
    // Adding Functionality to Multimedia Properties -> MIDI -> Single instrument
    if (multimediaPropertiesRadioButton[2].isSelected() == true) {
      multimediaPropertiesTextField.setBackground(gray);
      multimediaPropertiesList.setBackground(white);
      multimediaPropertiesTextField.setEnabled(true);
      multimediaPropertiesList.setEnabled(true);
      multimediaPropertiesLabel[20].setEnabled(false);
      multimediaPropertiesComboBox[4].setBackground(gray);
      multimediaPropertiesComboBox[4].setEnabled(false);
      multimediaPropertiesButton[4].setEnabled(false);
    }
    // Adding Functionality to Multimedia Properties -> MIDI -> Custom configuration
    if (multimediaPropertiesRadioButton[3].isSelected() == true) {
      multimediaPropertiesTextField.setBackground(gray);
      multimediaPropertiesList.setBackground(gray);
      multimediaPropertiesTextField.setEnabled(false);
      multimediaPropertiesList.setEnabled(false);
      multimediaPropertiesLabel[20].setEnabled(true);
      multimediaPropertiesComboBox[4].setBackground(white);
      multimediaPropertiesComboBox[4].setEnabled(true);
      multimediaPropertiesButton[4].setEnabled(true);
    }
    // Adding Functionality to Add... in Network
    if (e.getSource() == controlPanelNetworkButton[0]) {

    }
    // Adding Functionality to Remove in Network
    if (e.getSource() == controlPanelNetworkButton[1]) {

    }
    // Adding Functionality to Properties in Network
    if (e.getSource() == controlPanelNetworkButton[2]) {

    }
    // Adding Functionality to File and Print Sharing... in Network
    if (e.getSource() == controlPanelNetworkButton[3]) {

    }
    // Adding Functionality to OK in Network
    if (e.getSource() == controlPanelNetworkButton[4]) {
      controlPanelNetwork.dispose();
      if (controlPanelNetworkLabel[3].getParent() != null) {
        controlPanelNetworkPanel[1].remove(controlPanelNetworkLabel[3]);
        controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[2]);
        controlPanelNetworkPanel[1].revalidate();
        controlPanelNetworkPanel[1].repaint();
      }
    }
    // Adding Functionality to Cancel in Network
    if (e.getSource() == controlPanelNetworkButton[5]) {
      controlPanelNetwork.dispose();
      if (controlPanelNetworkLabel[3].getParent() != null) {
        controlPanelNetworkPanel[1].remove(controlPanelNetworkLabel[3]);
        controlPanelNetworkPanel[1].add(controlPanelNetworkLabel[2]);
        controlPanelNetworkPanel[1].revalidate();
        controlPanelNetworkPanel[1].repaint();
      }
    }
    // Adding Functionality to Open in Network Popup Menu
    if (e.getSource() == networkPopupMenuItem[0]) {
      controlPanelNetwork.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Network Popup Menu
    if (e.getSource() == networkPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut11 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut11 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut11 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Passwords Popup Menu
    if (e.getSource() == passwordsPopupMenuItem[0]) {
      passwordsProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Passwords Popup Menu
    if (e.getSource() == passwordsPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut12 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut12 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut12 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Passwords Properties -> User Profiles -> All users
    // ...
    if (passwordsPropertiesRadioButton[0].isSelected() == true) {
      passwordsPropertiesLabel.setEnabled(false);
      for (int i = 0; i < 2; i++) {
        passwordsPropertiesCheckBox[i].setEnabled(false);
      }
    }
    // Adding Functionality to Passwords Properties -> User Profiles -> Users can
    // ...
    if (passwordsPropertiesRadioButton[1].isSelected() == true) {
      passwordsPropertiesLabel.setEnabled(true);
      for (int i = 0; i < 2; i++) {
        passwordsPropertiesCheckBox[i].setEnabled(true);;
      }
      passwordsPropertiesCheckBox[0].setSelected(true);
    }
    // Adding Functionality to Passwords Properties -> User Profiles -> Include
    // desktop ...
    if (passwordsPropertiesCheckBox[0].isSelected() == true) {

    }
    // Adding Functionality to Passwords Properties -> User Profiles -> Include
    // Start Menu ...
    if (passwordsPropertiesCheckBox[0].isSelected() == true) {

    }
    // Adding Functionality to Passwords Properties -> OK
    if (e.getSource() == passwordsPropertiesButton[0]) {
      passwordsProperties.dispose();
    }
    // Adding Functionality to Passwords Properties -> Cancel
    if (e.getSource() == passwordsPropertiesButton[1]) {
      passwordsProperties.dispose();
      passwordsPropertiesRadioButton[0].setSelected(true);
      passwordsPropertiesRadioButton[1].setSelected(false);
      passwordsPropertiesLabel.setEnabled(false);
      for (int i = 0; i < 2; i++) {
        passwordsPropertiesCheckBox[i].setEnabled(false);
        passwordsPropertiesCheckBox[i].setSelected(false);
      }
    }
    // Adding Functionality to Open in Control Panel Printers Popup Menu
    if (e.getSource() == controlPanelPrintersPopupMenuItem[0]) {
      controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      try {
        Thread.sleep(200);
      } catch (InterruptedException ex) {
        ex.printStackTrace();
      }
      controlPanelPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      printersOpen.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Control Panel Printers Popup Menu
    if (e.getSource() == controlPanelPrintersPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut13 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut13 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut13 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to End Capture... in Printers Open Popup Menu
    if (e.getSource() == printersOpenPopupMenuItem[10]) {
      if (controlPanelOpen.isVisible() == true) {
        controlPanelOpen.setAlwaysOnTop(false);
      }
      printersOpen.setAlwaysOnTop(false);
      int responseWindowsNetworking = JOptionPane.showOptionDialog(null,
        "There are no network printers currently connected.", "Windows Networking",
        JOptionPane.INFORMATION_MESSAGE, 0, informationSign, OK, OK[0]);
      if (responseWindowsNetworking == 0) {
        controlPanelOpen.setAlwaysOnTop(true);
        printersOpen.setAlwaysOnTop(true);
      } else {
        controlPanelOpen.setAlwaysOnTop(true);
        printersOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Open in Add Printer Popup Menu
    if (e.getSource() == addPrinterPopupMenuItem[0]) {
      addPrinterWizard.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Add Printer Popup Menu
    if (e.getSource() == addPrinterPopupMenuItem[1]) {
      if (controlPanelOpen.isVisible() == true) {
        controlPanelOpen.setAlwaysOnTop(false);
      }
      printersOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut17 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut17 == 0) {
        controlPanelOpen.setAlwaysOnTop(true);
        printersOpen.setAlwaysOnTop(true);
      } else {
        controlPanelOpen.setAlwaysOnTop(true);
        printersOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Printers -> Add Printer -> <Back at Click the
    // manufacturer and model of your printer...
    if (e.getSource() == addPrinterWizardButton[0] && addPrinterWizardLabel[3].getParent() != null) {
      for (int i = 0; i < 2; i++) {
        addPrinterWizard.remove(addPrinterWizardLabel[3]);
        addPrinterWizard.remove(addPrinterWizardScrollPane[i]);
        addPrinterWizard.remove(addPrinterWizardButton[3]);
        addPrinterWizard.add(addPrinterWizardLabel[i]);
        addPrinterWizard.revalidate();
        addPrinterWizard.repaint();
      }
      addPrinterWizardButton[0].setEnabled(false);
    }
    // Adding Functionality to Printers ->Add Printer -> Next> at This wizard will
    // help you to install your printer ...
    if (e.getSource() == addPrinterWizardButton[1] && addPrinterWizardLabel[1].getParent() != null) {
      for (int i = 0; i < 2; i++) {
        addPrinterWizard.remove(addPrinterWizardLabel[i]);
        addPrinterWizard.add(addPrinterWizardLabel[3]);
        addPrinterWizard.add(addPrinterWizardScrollPane[i]);
        addPrinterWizard.add(addPrinterWizardButton[3]);
        addPrinterWizard.revalidate();
        addPrinterWizard.repaint();
      }
      addPrinterWizardButton[0].setEnabled(true);
    }
    // Adding Functionality to Printers ->Add Printer -> Cancel
    if (e.getSource() == addPrinterWizardButton[2]) {
      addPrinterWizard.dispose();
      if (addPrinterWizardLabel[3].getParent() != null) {
        for (int i = 0; i < 2; i++) {
          addPrinterWizard.remove(addPrinterWizardLabel[3]);
          addPrinterWizard.remove(addPrinterWizardScrollPane[i]);
          addPrinterWizard.remove(addPrinterWizardButton[3]);
          addPrinterWizard.add(addPrinterWizardLabel[i]);
          addPrinterWizard.revalidate();
          addPrinterWizard.repaint();
        }
      }
    }
    // Adding Functionality to Open in Regional Settings Popup Menu
    if (e.getSource() == regionalSettingsPopupMenuItem[0]) {
      regionalSettingsProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Regional Settings Popup Menu
    if (e.getSource() == regionalSettingsPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut14 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut14 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut14 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to OK in Regional Settings Properties
    if (e.getSource() == regionalSettingsPropertiesButton[0]) {
      regionalSettingsProperties.dispose();
      regionalSettingsPropertiesTabbedPane.setSelectedIndex(0);
      regionalSettingsPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Cancel in Regional Settings Properties
    if (e.getSource() == regionalSettingsPropertiesButton[1]) {
      regionalSettingsProperties.dispose();
      regionalSettingsPropertiesTabbedPane.setSelectedIndex(0);
      regionalSettingsPropertiesButton[2].setEnabled(false);
      regionalSettingsPropertiesComboBox[0].setSelectedIndex(14);
      regionalSettingsPropertiesComboBox[1].setSelectedIndex(0);
      regionalSettingsPropertiesComboBox[2].setSelectedIndex(2);
      regionalSettingsPropertiesComboBox[3].setSelectedIndex(0);
      regionalSettingsPropertiesComboBox[4].setSelectedIndex(3);
      regionalSettingsPropertiesComboBox[5].setSelectedIndex(0);
      for (int i = 6; i < 9; i++) {
        regionalSettingsPropertiesComboBox[i].setSelectedIndex(1);
      }
      for (int i = 9; i < 14; i++) {
        regionalSettingsPropertiesComboBox[i].setSelectedIndex(0);
      }
      regionalSettingsPropertiesComboBox[14].setSelectedIndex(2);
      regionalSettingsPropertiesComboBox[15].setSelectedIndex(0);
      regionalSettingsPropertiesComboBox[16].setSelectedIndex(3);
      for (int i = 17; i < 25; i++) {
        if (i == 21) {
          continue;
        }
        regionalSettingsPropertiesComboBox[i].setSelectedIndex(0);
      }
    }
    // Adding Functionality to Apply in Regional Settings Properties
    if (e.getSource() == regionalSettingsPropertiesButton[2]) {
      regionalSettingsPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Open in Sounds Popup Menu
    if (e.getSource() == soundsPopupMenuItem[0]) {
      soundsProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in Sounds Popup Menu
    if (e.getSource() == soundsPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut15 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut15 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut15 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to Sounds Properties -> OK
    if (e.getSource() == soundsPropertiesButton[0]) {
      soundsProperties.dispose();
      soundsPropertiesEventsList.setSelectedIndex(0);
      for (int i = 7; i < 9; i++) {
        soundsPropertiesButton[i].setEnabled(false);
      }
      soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
      soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[3]);
      if (soundsPropertiesLabel[6].getParent() != null) {
        soundsPropertiesPanel[1].remove(soundsPropertiesLabel[6]);
        soundsPropertiesPanel[1].add(soundsPropertiesLabel[5]);
        soundsPropertiesPanel[1].revalidate();
        soundsPropertiesPanel[1].repaint();
      }
    }
    // Adding Functionality to Sounds Properties -> Cancel
    if (e.getSource() == soundsPropertiesButton[1]) {
      soundsProperties.dispose();
      soundsPropertiesEventsList.setSelectedIndex(0);
      for (int i = 2; i < 4; i++) {
        soundsPropertiesButton[i].setEnabled(false);
      }
      for (int i = 7; i < 9; i++) {
        soundsPropertiesButton[i].setEnabled(false);
      }
      soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
      soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[3]);
      for (int i = 0; i < 2; i++) {
        soundsPropertiesComboBox[i].setSelectedIndex(0);
      }
      soundsPropertiesComboBox[0].setEnabled(false);
      soundsPropertiesLabel[3].setEnabled(false);
      if (soundsPropertiesLabel[6].getParent() != null) {
        soundsPropertiesPanel[1].remove(soundsPropertiesLabel[6]);
        soundsPropertiesPanel[1].add(soundsPropertiesLabel[5]);
        soundsPropertiesPanel[1].revalidate();
        soundsPropertiesPanel[1].repaint();
      }
    }
    // Adding Functionality to Sounds Properties -> Apply
    if (e.getSource() == soundsPropertiesButton[2]) {
      soundsPropertiesButton[2].setEnabled(false);
    }
    // Adding Functionality to Sounds Properties -> Sounds -> Browse...
    if (e.getSource() == soundsPropertiesButton[3]) {

    }
    // Adding Functionality to Sounds Properties -> Sounds -> Details...
    if (e.getSource() == soundsPropertiesButton[4]) {

    }
    // Adding Functionality to Sounds Properties -> Sounds -> Save As...
    if (e.getSource() == soundsPropertiesButton[5]) {

    }
    // Adding Functionality to Sounds Properties -> Sounds -> Delete
    if (e.getSource() == soundsPropertiesButton[6]) {

    }
    // Adding Functionality to Sounds Properties -> Sounds -> Play Button
    if (e.getSource() == soundsPropertiesButton[7] && soundsPropertiesComboBox[0].getSelectedIndex() == 1 &&
      soundsPropertiesButton[7].getIcon() == soundsPropertiesIcon[2]) {
      startupURL = getClass().getResource("Startup.wav");
      startupAudioStream = null;
      try {
        startupAudioStream = AudioSystem.getAudioInputStream(startupURL);
      } catch (UnsupportedAudioFileException | IOException ex) {
        ex.printStackTrace();
      }

      try {
        startupClip = AudioSystem.getClip();
      } catch (LineUnavailableException ex) {
        ex.printStackTrace();
      }

      try {
        startupClip.open(startupAudioStream);
      } catch (LineUnavailableException | IOException ex) {
        ex.printStackTrace();
      }
      startupClip.start();
      startupClip.addLineListener(new LineListener() {
        public void update(LineEvent event) {
          if (!startupClip.isRunning()) {
            soundsPropertiesButton[7].setEnabled(true);
            soundsPropertiesButton[8].setEnabled(false);
            soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[2]);
            soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[3]);
          }
        }
      });
      soundsPropertiesButton[7].setEnabled(false);
      soundsPropertiesButton[8].setEnabled(true);
      soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[1]);
      soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[4]);
    }
    // Adding Functionality to Sounds Properties -> Sounds -> Stop Button
    if (e.getSource() == soundsPropertiesButton[8] &&
      soundsPropertiesButton[8].getIcon() == soundsPropertiesIcon[4]) {
      startupClip.stop();
      soundsPropertiesButton[7].setEnabled(true);
      soundsPropertiesButton[8].setEnabled(false);
      soundsPropertiesButton[7].setIcon(soundsPropertiesIcon[2]);
      soundsPropertiesButton[8].setIcon(soundsPropertiesIcon[3]);
    }
    // Adding Functionality to Open in System Popup Menu
    if (e.getSource() == systemPopupMenuItem[0]) {
      controlPanelSystemProperties.setVisible(true);
    }
    // Adding Functionality to Create Shortcut in System Popup Menu
    if (e.getSource() == systemPopupMenuItem[1]) {
      myComputerOpen.setAlwaysOnTop(false);
      controlPanelOpen.setAlwaysOnTop(false);
      UIManager.put("OptionPane.yesButtonText", "Yes");
      UIManager.put("OptionPane.noButtonText", "No");
      int responseCreateShortcut16 = JOptionPane.showConfirmDialog(null,
        "Windows cannot create a shortcut here.\n" +
        "Do you want the shortcut to be placed on the desktop instead?",
        "Shortcut", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
      if (responseCreateShortcut16 == JOptionPane.YES_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      } else if (responseCreateShortcut16 == JOptionPane.NO_OPTION) {
        myComputerOpen.setAlwaysOnTop(true);
        controlPanelOpen.setAlwaysOnTop(true);
      }
    }
    // Adding Functionality to OK in System Popup Menu
    if (e.getSource() == controlPanelSystemPropertiesButton[0]) {
      controlPanelSystemProperties.dispose();
      controlPanelSystemPropertiesTabbedPane.setSelectedIndex(0);
      for (int i = 0; i < 2; i++) {
        controlPanelSystemPropertiesTree[i].setSelectionRow(0);
      }
      controlPanelSystemPropertiesList[1].clearSelection();
      controlPanelSystemPropertiesButton[9].setEnabled(false);
    }
    // Adding Functionality to Cancel in System Popup Menu
    if (e.getSource() == controlPanelSystemPropertiesButton[1]) {
      controlPanelSystemProperties.dispose();
      controlPanelSystemPropertiesTabbedPane.setSelectedIndex(0);
      controlPanelSystemPropertiesRadioButton[0].setSelected(true);
      controlPanelSystemPropertiesRadioButton[1].setSelected(false);
      if (controlPanelSystemPropertiesTree[1].getParent() != null) {
        controlPanelSystemPropertiesPanel[2].remove(controlPanelSystemPropertiesScrollPane[1]);
        controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesScrollPane[0]);
        controlPanelSystemPropertiesPanel[2].revalidate();
        controlPanelSystemPropertiesPanel[2].repaint();
      }
      for (int i = 0; i < 2; i++) {
        controlPanelSystemPropertiesTree[i].setSelectionRow(0);
      }
      controlPanelSystemPropertiesList[1].clearSelection();
      controlPanelSystemPropertiesButton[9].setEnabled(false);
    }
    // Adding Functionality to System Properties -> Device Manager -> View devices
    // by type
    if (e.getSource() == controlPanelSystemPropertiesRadioButton[0]) {
      if (controlPanelSystemPropertiesTree[1].getParent() != null) {
        controlPanelSystemPropertiesPanel[2].remove(controlPanelSystemPropertiesScrollPane[1]);
        controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesScrollPane[0]);
        controlPanelSystemPropertiesPanel[2].revalidate();
        controlPanelSystemPropertiesPanel[2].repaint();
      }
    }
    // Adding Functionality to System Properties -> Device Manager -> View devices
    // by connection
    if (e.getSource() == controlPanelSystemPropertiesRadioButton[1]) {
      if (controlPanelSystemPropertiesTree[0].getParent() != null) {
        controlPanelSystemPropertiesPanel[2].remove(controlPanelSystemPropertiesScrollPane[0]);
        controlPanelSystemPropertiesPanel[2].add(controlPanelSystemPropertiesScrollPane[1]);
        controlPanelSystemPropertiesPanel[2].revalidate();
        controlPanelSystemPropertiesPanel[2].repaint();
      }
    }
    // Adding Functionality to System Properties -> Device Manager -> Properties

    // Adding Functionality to System Properties -> Device Manager -> Refresh

    // Adding Functionality to System Properties -> Device Manager -> Remove

    // Adding Functionality to System Properties -> Device Manager -> Print...

    // Adding Functionality to Restart the computer? in Shut Down Windows When Yes
    // is Selected
    if (e.getSource() == shutDownWindowsButton[0] && shutDownWindowsRadioButton[1].isSelected()) {
      shutDownWindowsDialog.dispose();
      EventQueue.invokeLater(new Runnable() {
        public void run() {
          disposeEveryWindowMethod();
          bootingMethodThread.start();
          new Windows95Desktop();
        }
      });
    }
  }

  @Override
  public void keyTyped(KeyEvent e) {

  }

  @Override
  public void keyPressed(KeyEvent e) {

  }

  @Override
  public void keyReleased(KeyEvent e) {

  }
  public void blueScreenOfDeathMethod() {
    BSOD_AudioStream = new AudioInputStream[3];
    BSOD_Clip = new Clip[3];
    BSOD_Sound_URL = new URL[3];
    // BSOD_Freeze Sound File
    BSOD_Sound_URL[0] = getClass().getResource("BSOD_Freeze.wav");
    BSOD_AudioStream[0] = null;
    try {
      BSOD_AudioStream[0] = AudioSystem.getAudioInputStream(BSOD_Sound_URL[0]);
    } catch (UnsupportedAudioFileException | IOException e) {
      e.printStackTrace();
    }
    try {
      BSOD_Clip[0] = AudioSystem.getClip();
    } catch (LineUnavailableException e) {
      e.printStackTrace();
    }

    try {
      BSOD_Clip[0].open(BSOD_AudioStream[0]);
    } catch (LineUnavailableException | IOException e) {
      e.printStackTrace();
    }
    // BSOD_Shrill Sound File
    BSOD_Sound_URL[1] = getClass().getResource("BSOD_Shrill.wav");
    BSOD_AudioStream[1] = null;
    try {
      BSOD_AudioStream[1] = AudioSystem.getAudioInputStream(BSOD_Sound_URL[1]);
    } catch (UnsupportedAudioFileException | IOException e) {
      e.printStackTrace();
    }
    try {
      BSOD_Clip[1] = AudioSystem.getClip();
    } catch (LineUnavailableException e) {
      e.printStackTrace();
    }

    try {
      BSOD_Clip[1].open(BSOD_AudioStream[1]);
    } catch (LineUnavailableException | IOException e) {
      e.printStackTrace();
    }
    // Illegal Operation Sound File
    BSOD_Sound_URL[2] = getClass().getResource("IllegalOperation.wav");
    BSOD_AudioStream[2] = null;
    try {
      BSOD_AudioStream[2] = AudioSystem.getAudioInputStream(BSOD_Sound_URL[2]);
    } catch (UnsupportedAudioFileException | IOException e) {
      e.printStackTrace();
    }
    try {
      BSOD_Clip[2] = AudioSystem.getClip();
    } catch (LineUnavailableException e) {
      e.printStackTrace();
    }
    try {
      BSOD_Clip[2].open(BSOD_AudioStream[2]);
    } catch (LineUnavailableException | IOException e) {
      e.printStackTrace();
    }
    BSOD_Clip[2].start();
    try {
      Thread.sleep(1000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    UIManager.put("OptionPane.yesButtonText", "OK");
    UIManager.put("OptionPane.noButtonText", "Cancel");
    JOptionPane.showConfirmDialog(null,
      "Windows has performed an illegal operation and will be shut down.\n" + "" +
      "Delete offensive operating system, Windows and try again.",
      "Fatal Error", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, crossSign);
    BSOD_Screen_URL = this.getClass().getClassLoader().getResource("BSOD_Screen.gif");
    BSOD_Screen = new JLabel(new ImageIcon(BSOD_Screen_URL));
    try {
      Thread.sleep(2000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    BSOD_Clip[1].loop(Clip.LOOP_CONTINUOUSLY);
    BSOD_ScreenColor = new Color(2, 9, 177);
    disposeEveryWindowMethod();
    mainFrame.getContentPane().setBackground(BSOD_ScreenColor);
    mainFrame.remove(desktop);
    mainFrame.add(BSOD_Screen);
    mainFrame.revalidate();
    mainFrame.repaint();
    mainFrame.addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        for (int i = 0; i < 100000; i++)
          if (e.getKeyCode() == i) {
            try {
              Thread.sleep(1000);
            } catch (InterruptedException ex) {
              ex.printStackTrace();
            }
            aProblemHasBeenDetectedScreen = new JLabel(new ImageIcon(
              getClass().getClassLoader().getResource("AProblemHasBeenDetectedScreen.png")));
            aProblemHasBeenDetectedScreenColor = new Color(0, 0, 132);
            mainFrame.getContentPane().setBackground(aProblemHasBeenDetectedScreenColor);
            mainFrame.remove(BSOD_Screen);
            mainFrame.add(aProblemHasBeenDetectedScreen);
            mainFrame.revalidate();
            mainFrame.repaint();
            BSOD_Clip[1].stop();
          }
      }
    });
    mainFrame.getContentPane().setCursor(blankCursor);
    mainFrame.setResizable(false);
  }
  public void musicMethod() {
    AudioInputStream[] music_AudioStream = new AudioInputStream[3];
    Clip[] music_Clip = new Clip[3];
    URL[] music_Sound_URL = new URL[3];
    // music_Freeze Sound File
    music_Sound_URL[0] = getClass().getResource("Kanye West - Stronger (Instrumental)[Bass Boosted]-(1080p60).wav");
    music_AudioStream[0] = null;
    try {
      music_AudioStream[0] = AudioSystem.getAudioInputStream(music_Sound_URL[0]);
    } catch (UnsupportedAudioFileException | IOException e) {
      e.printStackTrace();
    }
    try {
      music_Clip[0] = AudioSystem.getClip();
    } catch (LineUnavailableException e) {
      e.printStackTrace();
    }

    try {
      music_Clip[0].open(music_AudioStream[0]);
    } catch (LineUnavailableException | IOException e) {
      e.printStackTrace();
    }
    mainFrame.addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        if (e.getKeyChar() == 'M' || e.getKeyChar() == 'm') {
          music_Clip[0].start();
        } else if (e.getKeyChar() == 'R' || e.getKeyChar() == 'r') {
          music_Clip[0].setMicrosecondPosition(0);
        } else if (e.getKeyChar() == 'S' || e.getKeyChar() == 's') {
          music_Clip[0].stop();
        }
      }
    });
  }
  public void douweiMethod() {
    AudioInputStream[] douwei_AudioStream = new AudioInputStream[9];
    Clip[] douwei_Clip = new Clip[9];
    URL[] douwei_Sound_URL = new URL[9];
    // douwei_Freeze Sound File
    for (int i = 0; i < 9; i++) {
        douwei_Sound_URL[i] = getClass().getResource("Douwei"+String.valueOf(i+1)+".wav");
        douwei_AudioStream[i] = null;
      try {
        douwei_AudioStream[i] = AudioSystem.getAudioInputStream(douwei_Sound_URL[i]);
      } catch (UnsupportedAudioFileException | IOException e) {
        e.printStackTrace();
      }
      try {
        douwei_Clip[i] = AudioSystem.getClip();
      } catch (LineUnavailableException e) {
        e.printStackTrace();
      }
      try {
        douwei_Clip[i].open(douwei_AudioStream[i]);
      } catch (LineUnavailableException | IOException e) {
        e.printStackTrace();
      }
    }
    mainFrame.addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        if (e.getKeyChar() == '1') {
          douwei_Clip[0].setMicrosecondPosition(0);
          douwei_Clip[0].start();
          for (int i = 1; i < 9; i++) {
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '2') {
          douwei_Clip[1].setMicrosecondPosition(0);
          douwei_Clip[1].start();
          for (int i = 0; i < 9; i++) {
            if (i == 1) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '3') {
          douwei_Clip[2].setMicrosecondPosition(0);
          douwei_Clip[2].start();
          for (int i = 0; i < 9; i++) {
            if (i == 2) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '4') {
          douwei_Clip[3].setMicrosecondPosition(0);
          douwei_Clip[3].start();
          for (int i = 0; i < 9; i++) {
            if (i == 3) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '5') {
          douwei_Clip[4].setMicrosecondPosition(0);
          douwei_Clip[4].start();
          for (int i = 0; i < 9; i++) {
            if (i == 4) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '6') {
          douwei_Clip[5].setMicrosecondPosition(0);
          douwei_Clip[5].start();
          for (int i = 0; i < 9; i++) {
            if (i == 5) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '7') {
          douwei_Clip[6].setMicrosecondPosition(0);
          douwei_Clip[6].start();
          for (int i = 0; i < 9; i++) {
            if (i == 6) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '8') {
          douwei_Clip[7].setMicrosecondPosition(0);
          douwei_Clip[7].start();
          for (int i = 0; i < 9; i++) {
            if (i == 7) {
              continue;
            }
            douwei_Clip[i].stop();
          }
        } else if (e.getKeyChar() == '9') {
          douwei_Clip[8].setMicrosecondPosition(0);
          douwei_Clip[8].start();
          for (int i = 0; i < 8; i++) {
            douwei_Clip[i].stop();
          }
        }
        else if (e.getKeyChar() == 'S' || e.getKeyChar()=='s') {
            for (int i = 0; i < 9; i++) {
              douwei_Clip[i].stop();
            }
          }
      }
    });
  }
  public void F8EnterAChoiceMethod() {
    F8EnterAChoiceURL = new URL[8];
    F8EnterAChoiceLabel = new JLabel[8];
    for (int i = 1; i < 8; i++) {
      F8EnterAChoiceURL[i] = this.getClass().getClassLoader()
        .getResource("F8EnterAChoice" + String.valueOf(i) + ".gif");
      F8EnterAChoiceLabel[i] = new JLabel(new ImageIcon(F8EnterAChoiceURL[i]));
    }
    if (bootingScreen.getParent() != null) {
      mainFrame.remove(bootingScreen);
      mainFrame.add(F8EnterAChoiceLabel[1]);
      mainFrame.revalidate();
      mainFrame.repaint();
    }
    // Selecting Choices
    mainFrame.getContentPane().setBackground(Color.BLACK);
    mainFrame.addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        // Pressing ↑
        if (e.getKeyCode() == 38) {
          if (F8EnterAChoiceLabel[2].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[2]);
            mainFrame.add(F8EnterAChoiceLabel[1]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[3].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[3]);
            mainFrame.add(F8EnterAChoiceLabel[2]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[4].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[4]);
            mainFrame.add(F8EnterAChoiceLabel[3]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[5].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[5]);
            mainFrame.add(F8EnterAChoiceLabel[4]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[6].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[6]);
            mainFrame.add(F8EnterAChoiceLabel[5]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[7].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[7]);
            mainFrame.add(F8EnterAChoiceLabel[6]);
            mainFrame.revalidate();
            mainFrame.repaint();
          }
        }
        // Pressing ↓
        if (e.getKeyCode() == 40) {
          if (F8EnterAChoiceLabel[1].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[1]);
            mainFrame.add(F8EnterAChoiceLabel[2]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[2].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[2]);
            mainFrame.add(F8EnterAChoiceLabel[3]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[3].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[3]);
            mainFrame.add(F8EnterAChoiceLabel[4]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[4].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[4]);
            mainFrame.add(F8EnterAChoiceLabel[5]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[5].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[5]);
            mainFrame.add(F8EnterAChoiceLabel[6]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (F8EnterAChoiceLabel[6].getParent() != null) {
            mainFrame.remove(F8EnterAChoiceLabel[6]);
            mainFrame.add(F8EnterAChoiceLabel[7]);
            mainFrame.revalidate();
            mainFrame.repaint();
          }
        }
        // Pressing 1
        if (e.getKeyCode() == 49) {
          for (int i = 2; i < 8; i++) {
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[1]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing 2
        else if (e.getKeyCode() == 50) {
          for (int i = 1; i < 8; i++) {
            if (i == 2) {
              continue;
            }
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[2]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing 3
        else if (e.getKeyCode() == 51) {
          for (int i = 1; i < 8; i++) {
            if (i == 3) {
              continue;
            }
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[3]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing 4
        else if (e.getKeyCode() == 52) {
          for (int i = 1; i < 8; i++) {
            if (i == 4) {
              continue;
            }
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[4]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing 5
        else if (e.getKeyCode() == 53) {
          for (int i = 1; i < 8; i++) {
            if (i == 5) {
              continue;
            }
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[5]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing 6
        else if (e.getKeyCode() == 54) {
          for (int i = 1; i < 8; i++) {
            if (i == 6) {
              continue;
            }
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[6]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing 7
        else if (e.getKeyCode() == 55) {
          for (int i = 1; i < 7; i++) {
            mainFrame.remove(F8EnterAChoiceLabel[i]);
          }
          mainFrame.add(F8EnterAChoiceLabel[7]);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
        // Pressing Enter Key
        if (e.getKeyCode() == 10) {
          if (F8EnterAChoiceLabel[1].getParent() != null) {
            normalMethod();
          } else if (F8EnterAChoiceLabel[2].getParent() != null) {
            loggedBootlogtxtMethod();
          } else if (F8EnterAChoiceLabel[3].getParent() != null) {
            safeModeMethod();
          } else if (F8EnterAChoiceLabel[4].getParent() != null) {
            stepByStepConfirmationMethod();
          } else if (F8EnterAChoiceLabel[5].getParent() != null) {
            commandPromptOnlyMethod();
          } else if (F8EnterAChoiceLabel[6].getParent() != null) {
            safeModeCommandPromptOnlyMethod();
          } else if (F8EnterAChoiceLabel[7].getParent() != null) {
            previousVersionOfMSDOSMethod();
          }
        }
        for (int i = 1; i < 8; i++) {
          // F5=Safe Mode
          if (F8EnterAChoiceLabel[i].getParent() != null && e.getKeyCode() == 116) {
            mainFrame.remove(F8EnterAChoiceLabel[i]);
            safeModeMethod();
          }
          boolean[] keys = new boolean[120];
          // Shift+F5=Command Prompt
          F8StartupMenuXShiftF5URL = new URL[8];
          F8StartupMenuXShiftF5Label = new JLabel[8];
          F8StartupMenuXShiftF5URL[i] = this.getClass().getClassLoader()
            .getResource("F8StartupMenu" + String.valueOf(i) + "ShiftF5.gif");
          F8StartupMenuXShiftF5Label[i] = new JLabel(new ImageIcon(F8StartupMenuXShiftF5URL[i]));
          if (F8EnterAChoiceLabel[i].getParent() != null && keys[KeyEvent.VK_SHIFT] && keys[KeyEvent.VK_F5]) {
            mainFrame.remove(F8EnterAChoiceLabel[i]);
            mainFrame.add(F8StartupMenuXShiftF5Label[i]);
            mainFrame.revalidate();
            mainFrame.repaint();
          }
        }
      }
    });
  }

  public void normalMethod() {
    normalTimer = new Timer[6];
    normalTimer[0] = new Timer(-2000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        if (F8EnterAChoiceLabel[1].getParent() != null) {
          mainFrame.remove(F8EnterAChoiceLabel[1]);
          mainFrame.add(startupLoadingScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
      }
    });
    normalTimer[1] = new Timer(2000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(startupLoadingScreen);
        mainFrame.add(blackScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    normalTimer[2] = new Timer(3600, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(blackScreen);
        mainFrame.add(tealScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    normalTimer[3] = new Timer(5000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      }
    });
    normalTimer[4] = new Timer(6000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    });
    for (int i = 3; i < 5; i++) {
      normalTimer[i].setDelay(1000);
    }
    normalTimer[5] = new Timer(7000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(blackScreen);
        mainFrame.remove(tealScreen);
        mainFrame.add(desktop);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        mainFrame.setResizable(true);
        startupClip.start();
        welcome.setVisible(true);
        for (int i = 0; i < 6; i++) {
          normalTimer[i].stop();
        }
      }
    });
    for (int i = 0; i < 6; i++) {
      normalTimer[i].start();
    }
    startMenuShutDownSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          mainFrame.remove(tealScreen);
          mainFrame.remove(blackScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
          shutDownWindowsDialog.setVisible(true);
        }
      }
    });
  }

  public void loggedBootlogtxtMethod() {
    loggedBootlogtxtTimer = new Timer[6];
    loggedBootlogtxtTimer[0] = new Timer(-2000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        if (F8EnterAChoiceLabel[2].getParent() != null) {
          mainFrame.remove(F8EnterAChoiceLabel[2]);
          mainFrame.add(startupLoadingScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
      }
    });
    loggedBootlogtxtTimer[1] = new Timer(2000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(startupLoadingScreen);
        mainFrame.add(blackScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    loggedBootlogtxtTimer[2] = new Timer(3600, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(blackScreen);
        mainFrame.add(tealScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    loggedBootlogtxtTimer[3] = new Timer(5000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      }
    });
    loggedBootlogtxtTimer[4] = new Timer(6000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    });
    for (int i = 3; i < 5; i++) {
      loggedBootlogtxtTimer[i].setDelay(1000);
    }
    loggedBootlogtxtTimer[5] = new Timer(7000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(blackScreen);
        mainFrame.remove(tealScreen);
        mainFrame.add(desktop);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        mainFrame.setResizable(true);
        startupClip.start();
        welcome.setVisible(true);
        for (int i = 0; i < 6; i++) {
          loggedBootlogtxtTimer[i].stop();
        }
      }
    });
    for (int i = 0; i < 6; i++) {
      loggedBootlogtxtTimer[i].start();
    }
    startMenuShutDownSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          mainFrame.remove(tealScreen);
          mainFrame.remove(blackScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
          shutDownWindowsDialog.setVisible(true);
        }
      }
    });
  }

  public void safeModeMethod() {
    safeModeScreenColor = new Color(85, 170, 170);
    safeModeLabel = new JLabel[4];
    for (int i = 0; i < 4; i++) {
      safeModeLabel[i] = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SafeModeLabel.png")));
    }
    safeModeLabel[0].setBounds(0, 0, 137, 20);
    safeModeLabel[1].setBounds(1145, 0, 137, 20);
    safeModeLabel[2].setBounds(0, 625, 137, 20);
    safeModeLabel[3].setBounds(1145, 625, 137, 20);
    safeModeScreen = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("SafeModeScreen.png")));
    safeModeTimer = new Timer[6];
    safeModeTimer[0] = new Timer(-2000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        if (F8EnterAChoiceLabel[3].getParent() != null) {
          mainFrame.remove(F8EnterAChoiceLabel[3]);
          mainFrame.add(startupLoadingScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
        }
      }
    });
    safeModeTimer[1] = new Timer(2000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(startupLoadingScreen);
        mainFrame.add(blackScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    safeModeTimer[2] = new Timer(3600, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(blackScreen);
        mainFrame.add(safeModeScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    safeModeTimer[3] = new Timer(5000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      }
    });
    safeModeTimer[4] = new Timer(6000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    });
    for (int i = 3; i < 5; i++) {
      safeModeTimer[i].setDelay(1000);
    }
    safeModeTimer[5] = new Timer(7000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        for (int i = 0; i < 4; i++) {
          desktop.add(safeModeLabel[i]);
        }
        desktop.setBackground(safeModeScreenColor);
        JOptionPane.showOptionDialog(null,
          "Windows is running in safe mode.\n\n" +
          "This special diagnostic mode of Windows enables you to fix the\n" +
          "problem that is keeping you from starting Windows normally. The\n" +
          "problem could be caused by your network or hardware settings.\n" +
          "Make sure these settings are correct in Control Panel, ad then try\n" +
          "starting Windows again. For more information, see the\n" +
          "Troubleshooting section in Help. While in safe mode, some of your\n" +
          "deviced may not be available.",
          "Desktop", JOptionPane.WARNING_MESSAGE, 0, exclamationMark, OK, OK[0]);
        mainFrame.remove(blackScreen);
        mainFrame.remove(safeModeScreen);
        mainFrame.add(desktop);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        mainFrame.setResizable(true);
        for (int i = 0; i < 6; i++) {
          safeModeTimer[i].stop();
        }
      }
    });

    for (int i = 0; i < 6; i++) {
      safeModeTimer[i].start();
    }
    startMenuButton.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.remove(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuButtonClicked.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuButtonClickedTwice.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.remove(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesFreeCellSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesHeartsSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesMinesweeperSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    gamesSolitaireSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetToolsInternetExplorerSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    internetToolsInternetSetupWizardSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaMediaPlayerSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaSoundRecorderSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    multimediaVolumeControlSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    systemToolsScanDiskSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesCalculatorSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesNotepadSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesOnlineRegistrationSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesPaintSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    accessoriesWordPadSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsMS_DOS_PromptSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    programsWindowsExplorerSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    documentsReadmeSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    settingsControlPanelSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    settingsPrintersSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    settingsTaskbarSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    findFilesOrFoldersSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuHelpSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    startMenuRunSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        desktop.add(safeModeLabel[2]);
        desktop.revalidate();
        desktop.repaint();
      }
    });
    safeModeShutDownDesktop = new JLabel(
      new ImageIcon(getClass().getClassLoader().getResource("SafeModeShutDownDesktop.png")));
    shutDownWindowsButton[1].addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        mainFrame.remove(safeModeShutDownDesktop);
        mainFrame.add(safeModeLabel[2]);
        mainFrame.add(desktop);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    startMenuShutDownSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          mainFrame.remove(desktop);
          mainFrame.remove(blackScreen);
          mainFrame.remove(safeModeScreen);
          mainFrame.remove(safeModeLabel[2]);
          mainFrame.add(safeModeShutDownDesktop);
          mainFrame.revalidate();
          mainFrame.repaint();
          shutDownWindowsDialog.setVisible(true);
        }
      }
    });
  }

  public void stepByStepConfirmationMethod() {
    confirmationStepXEnterURL = new URL[9];
    confirmationStepXEnterLabel = new JLabel[9];
    for (int i = 1; i < 9; i++) {
      confirmationStepXEnterURL[i] = this.getClass().getClassLoader()
        .getResource("ConfirmationStep" + String.valueOf(i) + "Enter.gif");
      confirmationStepXEnterLabel[i] = new JLabel(new ImageIcon(confirmationStepXEnterURL[i]));
    }
    mainFrame.remove(F8EnterAChoiceLabel[4]);
    mainFrame.add(confirmationStepXEnterLabel[1]);
    mainFrame.revalidate();
    mainFrame.repaint();
    // Pressing Enter Key or Y Key
    mainFrame.addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == 10 || e.getKeyCode() == 89) {
          if (confirmationStepXEnterLabel[1].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[1]);
            mainFrame.add(confirmationStepXEnterLabel[2]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (confirmationStepXEnterLabel[2].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[2]);
            mainFrame.add(confirmationStepXEnterLabel[3]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (confirmationStepXEnterLabel[3].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[3]);
            mainFrame.add(confirmationStepXEnterLabel[4]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (confirmationStepXEnterLabel[4].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[4]);
            mainFrame.add(confirmationStepXEnterLabel[5]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (confirmationStepXEnterLabel[5].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[5]);
            mainFrame.add(confirmationStepXEnterLabel[6]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (confirmationStepXEnterLabel[6].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[6]);
            mainFrame.add(confirmationStepXEnterLabel[7]);
            mainFrame.revalidate();
            mainFrame.repaint();
          } else if (confirmationStepXEnterLabel[7].getParent() != null) {
            mainFrame.remove(confirmationStepXEnterLabel[7]);
            mainFrame.add(confirmationStepXEnterLabel[8]);
            mainFrame.revalidate();
            mainFrame.repaint();
            stepByStepConfirmationTimer = new Timer[5];
            stepByStepConfirmationTimer[0] = new Timer(3000, new ActionListener() {
              public void actionPerformed(ActionEvent e) {
                mainFrame.remove(confirmationStepXEnterLabel[8]);
                mainFrame.add(blackScreen);
                mainFrame.revalidate();
                mainFrame.repaint();
              }
            });
            stepByStepConfirmationTimer[1] = new Timer(4600, new ActionListener() {
              public void actionPerformed(ActionEvent e) {
                mainFrame.remove(blackScreen);
                mainFrame.add(tealScreen);
                mainFrame.revalidate();
                mainFrame.repaint();
              }
            });
            stepByStepConfirmationTimer[2] = new Timer(5000, new ActionListener() {
              public void actionPerformed(ActionEvent e) {
                mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
              }
            });
            stepByStepConfirmationTimer[3] = new Timer(6000, new ActionListener() {
              public void actionPerformed(ActionEvent e) {

              }
            });
            stepByStepConfirmationTimer[4] = new Timer(7000, new ActionListener() {
              public void actionPerformed(ActionEvent e) {
                mainFrame.remove(blackScreen);
                mainFrame.remove(tealScreen);
                mainFrame.add(desktop);
                mainFrame.revalidate();
                mainFrame.repaint();
                mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                mainFrame.setResizable(true);
                startupClip.start();
                welcome.setVisible(true);
                for (int i = 0; i < 5; i++) {
                  stepByStepConfirmationTimer[i].stop();
                }
              }
            });
            for (int i = 0; i < 5; i++) {
              stepByStepConfirmationTimer[i].start();
            }
            startMenuShutDownSelected.addMouseListener(new MouseAdapter() {
              public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                  mainFrame.remove(tealScreen);
                  mainFrame.remove(blackScreen);
                  mainFrame.revalidate();
                  mainFrame.repaint();
                  shutDownWindowsDialog.setVisible(true);
                }
              }
            });
          }
        }
      }
    });
  }

  public void commandPromptOnlyMethod() {
    commandPromptOnlyEnteredURL = this.getClass().getClassLoader().getResource("CommandPromptOnlyEntered.gif");
    commandPromptOnlyEnteredScreen = new JLabel(new ImageIcon(commandPromptOnlyEnteredURL));
    if (F8EnterAChoiceLabel[5].getParent() != null) {
      mainFrame.remove(F8EnterAChoiceLabel[5]);
      mainFrame.add(commandPromptOnlyEnteredScreen);
      mainFrame.revalidate();
      mainFrame.repaint();
    }
  }

  public void safeModeCommandPromptOnlyMethod() {
    safeModeCommandPromptOnlyEnteredURL = this.getClass().getClassLoader()
      .getResource("safeModeCommandPromptOnlyEntered.gif");
    safeModeCommandPromptOnlyEnteredLabel = new JLabel(new ImageIcon(safeModeCommandPromptOnlyEnteredURL));
    mainFrame.remove(F8EnterAChoiceLabel[6]);
    mainFrame.add(safeModeCommandPromptOnlyEnteredLabel);
    mainFrame.revalidate();
    mainFrame.repaint();
  }

  public void previousVersionOfMSDOSMethod() {
    previousVersionOfMSDOSEntered = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("")));
    previousVersionOfMSDOSEnteredURL = new URL[3];
    previousVersionOfMSDOSEnteredLabel = new JLabel[3];
    for (int i = 1; i < 3; i++) {
      previousVersionOfMSDOSEnteredURL[i] = this.getClass().getClassLoader()
        .getResource("PreviousVersionOfMSDOSEntered" + String.valueOf(i) + ".gif");
      previousVersionOfMSDOSEnteredLabel[i] = new JLabel(new ImageIcon(previousVersionOfMSDOSEnteredURL[i]));
    }
    previousVersionOfMSDOSTimer = new Timer[8];
    previousVersionOfMSDOSTimer[0] = new Timer(0, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(F8EnterAChoiceLabel[7]);
        mainFrame.add(previousVersionOfMSDOSEntered);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    previousVersionOfMSDOSTimer[1] = new Timer(0, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(previousVersionOfMSDOSEntered);
        mainFrame.add(previousVersionOfMSDOSEnteredLabel[1]);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    previousVersionOfMSDOSTimer[2] = new Timer(500, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(previousVersionOfMSDOSEnteredLabel[1]);
        mainFrame.add(previousVersionOfMSDOSEnteredLabel[2]);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    previousVersionOfMSDOSTimer[3] = new Timer(3000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(previousVersionOfMSDOSEnteredLabel[2]);
        mainFrame.add(blackScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    previousVersionOfMSDOSTimer[4] = new Timer(3600, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.remove(blackScreen);
        mainFrame.add(tealScreen);
        mainFrame.revalidate();
        mainFrame.repaint();
      }
    });
    previousVersionOfMSDOSTimer[5] = new Timer(5000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      }
    });
    previousVersionOfMSDOSTimer[6] = new Timer(6000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    });
    for (int i = 5; i < 7; i++) {
      previousVersionOfMSDOSTimer[i].setDelay(1000);
    }
    previousVersionOfMSDOSTimer[7] = new Timer(7000, new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        for (int i = 1; i < 3; i++) {
          mainFrame.remove(previousVersionOfMSDOSEnteredLabel[i]);
        }
        mainFrame.remove(blackScreen);
        mainFrame.remove(tealScreen);
        mainFrame.add(desktop);
        mainFrame.revalidate();
        mainFrame.repaint();
        mainFrame.getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        mainFrame.setResizable(true);
        startupClip.start();
        welcome.setVisible(true);
        for (int i = 0; i < 8; i++) {
          previousVersionOfMSDOSTimer[i].stop();
        }
      }
    });
    for (int i = 0; i < 8; i++) {
      previousVersionOfMSDOSTimer[i].start();
    }
    startMenuShutDownSelected.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
          mainFrame.remove(tealScreen);
          mainFrame.remove(blackScreen);
          mainFrame.revalidate();
          mainFrame.repaint();
          shutDownWindowsDialog.setVisible(true);
        }
      }
    });
  }
  public void setTitleBarColorMethod() {

    // Setting Active Caption Text to White
    UIManager.put("activeCaptionText", new javax.swing.plaf.ColorUIResource(white));
    // Main Frame
    mainFrame.setUndecorated(true);
    mainFrame.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Welcome
    welcome.setUndecorated(true);
    welcome.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // About Windows 95
    aboutWindows95Dialog.setUndecorated(true);
    aboutWindows95Dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // About Notepad
    aboutNotepadDialog.setUndecorated(true);
    aboutNotepadDialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Shut Down Windows
    shutDownWindowsDialog.setUndecorated(true);
    shutDownWindowsDialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Shut Down Windows Help
    shutDownWindowsHelp.setUndecorated(true);
    shutDownWindowsHelp.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Annotate
    annotateDialog.setUndecorated(true);
    annotateDialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Display Properties
    displayProperties.setUndecorated(true);
    displayProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Display Properties Change Configuration
    displayPropertiesChangeConfiguration.setUndecorated(true);
    displayPropertiesChangeConfiguration.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Start Menu Popup Menu
    startMenuPopupOpen.setUndecorated(true);
    startMenuPopupOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Exploring Start Menu
    exploringStartMenu.setUndecorated(true);
    exploringStartMenu.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Start Menu Popup Find
    startMenuPopupFind.setUndecorated(true);
    startMenuPopupFind.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Taskbar Properties
    taskbarProperties.setUndecorated(true);
    taskbarProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Taskbar Properties Create Shortcut
    taskbarPropertiesCreateShortcut.setUndecorated(true);
    taskbarPropertiesCreateShortcut.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Taskbar Properties Remove Shortcuts/Folders
    taskbarPropertiesRemoveShortcutsFolders.setUndecorated(true);
    taskbarPropertiesRemoveShortcutsFolders.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Taskbar Properties Advanced Exploring - Start Menu
    taskbarPropertiesAdvanced.setUndecorated(true);
    taskbarPropertiesAdvanced.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Volume Control
    volumeControl.setUndecorated(true);
    volumeControl.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Audio Properties
    audioProperties.setUndecorated(true);
    audioProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Date Time Properties
    dateTimeProperties.setUndecorated(true);
    dateTimeProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // My Computer
    myComputerOpen.setUndecorated(true);
    myComputerOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Exploring - My Computer
    exploringMyComputer.setUndecorated(true);
    exploringMyComputer.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Removable Disk(A:) Explore
    removableDiskA_Explore.setUndecorated(true);
    removableDiskA_Explore.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Removable Disk(A:) Properties
    removableDiskA_Properties.setUndecorated(true);
    removableDiskA_Properties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // PlayDosGame(C:)
    playDosGameC_Open.setUndecorated(true);
    playDosGameC_Open.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // PlayDosGame(C:) Properties
    playDosGameC_Properties.setUndecorated(true);
    playDosGameC_Properties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    /// PlayDosGame(C:) -> Program Files
    programFilesOpen.setUndecorated(true);
    programFilesOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Control Panel
    controlPanelOpen.setUndecorated(true);
    controlPanelOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    /// Add New Hardware
    addNewHardwareWizard.setUndecorated(true);
    addNewHardwareWizard.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Add/Remove Programs Properties
    addRemoveProgramsProperties.setUndecorated(true);
    addRemoveProgramsProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Add/Remove Programs Properties -> Install
    addRemoveProgramsPropertiesInstall.setUndecorated(true);
    addRemoveProgramsPropertiesInstall.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Add/Remove Programs Properties -> Details...
    addRemoveProgramsPropertiesDetails.setUndecorated(true);
    addRemoveProgramsPropertiesDetails.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Add/Remove Programs Properties -> Have Disk...
    addRemoveProgramsPropertiesHaveDisk.setUndecorated(true);
    addRemoveProgramsPropertiesHaveDisk.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Fonts
    controlPanelFontsOpen.setUndecorated(true);
    controlPanelFontsOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    /// Internet Properties
    controlPanelInternetProperties.setUndecorated(true);
    controlPanelInternetProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Joystick Properties
    joystickProperties.setUndecorated(true);
    joystickProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Custom Joystick
    customJoystick.setUndecorated(true);
    customJoystick.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Joystick 5 Calibration
    joystickCalibration.setUndecorated(true);
    joystickCalibration.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Joystick 5 Test
    joystickTest.setUndecorated(true);
    joystickTest.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Keyboard Properties
    keyboardProperties.setUndecorated(true);
    keyboardProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Keyboard Properties -> Add Language
    keyboardPropertiesAdd.setUndecorated(true);
    keyboardPropertiesAdd.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Keyboard Properties -> Language Properties
    keyboardPropertiesProperties.setUndecorated(true);
    keyboardPropertiesProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Keyboard Properties -> Change... -> Select Device
    keyboardPropertiesChange.setUndecorated(true);
    keyboardPropertiesChange.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Modems -> Install New Modem
    modemsInstallNewModem.setUndecorated(true);
    modemsInstallNewModem.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Modems -> Modems Properties
    modemsProperties.setUndecorated(true);
    modemsProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Mouse Properties
    mouseProperties.setUndecorated(true);
    mouseProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Mouse Properties -> Save As...
    mousePropertiesSaveScheme.setUndecorated(true);
    mousePropertiesSaveScheme.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    //// Mouse Properties -> Change... -> Select Device
    mousePropertiesChange.setUndecorated(true);
    mousePropertiesChange.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Multimedia Properties
    multimediaProperties.setUndecorated(true);
    multimediaProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Network
    controlPanelNetwork.setUndecorated(true);
    controlPanelNetwork.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    /// Passwords Properties
    passwordsProperties.setUndecorated(true);
    passwordsProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Printers
    printersOpen.setUndecorated(true);
    printersOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Add Printer Wizard
    addPrinterWizard.setUndecorated(true);
    addPrinterWizard.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Regional Settings
    regionalSettingsProperties.setUndecorated(true);
    regionalSettingsProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Sound Properties
    soundsProperties.setUndecorated(true);
    soundsProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Control Panel System Properties
    controlPanelSystemProperties.setUndecorated(true);
    controlPanelSystemProperties.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Inbox
    inboxOpen.setUndecorated(true);
    inboxOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Copying Files
    copyingFiles.setUndecorated(true);
    copyingFiles.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    copyingFiles2.setUndecorated(true);
    copyingFiles2.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Inbox Properties
    inboxProperties.setUndecorated(true);
    inboxProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Recycle Bin
    recycleBinOpen.setUndecorated(true);
    recycleBinOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Exploring Recycle Bin
    exploringRecycleBin.setUndecorated(true);
    exploringRecycleBin.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Recycle Bin Properties
    recycleBinProperties.setUndecorated(true);
    recycleBinProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // The Internet
    theInternetOpen.setUndecorated(true);
    theInternetOpen.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Install New Modem Copying Files...
    theInternetCopyingFiles.setUndecorated(true);
    theInternetCopyingFiles.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    theInternetCopyingFiles2.setUndecorated(true);
    theInternetCopyingFiles2.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Install New Modem
    theInternetOpen.setUndecorated(true);
    theInternetOpen.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Internet Properties
    internetProperties.setUndecorated(true);
    internetProperties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // MSN_Open
    MSN_Open.setUndecorated(true);
    MSN_Open.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // MSN_Properties
    MSN_Properties.setUndecorated(true);
    MSN_Properties.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Free Cell Open
    freeCellOpen.setUndecorated(true);
    freeCellOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Free Cell Statistics
    freeCellStatistics.setUndecorated(true);
    freeCellStatistics.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Free Cell Options
    freeCellOptions.setUndecorated(true);
    freeCellOptions.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Hearts Open
    heartsOpen.setUndecorated(true);
    heartsOpen.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Hearts Welcome
    heartsWelcome.setUndecorated(true);
    heartsWelcome.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Hearts Options
    heartsOptions.setUndecorated(true);
    heartsOptions.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Hearts Score Sheet
    heartsScoreSheet.setUndecorated(true);
    heartsScoreSheet.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Hearts Quote
    heartsQuote.setUndecorated(true);
    heartsQuote.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Hearts About
    heartsAbout.setUndecorated(true);
    heartsAbout.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Minesweeper Open
    minesweeperOpen.setUndecorated(true);
    minesweeperOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Solitaire Open
    solitaireOpen.setUndecorated(true);
    solitaireOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Internet Explorer Open
    internetExplorerOpen.setUndecorated(true);
    internetExplorerOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Media Player Open
    mediaPlayerOpen.setUndecorated(true);
    mediaPlayerOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Sound Recorder Open
    soundRecorderOpen.setUndecorated(true);
    soundRecorderOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Scan Disk Open
    scanDiskOpen.setUndecorated(true);
    scanDiskOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Calculator Open
    calculatorOpen.setUndecorated(true);
    calculatorOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Paint Open
    paintOpen.setUndecorated(true);
    paintOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // MS-DOS Prompt Open
    MSDOSPromptOpen.setUndecorated(true);
    MSDOSPromptOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Windows Explorer Open
    windowsExplorerOpen.setUndecorated(true);
    windowsExplorerOpen.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Start Menu Documents Readme
    documentsReadme_txt.setUndecorated(true);
    documentsReadme_txt.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Start Menu Find All Files
    findAllFiles.setUndecorated(true);
    findAllFiles.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
    // Find All Files Browse For Folder
    findAllFilesBrowseForFolder.setUndecorated(true);
    findAllFilesBrowseForFolder.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Start Menu Help Topics: Windows Help
    helpTopicsWindowsHelp.setUndecorated(true);
    helpTopicsWindowsHelp.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Find Setup Wizard
    findSetupWizard.setUndecorated(true);
    findSetupWizard.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // Start Menu Run Open
    startMenuRunOpen.setUndecorated(true);
    startMenuRunOpen.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    // taskManager
    MetalLookAndFeel.setCurrentTheme(new MyDefaultMetalTheme());
    try {
      UIManager.setLookAndFeel(new MetalLookAndFeel());
    } catch (Exception e) {
      e.printStackTrace();
    }
    SwingUtilities.updateComponentTreeUI(mainFrame);
    SwingUtilities.updateComponentTreeUI(welcome);
    SwingUtilities.updateComponentTreeUI(aboutWindows95Dialog);
    SwingUtilities.updateComponentTreeUI(aboutNotepadDialog);
    SwingUtilities.updateComponentTreeUI(shutDownWindowsDialog);
    SwingUtilities.updateComponentTreeUI(shutDownWindowsHelp);
    SwingUtilities.updateComponentTreeUI(annotateDialog);
    SwingUtilities.updateComponentTreeUI(displayProperties);
    SwingUtilities.updateComponentTreeUI(displayPropertiesChangeConfiguration);
    SwingUtilities.updateComponentTreeUI(startMenuPopupOpen);
    SwingUtilities.updateComponentTreeUI(exploringStartMenu);
    SwingUtilities.updateComponentTreeUI(startMenuPopupFind);
    SwingUtilities.updateComponentTreeUI(taskbarProperties);
    SwingUtilities.updateComponentTreeUI(taskbarPropertiesCreateShortcut);
    SwingUtilities.updateComponentTreeUI(taskbarPropertiesRemoveShortcutsFolders);
    SwingUtilities.updateComponentTreeUI(taskbarPropertiesAdvanced);
    SwingUtilities.updateComponentTreeUI(volumeControl);
    SwingUtilities.updateComponentTreeUI(audioProperties);
    SwingUtilities.updateComponentTreeUI(dateTimeProperties);
    SwingUtilities.updateComponentTreeUI(myComputerOpen);
    SwingUtilities.updateComponentTreeUI(exploringMyComputer);
    SwingUtilities.updateComponentTreeUI(removableDiskA_Explore);
    SwingUtilities.updateComponentTreeUI(removableDiskA_Properties);
    SwingUtilities.updateComponentTreeUI(playDosGameC_Open);
    SwingUtilities.updateComponentTreeUI(playDosGameC_Properties);
    SwingUtilities.updateComponentTreeUI(programFilesOpen);
    SwingUtilities.updateComponentTreeUI(controlPanelOpen);
    // Control Panel Objects When Open
    SwingUtilities.updateComponentTreeUI(addNewHardwareWizard);
    SwingUtilities.updateComponentTreeUI(addRemoveProgramsProperties);
    SwingUtilities.updateComponentTreeUI(addRemoveProgramsPropertiesInstall);
    SwingUtilities.updateComponentTreeUI(addRemoveProgramsPropertiesDetails);
    SwingUtilities.updateComponentTreeUI(addRemoveProgramsPropertiesHaveDisk);
    SwingUtilities.updateComponentTreeUI(controlPanelFontsOpen);
    SwingUtilities.updateComponentTreeUI(controlPanelInternetProperties);
    SwingUtilities.updateComponentTreeUI(joystickProperties);
    SwingUtilities.updateComponentTreeUI(customJoystick);
    SwingUtilities.updateComponentTreeUI(joystickCalibration);
    SwingUtilities.updateComponentTreeUI(joystickTest);
    SwingUtilities.updateComponentTreeUI(keyboardProperties);
    SwingUtilities.updateComponentTreeUI(keyboardPropertiesAdd);
    SwingUtilities.updateComponentTreeUI(keyboardPropertiesProperties);
    SwingUtilities.updateComponentTreeUI(keyboardPropertiesChange);
    SwingUtilities.updateComponentTreeUI(modemsInstallNewModem);
    SwingUtilities.updateComponentTreeUI(modemsProperties);
    SwingUtilities.updateComponentTreeUI(mouseProperties);
    SwingUtilities.updateComponentTreeUI(mousePropertiesSaveScheme);
    SwingUtilities.updateComponentTreeUI(mousePropertiesChange);
    SwingUtilities.updateComponentTreeUI(multimediaProperties);
    SwingUtilities.updateComponentTreeUI(controlPanelNetwork);
    SwingUtilities.updateComponentTreeUI(passwordsProperties);
    // Printers
    SwingUtilities.updateComponentTreeUI(printersOpen);
    SwingUtilities.updateComponentTreeUI(addPrinterWizard);
    // Control Panel Objects Open
    SwingUtilities.updateComponentTreeUI(regionalSettingsProperties);
    SwingUtilities.updateComponentTreeUI(soundsProperties);
    SwingUtilities.updateComponentTreeUI(controlPanelSystemProperties);
    // More Windows
    SwingUtilities.updateComponentTreeUI(inboxOpen);
    SwingUtilities.updateComponentTreeUI(copyingFiles);
    SwingUtilities.updateComponentTreeUI(copyingFiles2);
    SwingUtilities.updateComponentTreeUI(inboxProperties);
    SwingUtilities.updateComponentTreeUI(recycleBinOpen);
    SwingUtilities.updateComponentTreeUI(exploringRecycleBin);
    SwingUtilities.updateComponentTreeUI(recycleBinProperties);
    SwingUtilities.updateComponentTreeUI(theInternetOpen);
    SwingUtilities.updateComponentTreeUI(theInternetCopyingFiles);
    SwingUtilities.updateComponentTreeUI(theInternetCopyingFiles2);
    SwingUtilities.updateComponentTreeUI(internetProperties);
    SwingUtilities.updateComponentTreeUI(MSN_Open);
    SwingUtilities.updateComponentTreeUI(MSN_Properties);
    SwingUtilities.updateComponentTreeUI(freeCellOpen);
    SwingUtilities.updateComponentTreeUI(freeCellStatistics);
    SwingUtilities.updateComponentTreeUI(freeCellOptions);
    SwingUtilities.updateComponentTreeUI(heartsOpen);
    SwingUtilities.updateComponentTreeUI(heartsWelcome);
    SwingUtilities.updateComponentTreeUI(heartsOptions);
    SwingUtilities.updateComponentTreeUI(heartsScoreSheet);
    SwingUtilities.updateComponentTreeUI(heartsQuote);
    SwingUtilities.updateComponentTreeUI(heartsAbout);
    SwingUtilities.updateComponentTreeUI(minesweeperOpen);
    SwingUtilities.updateComponentTreeUI(solitaireOpen);
    SwingUtilities.updateComponentTreeUI(internetExplorerOpen);
    SwingUtilities.updateComponentTreeUI(mediaPlayerOpen);
    SwingUtilities.updateComponentTreeUI(soundRecorderOpen);
    SwingUtilities.updateComponentTreeUI(scanDiskOpen);
    SwingUtilities.updateComponentTreeUI(calculatorOpen);
    SwingUtilities.updateComponentTreeUI(paintOpen);
    SwingUtilities.updateComponentTreeUI(MSDOSPromptOpen);
    SwingUtilities.updateComponentTreeUI(windowsExplorerOpen);
    SwingUtilities.updateComponentTreeUI(documentsReadme_txt);
    SwingUtilities.updateComponentTreeUI(findAllFiles);
    SwingUtilities.updateComponentTreeUI(findAllFilesBrowseForFolder);
    SwingUtilities.updateComponentTreeUI(helpTopicsWindowsHelp);
    SwingUtilities.updateComponentTreeUI(findSetupWizard);
    SwingUtilities.updateComponentTreeUI(startMenuRunOpen);
  }

  class MyDefaultMetalTheme extends DefaultMetalTheme {
    Color win95Blue = new Color(0, 0, 130);

    public ColorUIResource getWindowTitleInactiveBackground() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getWindowTitleBackground() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getPrimaryControlHighlight() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getPrimaryControlDarkShadow() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getPrimaryControl() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getControlHighlight() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getControlDarkShadow() {
      return new ColorUIResource(win95Blue);
    }

    public ColorUIResource getControl() {
      return new ColorUIResource(win95Blue);
    }

  }
}